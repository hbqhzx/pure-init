// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    contract "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/contract/models"
)

type QueryRecordListRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /*  (Optional) */
    Reasonable *bool `json:"reasonable"`

    /*  (Optional) */
    PageSizeZero *bool `json:"pageSizeZero"`

    /*  (Optional) */
    StatusType *int `json:"statusType"`

    /*  (Optional) */
    CountSql *bool `json:"countSql"`

    /*  (Optional) */
    Pin *string `json:"pin"`

    /*  (Optional) */
    PageSize *int `json:"pageSize"`

    /* 查询开始时间，格式：yyyy-MM-dd HH:mm:ss (Optional) */
    StartTime *string `json:"startTime"`

    /*  (Optional) */
    PageNum *int `json:"pageNum"`

    /* 查询结束时间，格式：yyyy-MM-dd HH:mm:ss (Optional) */
    EndTime *string `json:"endTime"`

    /*  (Optional) */
    OrderBy *string `json:"orderBy"`

    /*  (Optional) */
    UniqueNumbers []string `json:"uniqueNumbers"`

    /* 合同来源（2:备案，3：订单 (Optional) */
    Source *int `json:"source"`
}

/*
 * param regionId: Region ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewQueryRecordListRequest(
    regionId string,
) *QueryRecordListRequest {

	return &QueryRecordListRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/contract:queryRecordList",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: Region ID (Required)
 * param reasonable:  (Optional)
 * param pageSizeZero:  (Optional)
 * param statusType:  (Optional)
 * param countSql:  (Optional)
 * param pin:  (Optional)
 * param pageSize:  (Optional)
 * param startTime: 查询开始时间，格式：yyyy-MM-dd HH:mm:ss (Optional)
 * param pageNum:  (Optional)
 * param endTime: 查询结束时间，格式：yyyy-MM-dd HH:mm:ss (Optional)
 * param orderBy:  (Optional)
 * param uniqueNumbers:  (Optional)
 * param source: 合同来源（2:备案，3：订单 (Optional)
 */
func NewQueryRecordListRequestWithAllParams(
    regionId string,
    reasonable *bool,
    pageSizeZero *bool,
    statusType *int,
    countSql *bool,
    pin *string,
    pageSize *int,
    startTime *string,
    pageNum *int,
    endTime *string,
    orderBy *string,
    uniqueNumbers []string,
    source *int,
) *QueryRecordListRequest {

    return &QueryRecordListRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/contract:queryRecordList",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Reasonable: reasonable,
        PageSizeZero: pageSizeZero,
        StatusType: statusType,
        CountSql: countSql,
        Pin: pin,
        PageSize: pageSize,
        StartTime: startTime,
        PageNum: pageNum,
        EndTime: endTime,
        OrderBy: orderBy,
        UniqueNumbers: uniqueNumbers,
        Source: source,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewQueryRecordListRequestWithoutParam() *QueryRecordListRequest {

    return &QueryRecordListRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/contract:queryRecordList",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *QueryRecordListRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param reasonable: (Optional) */
func (r *QueryRecordListRequest) SetReasonable(reasonable bool) {
    r.Reasonable = &reasonable
}

/* param pageSizeZero: (Optional) */
func (r *QueryRecordListRequest) SetPageSizeZero(pageSizeZero bool) {
    r.PageSizeZero = &pageSizeZero
}

/* param statusType: (Optional) */
func (r *QueryRecordListRequest) SetStatusType(statusType int) {
    r.StatusType = &statusType
}

/* param countSql: (Optional) */
func (r *QueryRecordListRequest) SetCountSql(countSql bool) {
    r.CountSql = &countSql
}

/* param pin: (Optional) */
func (r *QueryRecordListRequest) SetPin(pin string) {
    r.Pin = &pin
}

/* param pageSize: (Optional) */
func (r *QueryRecordListRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

/* param startTime: 查询开始时间，格式：yyyy-MM-dd HH:mm:ss(Optional) */
func (r *QueryRecordListRequest) SetStartTime(startTime string) {
    r.StartTime = &startTime
}

/* param pageNum: (Optional) */
func (r *QueryRecordListRequest) SetPageNum(pageNum int) {
    r.PageNum = &pageNum
}

/* param endTime: 查询结束时间，格式：yyyy-MM-dd HH:mm:ss(Optional) */
func (r *QueryRecordListRequest) SetEndTime(endTime string) {
    r.EndTime = &endTime
}

/* param orderBy: (Optional) */
func (r *QueryRecordListRequest) SetOrderBy(orderBy string) {
    r.OrderBy = &orderBy
}

/* param uniqueNumbers: (Optional) */
func (r *QueryRecordListRequest) SetUniqueNumbers(uniqueNumbers []string) {
    r.UniqueNumbers = uniqueNumbers
}

/* param source: 合同来源（2:备案，3：订单(Optional) */
func (r *QueryRecordListRequest) SetSource(source int) {
    r.Source = &source
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r QueryRecordListRequest) GetRegionId() string {
    return r.RegionId
}

type QueryRecordListResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result QueryRecordListResult `json:"result"`
}

type QueryRecordListResult struct {
    ResultList []contract.WebsiteInfoRes `json:"resultList"`
    TotalCount int `json:"totalCount"`
    TotalPage int `json:"totalPage"`
}