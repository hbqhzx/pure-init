// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    tsds "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/tsds/models"
)

type UpdateUserRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* Instance ID  */
    InstanceId string `json:"instanceId"`

    /* Instance user name  */
    UserName string `json:"userName"`

    /* Update instance user parameters  */
    InstanceUserSpec *tsds.InstanceUserAttribute `json:"instanceUserSpec"`
}

/*
 * param regionId: Region ID (Required)
 * param instanceId: Instance ID (Required)
 * param userName: Instance user name (Required)
 * param instanceUserSpec: Update instance user parameters (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateUserRequest(
    regionId string,
    instanceId string,
    userName string,
    instanceUserSpec *tsds.InstanceUserAttribute,
) *UpdateUserRequest {

	return &UpdateUserRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/instances/{instanceId}/users/{userName}",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        InstanceId: instanceId,
        UserName: userName,
        InstanceUserSpec: instanceUserSpec,
	}
}

/*
 * param regionId: Region ID (Required)
 * param instanceId: Instance ID (Required)
 * param userName: Instance user name (Required)
 * param instanceUserSpec: Update instance user parameters (Required)
 */
func NewUpdateUserRequestWithAllParams(
    regionId string,
    instanceId string,
    userName string,
    instanceUserSpec *tsds.InstanceUserAttribute,
) *UpdateUserRequest {

    return &UpdateUserRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}/users/{userName}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        InstanceId: instanceId,
        UserName: userName,
        InstanceUserSpec: instanceUserSpec,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateUserRequestWithoutParam() *UpdateUserRequest {

    return &UpdateUserRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}/users/{userName}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *UpdateUserRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param instanceId: Instance ID(Required) */
func (r *UpdateUserRequest) SetInstanceId(instanceId string) {
    r.InstanceId = instanceId
}

/* param userName: Instance user name(Required) */
func (r *UpdateUserRequest) SetUserName(userName string) {
    r.UserName = userName
}

/* param instanceUserSpec: Update instance user parameters(Required) */
func (r *UpdateUserRequest) SetInstanceUserSpec(instanceUserSpec *tsds.InstanceUserAttribute) {
    r.InstanceUserSpec = instanceUserSpec
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateUserRequest) GetRegionId() string {
    return r.RegionId
}

type UpdateUserResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateUserResult `json:"result"`
}

type UpdateUserResult struct {
}