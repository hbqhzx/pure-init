// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type CreateHubInstanceRequest struct {

    core.JDCloudRequest

    /*  (Optional) */
    Name *string `json:"name"`

    /*  (Optional) */
    RegionId *string `json:"regionId"`

    /*  (Optional) */
    AzId *string `json:"azId"`

    /*  (Optional) */
    AzName *string `json:"azName"`

    /*  (Optional) */
    VpcId *string `json:"vpcId"`

    /*  (Optional) */
    VpcName *string `json:"vpcName"`

    /*  (Optional) */
    SubnetId *string `json:"subnetId"`

    /*  (Optional) */
    SubnetName *string `json:"subnetName"`

    /*  (Optional) */
    Description *string `json:"description"`

    /*  (Optional) */
    RdsHostName *string `json:"rdsHostName"`

    /*  (Optional) */
    RdsInstanceId *string `json:"rdsInstanceId"`

    /*  (Optional) */
    RdsDatabase *string `json:"rdsDatabase"`

    /*  (Optional) */
    RdsUserName *string `json:"rdsUserName"`

    /*  (Optional) */
    RdsPassword *string `json:"rdsPassword"`

    /*  (Optional) */
    JcqAccessPoint *string `json:"jcqAccessPoint"`

    /*  (Optional) */
    JcqTopicName *string `json:"jcqTopicName"`

    /*  (Optional) */
    JcqTopicType *string `json:"jcqTopicType"`

    /*  (Optional) */
    JcqRegion *string `json:"jcqRegion"`

    /* ak,非必填 (Optional) */
    Ak *string `json:"ak"`

    /* sk,非必填 (Optional) */
    Sk *string `json:"sk"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateHubInstanceRequest(
) *CreateHubInstanceRequest {

	return &CreateHubInstanceRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/instance",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param name:  (Optional)
 * param regionId:  (Optional)
 * param azId:  (Optional)
 * param azName:  (Optional)
 * param vpcId:  (Optional)
 * param vpcName:  (Optional)
 * param subnetId:  (Optional)
 * param subnetName:  (Optional)
 * param description:  (Optional)
 * param rdsHostName:  (Optional)
 * param rdsInstanceId:  (Optional)
 * param rdsDatabase:  (Optional)
 * param rdsUserName:  (Optional)
 * param rdsPassword:  (Optional)
 * param jcqAccessPoint:  (Optional)
 * param jcqTopicName:  (Optional)
 * param jcqTopicType:  (Optional)
 * param jcqRegion:  (Optional)
 * param ak: ak,非必填 (Optional)
 * param sk: sk,非必填 (Optional)
 */
func NewCreateHubInstanceRequestWithAllParams(
    name *string,
    regionId *string,
    azId *string,
    azName *string,
    vpcId *string,
    vpcName *string,
    subnetId *string,
    subnetName *string,
    description *string,
    rdsHostName *string,
    rdsInstanceId *string,
    rdsDatabase *string,
    rdsUserName *string,
    rdsPassword *string,
    jcqAccessPoint *string,
    jcqTopicName *string,
    jcqTopicType *string,
    jcqRegion *string,
    ak *string,
    sk *string,
) *CreateHubInstanceRequest {

    return &CreateHubInstanceRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/instance",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Name: name,
        RegionId: regionId,
        AzId: azId,
        AzName: azName,
        VpcId: vpcId,
        VpcName: vpcName,
        SubnetId: subnetId,
        SubnetName: subnetName,
        Description: description,
        RdsHostName: rdsHostName,
        RdsInstanceId: rdsInstanceId,
        RdsDatabase: rdsDatabase,
        RdsUserName: rdsUserName,
        RdsPassword: rdsPassword,
        JcqAccessPoint: jcqAccessPoint,
        JcqTopicName: jcqTopicName,
        JcqTopicType: jcqTopicType,
        JcqRegion: jcqRegion,
        Ak: ak,
        Sk: sk,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateHubInstanceRequestWithoutParam() *CreateHubInstanceRequest {

    return &CreateHubInstanceRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/instance",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param name: (Optional) */
func (r *CreateHubInstanceRequest) SetName(name string) {
    r.Name = &name
}

/* param regionId: (Optional) */
func (r *CreateHubInstanceRequest) SetRegionId(regionId string) {
    r.RegionId = &regionId
}

/* param azId: (Optional) */
func (r *CreateHubInstanceRequest) SetAzId(azId string) {
    r.AzId = &azId
}

/* param azName: (Optional) */
func (r *CreateHubInstanceRequest) SetAzName(azName string) {
    r.AzName = &azName
}

/* param vpcId: (Optional) */
func (r *CreateHubInstanceRequest) SetVpcId(vpcId string) {
    r.VpcId = &vpcId
}

/* param vpcName: (Optional) */
func (r *CreateHubInstanceRequest) SetVpcName(vpcName string) {
    r.VpcName = &vpcName
}

/* param subnetId: (Optional) */
func (r *CreateHubInstanceRequest) SetSubnetId(subnetId string) {
    r.SubnetId = &subnetId
}

/* param subnetName: (Optional) */
func (r *CreateHubInstanceRequest) SetSubnetName(subnetName string) {
    r.SubnetName = &subnetName
}

/* param description: (Optional) */
func (r *CreateHubInstanceRequest) SetDescription(description string) {
    r.Description = &description
}

/* param rdsHostName: (Optional) */
func (r *CreateHubInstanceRequest) SetRdsHostName(rdsHostName string) {
    r.RdsHostName = &rdsHostName
}

/* param rdsInstanceId: (Optional) */
func (r *CreateHubInstanceRequest) SetRdsInstanceId(rdsInstanceId string) {
    r.RdsInstanceId = &rdsInstanceId
}

/* param rdsDatabase: (Optional) */
func (r *CreateHubInstanceRequest) SetRdsDatabase(rdsDatabase string) {
    r.RdsDatabase = &rdsDatabase
}

/* param rdsUserName: (Optional) */
func (r *CreateHubInstanceRequest) SetRdsUserName(rdsUserName string) {
    r.RdsUserName = &rdsUserName
}

/* param rdsPassword: (Optional) */
func (r *CreateHubInstanceRequest) SetRdsPassword(rdsPassword string) {
    r.RdsPassword = &rdsPassword
}

/* param jcqAccessPoint: (Optional) */
func (r *CreateHubInstanceRequest) SetJcqAccessPoint(jcqAccessPoint string) {
    r.JcqAccessPoint = &jcqAccessPoint
}

/* param jcqTopicName: (Optional) */
func (r *CreateHubInstanceRequest) SetJcqTopicName(jcqTopicName string) {
    r.JcqTopicName = &jcqTopicName
}

/* param jcqTopicType: (Optional) */
func (r *CreateHubInstanceRequest) SetJcqTopicType(jcqTopicType string) {
    r.JcqTopicType = &jcqTopicType
}

/* param jcqRegion: (Optional) */
func (r *CreateHubInstanceRequest) SetJcqRegion(jcqRegion string) {
    r.JcqRegion = &jcqRegion
}

/* param ak: ak,非必填(Optional) */
func (r *CreateHubInstanceRequest) SetAk(ak string) {
    r.Ak = &ak
}

/* param sk: sk,非必填(Optional) */
func (r *CreateHubInstanceRequest) SetSk(sk string) {
    r.Sk = &sk
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateHubInstanceRequest) GetRegionId() string {
    return ""
}

type CreateHubInstanceResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateHubInstanceResult `json:"result"`
}

type CreateHubInstanceResult struct {
    InstanceId string `json:"instanceId"`
}