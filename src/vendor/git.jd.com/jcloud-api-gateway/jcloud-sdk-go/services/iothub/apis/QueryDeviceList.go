// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    iothub "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/iothub/models"
)

type QueryDeviceListRequest struct {

    core.JDCloudRequest

    /* hub实例Id (Optional) */
    InstanceId *string `json:"instanceId"`

    /* 过滤条件,设备Id,可以为空 (Optional) */
    DeviceId *string `json:"deviceId"`

    /* 模糊查询条件,可以为空 (Optional) */
    DisplayName *string `json:"displayName"`

    /* 设备状态,可以为空 (Optional) */
    DeviceState *int `json:"deviceState"`

    /* 设备类型,可以为空 (Optional) */
    DeviceType *int `json:"deviceType"`

    /* 支持两个[omName,parentName]排序字段,样例:field-asc/field-desc (Optional) */
    Order *string `json:"order"`

    /* 当前页 (Optional) */
    NowPage *int `json:"nowPage"`

    /* 每页数据条数 (Optional) */
    PageSize *int `json:"pageSize"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewQueryDeviceListRequest(
) *QueryDeviceListRequest {

	return &QueryDeviceListRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/device:queryPage",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param instanceId: hub实例Id (Optional)
 * param deviceId: 过滤条件,设备Id,可以为空 (Optional)
 * param displayName: 模糊查询条件,可以为空 (Optional)
 * param deviceState: 设备状态,可以为空 (Optional)
 * param deviceType: 设备类型,可以为空 (Optional)
 * param order: 支持两个[omName,parentName]排序字段,样例:field-asc/field-desc (Optional)
 * param nowPage: 当前页 (Optional)
 * param pageSize: 每页数据条数 (Optional)
 */
func NewQueryDeviceListRequestWithAllParams(
    instanceId *string,
    deviceId *string,
    displayName *string,
    deviceState *int,
    deviceType *int,
    order *string,
    nowPage *int,
    pageSize *int,
) *QueryDeviceListRequest {

    return &QueryDeviceListRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/device:queryPage",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        InstanceId: instanceId,
        DeviceId: deviceId,
        DisplayName: displayName,
        DeviceState: deviceState,
        DeviceType: deviceType,
        Order: order,
        NowPage: nowPage,
        PageSize: pageSize,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewQueryDeviceListRequestWithoutParam() *QueryDeviceListRequest {

    return &QueryDeviceListRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/device:queryPage",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param instanceId: hub实例Id(Optional) */
func (r *QueryDeviceListRequest) SetInstanceId(instanceId string) {
    r.InstanceId = &instanceId
}

/* param deviceId: 过滤条件,设备Id,可以为空(Optional) */
func (r *QueryDeviceListRequest) SetDeviceId(deviceId string) {
    r.DeviceId = &deviceId
}

/* param displayName: 模糊查询条件,可以为空(Optional) */
func (r *QueryDeviceListRequest) SetDisplayName(displayName string) {
    r.DisplayName = &displayName
}

/* param deviceState: 设备状态,可以为空(Optional) */
func (r *QueryDeviceListRequest) SetDeviceState(deviceState int) {
    r.DeviceState = &deviceState
}

/* param deviceType: 设备类型,可以为空(Optional) */
func (r *QueryDeviceListRequest) SetDeviceType(deviceType int) {
    r.DeviceType = &deviceType
}

/* param order: 支持两个[omName,parentName]排序字段,样例:field-asc/field-desc(Optional) */
func (r *QueryDeviceListRequest) SetOrder(order string) {
    r.Order = &order
}

/* param nowPage: 当前页(Optional) */
func (r *QueryDeviceListRequest) SetNowPage(nowPage int) {
    r.NowPage = &nowPage
}

/* param pageSize: 每页数据条数(Optional) */
func (r *QueryDeviceListRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r QueryDeviceListRequest) GetRegionId() string {
    return ""
}

type QueryDeviceListResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result QueryDeviceListResult `json:"result"`
}

type QueryDeviceListResult struct {
    PageSize int `json:"pageSize"`
    NowPage int `json:"nowPage"`
    TotalSize int `json:"totalSize"`
    TotalPage int `json:"totalPage"`
    Data []iothub.DevicePageVo `json:"data"`
}