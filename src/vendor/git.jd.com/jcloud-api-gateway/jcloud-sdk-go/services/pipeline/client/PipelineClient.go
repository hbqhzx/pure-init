// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    pipeline "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/pipeline/apis"
    "encoding/json"
    "errors"
)

type PipelineClient struct {
    core.JDCloudClient
}

func NewPipelineClient(credential *core.Credential) *PipelineClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("pipeline.jdcloud-api.com")

    return &PipelineClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "pipeline",
            Revision:    "0.1.0",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *PipelineClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *PipelineClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 查询获取流水线任务列表，并显示最后一次执行的状态或结果信息
/v1/regions/cn-south-1?sorts.1.name=startedAt&sorts.1.direction=desc&pageNumber=1&pageSize=10&filters.1.name=name&filters.1.values.1=我的pipeline
 */
func (c *PipelineClient) GetPipelines(request *pipeline.GetPipelinesRequest) (*pipeline.GetPipelinesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &pipeline.GetPipelinesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据uuid启动一个流水线任务 */
func (c *PipelineClient) StartPipeline(request *pipeline.StartPipelineRequest) (*pipeline.StartPipelineResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &pipeline.StartPipelineResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 新建流水线任务 */
func (c *PipelineClient) CreatePipeline(request *pipeline.CreatePipelineRequest) (*pipeline.CreatePipelineResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &pipeline.CreatePipelineResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新流水线任务 */
func (c *PipelineClient) UpdatePipeline(request *pipeline.UpdatePipelineRequest) (*pipeline.UpdatePipelineResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &pipeline.UpdatePipelineResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 上传文件，返回文件内容 */
func (c *PipelineClient) ReadFile(request *pipeline.ReadFileRequest) (*pipeline.ReadFileResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &pipeline.ReadFileResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据uuid获取流水线任务的配置信息 */
func (c *PipelineClient) GetPipeline(request *pipeline.GetPipelineRequest) (*pipeline.GetPipelineResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &pipeline.GetPipelineResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询用户限制 */
func (c *PipelineClient) GetLimits(request *pipeline.GetLimitsRequest) (*pipeline.GetLimitsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &pipeline.GetLimitsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除一个流水线任务 */
func (c *PipelineClient) DeletePipeline(request *pipeline.DeletePipelineRequest) (*pipeline.DeletePipelineResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &pipeline.DeletePipelineResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询流水线执行历史列表 */
func (c *PipelineClient) GetPipelineInstances(request *pipeline.GetPipelineInstancesRequest) (*pipeline.GetPipelineInstancesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &pipeline.GetPipelineInstancesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询多个指定流水线执行及状态信息
 */
func (c *PipelineClient) ManualAction(request *pipeline.ManualActionRequest) (*pipeline.ManualActionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &pipeline.ManualActionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询流水线执行结果及状态信息 */
func (c *PipelineClient) GetPipelineInstance(request *pipeline.GetPipelineInstanceRequest) (*pipeline.GetPipelineInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &pipeline.GetPipelineInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 停止流水线的一次执行 */
func (c *PipelineClient) StopPipelineInstance(request *pipeline.StopPipelineInstanceRequest) (*pipeline.StopPipelineInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &pipeline.StopPipelineInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取可选的源提供商 */
func (c *PipelineClient) GetSourceProviders(request *pipeline.GetSourceProvidersRequest) (*pipeline.GetSourceProvidersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &pipeline.GetSourceProvidersResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 操作提供商 */
func (c *PipelineClient) GetOperationProviders(request *pipeline.GetOperationProvidersRequest) (*pipeline.GetOperationProvidersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &pipeline.GetOperationProvidersResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询多个指定流水线执行及状态信息
 */
func (c *PipelineClient) GetPipelineInstancesByUuids(request *pipeline.GetPipelineInstancesByUuidsRequest) (*pipeline.GetPipelineInstancesByUuidsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &pipeline.GetPipelineInstancesByUuidsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 可选地域 */
func (c *PipelineClient) GetRegions(request *pipeline.GetRegionsRequest) (*pipeline.GetRegionsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &pipeline.GetRegionsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

