// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type ArrearStaticsInfoRequest struct {

    core.JDCloudRequest

    /*   */
    RegionId string `json:"regionId"`

    /* appCode (Optional) */
    AppCode *string `json:"appCode"`

    /* serviceCode (Optional) */
    ServiceCode *string `json:"serviceCode"`
}

/*
 * param regionId:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewArrearStaticsInfoRequest(
    regionId string,
) *ArrearStaticsInfoRequest {

	return &ArrearStaticsInfoRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/arrearStaticsInfo",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId:  (Required)
 * param appCode: appCode (Optional)
 * param serviceCode: serviceCode (Optional)
 */
func NewArrearStaticsInfoRequestWithAllParams(
    regionId string,
    appCode *string,
    serviceCode *string,
) *ArrearStaticsInfoRequest {

    return &ArrearStaticsInfoRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/arrearStaticsInfo",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        AppCode: appCode,
        ServiceCode: serviceCode,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewArrearStaticsInfoRequestWithoutParam() *ArrearStaticsInfoRequest {

    return &ArrearStaticsInfoRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/arrearStaticsInfo",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: (Required) */
func (r *ArrearStaticsInfoRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param appCode: appCode(Optional) */
func (r *ArrearStaticsInfoRequest) SetAppCode(appCode string) {
    r.AppCode = &appCode
}

/* param serviceCode: serviceCode(Optional) */
func (r *ArrearStaticsInfoRequest) SetServiceCode(serviceCode string) {
    r.ServiceCode = &serviceCode
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ArrearStaticsInfoRequest) GetRegionId() string {
    return r.RegionId
}

type ArrearStaticsInfoResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ArrearStaticsInfoResult `json:"result"`
}

type ArrearStaticsInfoResult struct {
    Pin string `json:"pin"`
    ArrearFee int `json:"arrearFee"`
    FirstArrearDate string `json:"firstArrearDate"`
    ArrearDays int `json:"arrearDays"`
    UserGroup int `json:"userGroup"`
    UserGroupName string `json:"userGroupName"`
    Saler string `json:"saler"`
}