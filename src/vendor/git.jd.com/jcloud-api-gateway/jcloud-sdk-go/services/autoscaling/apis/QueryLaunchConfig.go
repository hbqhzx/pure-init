// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    autoscaling "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/autoscaling/models"
)

type QueryLaunchConfigRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* PageNumber (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* PageSize (Optional) */
    PageSize *int `json:"pageSize"`

    /* 启动配置名称 (Optional) */
    ConfigName *string `json:"configName"`
}

/*
 * param regionId: 地域 Id (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewQueryLaunchConfigRequest(
    regionId string,
) *QueryLaunchConfigRequest {

	return &QueryLaunchConfigRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/launchConfigs",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param pageNumber: PageNumber (Optional)
 * param pageSize: PageSize (Optional)
 * param configName: 启动配置名称 (Optional)
 */
func NewQueryLaunchConfigRequestWithAllParams(
    regionId string,
    pageNumber *int,
    pageSize *int,
    configName *string,
) *QueryLaunchConfigRequest {

    return &QueryLaunchConfigRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/launchConfigs",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        PageNumber: pageNumber,
        PageSize: pageSize,
        ConfigName: configName,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewQueryLaunchConfigRequestWithoutParam() *QueryLaunchConfigRequest {

    return &QueryLaunchConfigRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/launchConfigs",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *QueryLaunchConfigRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param pageNumber: PageNumber(Optional) */
func (r *QueryLaunchConfigRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}

/* param pageSize: PageSize(Optional) */
func (r *QueryLaunchConfigRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

/* param configName: 启动配置名称(Optional) */
func (r *QueryLaunchConfigRequest) SetConfigName(configName string) {
    r.ConfigName = &configName
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r QueryLaunchConfigRequest) GetRegionId() string {
    return r.RegionId
}

type QueryLaunchConfigResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result QueryLaunchConfigResult `json:"result"`
}

type QueryLaunchConfigResult struct {
    List []autoscaling.LaunchConfigVO `json:"list"`
    PageNumber int64 `json:"pageNumber"`
    PageSize int64 `json:"pageSize"`
    TotalCount int64 `json:"totalCount"`
    TotalPages int64 `json:"totalPages"`
}