// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    autoscaling "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/autoscaling/models"
)

type CreateAutoscalingGroupRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* 启动配置 launch configuration 的 id  */
    AsConfigId string `json:"asConfigId"`

    /* 本弹性伸缩组的描述 (Optional) */
    Description *string `json:"description"`

    /* ipv6是否启用  */
    EnableIpv6 bool `json:"enableIpv6"`

    /* 是否从负载均衡器接收流量  */
    EnableLb bool `json:"enableLb"`

    /* 初始容量  */
    InitSize int64 `json:"initSize"`

    /* LB列表 (Optional) */
    Lbs []autoscaling.Lb `json:"lbs"`

    /* 本组最大容量  */
    MaxSize int64 `json:"maxSize"`

    /* 本组最小容量  */
    MinSize int64 `json:"minSize"`

    /* 本弹性伸缩组的名称  */
    Name string `json:"name"`

    /* 安全组ID (Optional) */
    SecurityGroups *string `json:"securityGroups"`

    /* vpc下的子网id  */
    SubnetIds string `json:"subnetIds"`

    /* 0-default, 1-oldestInstance, 2-newestInstance, 3-oldestLaunchConfig  */
    TerminationPolicy int64 `json:"terminationPolicy"`

    /* 类型。目前对用户开放的主机弹性伸缩组，取值应为“vm”  */
    Type string `json:"type"`

    /* vpc id  */
    VpcId string `json:"vpcId"`

    /* 本弹性伸缩组所在az列表，以逗号分隔。  */
    Zones string `json:"zones"`
}

/*
 * param regionId: 地域 Id (Required)
 * param asConfigId: 启动配置 launch configuration 的 id (Required)
 * param enableIpv6: ipv6是否启用 (Required)
 * param enableLb: 是否从负载均衡器接收流量 (Required)
 * param initSize: 初始容量 (Required)
 * param maxSize: 本组最大容量 (Required)
 * param minSize: 本组最小容量 (Required)
 * param name: 本弹性伸缩组的名称 (Required)
 * param subnetIds: vpc下的子网id (Required)
 * param terminationPolicy: 0-default, 1-oldestInstance, 2-newestInstance, 3-oldestLaunchConfig (Required)
 * param type_: 类型。目前对用户开放的主机弹性伸缩组，取值应为“vm” (Required)
 * param vpcId: vpc id (Required)
 * param zones: 本弹性伸缩组所在az列表，以逗号分隔。 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateAutoscalingGroupRequest(
    regionId string,
    asConfigId string,
    enableIpv6 bool,
    enableLb bool,
    initSize int64,
    maxSize int64,
    minSize int64,
    name string,
    subnetIds string,
    terminationPolicy int64,
    type_ string,
    vpcId string,
    zones string,
) *CreateAutoscalingGroupRequest {

	return &CreateAutoscalingGroupRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/autoscalingGroups",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        AsConfigId: asConfigId,
        EnableIpv6: enableIpv6,
        EnableLb: enableLb,
        InitSize: initSize,
        MaxSize: maxSize,
        MinSize: minSize,
        Name: name,
        SubnetIds: subnetIds,
        TerminationPolicy: terminationPolicy,
        Type: type_,
        VpcId: vpcId,
        Zones: zones,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param asConfigId: 启动配置 launch configuration 的 id (Required)
 * param description: 本弹性伸缩组的描述 (Optional)
 * param enableIpv6: ipv6是否启用 (Required)
 * param enableLb: 是否从负载均衡器接收流量 (Required)
 * param initSize: 初始容量 (Required)
 * param lbs: LB列表 (Optional)
 * param maxSize: 本组最大容量 (Required)
 * param minSize: 本组最小容量 (Required)
 * param name: 本弹性伸缩组的名称 (Required)
 * param securityGroups: 安全组ID (Optional)
 * param subnetIds: vpc下的子网id (Required)
 * param terminationPolicy: 0-default, 1-oldestInstance, 2-newestInstance, 3-oldestLaunchConfig (Required)
 * param type_: 类型。目前对用户开放的主机弹性伸缩组，取值应为“vm” (Required)
 * param vpcId: vpc id (Required)
 * param zones: 本弹性伸缩组所在az列表，以逗号分隔。 (Required)
 */
func NewCreateAutoscalingGroupRequestWithAllParams(
    regionId string,
    asConfigId string,
    description *string,
    enableIpv6 bool,
    enableLb bool,
    initSize int64,
    lbs []autoscaling.Lb,
    maxSize int64,
    minSize int64,
    name string,
    securityGroups *string,
    subnetIds string,
    terminationPolicy int64,
    type_ string,
    vpcId string,
    zones string,
) *CreateAutoscalingGroupRequest {

    return &CreateAutoscalingGroupRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/autoscalingGroups",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        AsConfigId: asConfigId,
        Description: description,
        EnableIpv6: enableIpv6,
        EnableLb: enableLb,
        InitSize: initSize,
        Lbs: lbs,
        MaxSize: maxSize,
        MinSize: minSize,
        Name: name,
        SecurityGroups: securityGroups,
        SubnetIds: subnetIds,
        TerminationPolicy: terminationPolicy,
        Type: type_,
        VpcId: vpcId,
        Zones: zones,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateAutoscalingGroupRequestWithoutParam() *CreateAutoscalingGroupRequest {

    return &CreateAutoscalingGroupRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/autoscalingGroups",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *CreateAutoscalingGroupRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param asConfigId: 启动配置 launch configuration 的 id(Required) */
func (r *CreateAutoscalingGroupRequest) SetAsConfigId(asConfigId string) {
    r.AsConfigId = asConfigId
}

/* param description: 本弹性伸缩组的描述(Optional) */
func (r *CreateAutoscalingGroupRequest) SetDescription(description string) {
    r.Description = &description
}

/* param enableIpv6: ipv6是否启用(Required) */
func (r *CreateAutoscalingGroupRequest) SetEnableIpv6(enableIpv6 bool) {
    r.EnableIpv6 = enableIpv6
}

/* param enableLb: 是否从负载均衡器接收流量(Required) */
func (r *CreateAutoscalingGroupRequest) SetEnableLb(enableLb bool) {
    r.EnableLb = enableLb
}

/* param initSize: 初始容量(Required) */
func (r *CreateAutoscalingGroupRequest) SetInitSize(initSize int64) {
    r.InitSize = initSize
}

/* param lbs: LB列表(Optional) */
func (r *CreateAutoscalingGroupRequest) SetLbs(lbs []autoscaling.Lb) {
    r.Lbs = lbs
}

/* param maxSize: 本组最大容量(Required) */
func (r *CreateAutoscalingGroupRequest) SetMaxSize(maxSize int64) {
    r.MaxSize = maxSize
}

/* param minSize: 本组最小容量(Required) */
func (r *CreateAutoscalingGroupRequest) SetMinSize(minSize int64) {
    r.MinSize = minSize
}

/* param name: 本弹性伸缩组的名称(Required) */
func (r *CreateAutoscalingGroupRequest) SetName(name string) {
    r.Name = name
}

/* param securityGroups: 安全组ID(Optional) */
func (r *CreateAutoscalingGroupRequest) SetSecurityGroups(securityGroups string) {
    r.SecurityGroups = &securityGroups
}

/* param subnetIds: vpc下的子网id(Required) */
func (r *CreateAutoscalingGroupRequest) SetSubnetIds(subnetIds string) {
    r.SubnetIds = subnetIds
}

/* param terminationPolicy: 0-default, 1-oldestInstance, 2-newestInstance, 3-oldestLaunchConfig(Required) */
func (r *CreateAutoscalingGroupRequest) SetTerminationPolicy(terminationPolicy int64) {
    r.TerminationPolicy = terminationPolicy
}

/* param type_: 类型。目前对用户开放的主机弹性伸缩组，取值应为“vm”(Required) */
func (r *CreateAutoscalingGroupRequest) SetType(type_ string) {
    r.Type = type_
}

/* param vpcId: vpc id(Required) */
func (r *CreateAutoscalingGroupRequest) SetVpcId(vpcId string) {
    r.VpcId = vpcId
}

/* param zones: 本弹性伸缩组所在az列表，以逗号分隔。(Required) */
func (r *CreateAutoscalingGroupRequest) SetZones(zones string) {
    r.Zones = zones
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateAutoscalingGroupRequest) GetRegionId() string {
    return r.RegionId
}

type CreateAutoscalingGroupResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateAutoscalingGroupResult `json:"result"`
}

type CreateAutoscalingGroupResult struct {
    Uuid string `json:"uuid"`
}