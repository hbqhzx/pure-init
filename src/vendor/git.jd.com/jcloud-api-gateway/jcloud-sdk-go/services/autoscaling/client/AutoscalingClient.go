// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    autoscaling "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/autoscaling/apis"
    "encoding/json"
    "errors"
)

type AutoscalingClient struct {
    core.JDCloudClient
}

func NewAutoscalingClient(credential *core.Credential) *AutoscalingClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("autoscaling.jdcloud-api.com")

    return &AutoscalingClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "autoscaling",
            Revision:    "0.0.1",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *AutoscalingClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *AutoscalingClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 删除弹性伸缩组 [MFA enabled] */
func (c *AutoscalingClient) DeleteAutoscalingGroup(request *autoscaling.DeleteAutoscalingGroupRequest) (*autoscaling.DeleteAutoscalingGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DeleteAutoscalingGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除伸缩组定时策略 */
func (c *AutoscalingClient) DeleteScheduledAction(request *autoscaling.DeleteScheduledActionRequest) (*autoscaling.DeleteScheduledActionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DeleteScheduledActionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改伸缩组动态策略 */
func (c *AutoscalingClient) ModifyDynamicPolicy(request *autoscaling.ModifyDynamicPolicyRequest) (*autoscaling.ModifyDynamicPolicyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.ModifyDynamicPolicyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改弹性伸缩详情（AG属性） */
func (c *AutoscalingClient) ModifyAutoscaling(request *autoscaling.ModifyAutoscalingRequest) (*autoscaling.ModifyAutoscalingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.ModifyAutoscalingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 禁用某个弹性伸缩组 */
func (c *AutoscalingClient) DisableAutoscalingGroupById(request *autoscaling.DisableAutoscalingGroupByIdRequest) (*autoscaling.DisableAutoscalingGroupByIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DisableAutoscalingGroupByIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 禁止某启动配置详情 */
func (c *AutoscalingClient) DisableLaunchConfig(request *autoscaling.DisableLaunchConfigRequest) (*autoscaling.DisableLaunchConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DisableLaunchConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询某个伸缩组动态策略 */
func (c *AutoscalingClient) QueryDynamicPolicyById(request *autoscaling.QueryDynamicPolicyByIdRequest) (*autoscaling.QueryDynamicPolicyByIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.QueryDynamicPolicyByIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询实例数 */
func (c *AutoscalingClient) DescribeInstances(request *autoscaling.DescribeInstancesRequest) (*autoscaling.DescribeInstancesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DescribeInstancesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询配额 */
func (c *AutoscalingClient) DescribeQuota(request *autoscaling.DescribeQuotaRequest) (*autoscaling.DescribeQuotaResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DescribeQuotaResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 向伸缩组添加实例 */
func (c *AutoscalingClient) AttachInstancesToAutoscalingGroup(request *autoscaling.AttachInstancesToAutoscalingGroupRequest) (*autoscaling.AttachInstancesToAutoscalingGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.AttachInstancesToAutoscalingGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改弹性伸缩组 */
func (c *AutoscalingClient) ModifyAutoscalingGroup(request *autoscaling.ModifyAutoscalingGroupRequest) (*autoscaling.ModifyAutoscalingGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.ModifyAutoscalingGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询弹性伸缩详情（AG属性） */
func (c *AutoscalingClient) DescribeAutoscaling(request *autoscaling.DescribeAutoscalingRequest) (*autoscaling.DescribeAutoscalingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DescribeAutoscalingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除启动配置 */
func (c *AutoscalingClient) DeleteLaunchConfig(request *autoscaling.DeleteLaunchConfigRequest) (*autoscaling.DeleteLaunchConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DeleteLaunchConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 从弹性伸缩组中删除实例 */
func (c *AutoscalingClient) DeleteInstances(request *autoscaling.DeleteInstancesRequest) (*autoscaling.DeleteInstancesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DeleteInstancesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 由定时策略UUDI查询伸缩组的定时策略 */
func (c *AutoscalingClient) QueryScheduledActionById(request *autoscaling.QueryScheduledActionByIdRequest) (*autoscaling.QueryScheduledActionByIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.QueryScheduledActionByIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建弹性伸缩详情（AG属性） */
func (c *AutoscalingClient) CreateAutoscaling(request *autoscaling.CreateAutoscalingRequest) (*autoscaling.CreateAutoscalingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.CreateAutoscalingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改伸缩组定时策略 */
func (c *AutoscalingClient) ModifyScheduledAction(request *autoscaling.ModifyScheduledActionRequest) (*autoscaling.ModifyScheduledActionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.ModifyScheduledActionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 禁用弹性伸缩详情（AG属性） */
func (c *AutoscalingClient) DisableAutoscaling(request *autoscaling.DisableAutoscalingRequest) (*autoscaling.DisableAutoscalingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DisableAutoscalingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加联系人 */
func (c *AutoscalingClient) AddContacts(request *autoscaling.AddContactsRequest) (*autoscaling.AddContactsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.AddContactsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改实例保护状态 */
func (c *AutoscalingClient) ModifyInstancesProtection(request *autoscaling.ModifyInstancesProtectionRequest) (*autoscaling.ModifyInstancesProtectionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.ModifyInstancesProtectionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建启动配置 */
func (c *AutoscalingClient) CreateLaunchConfig(request *autoscaling.CreateLaunchConfigRequest) (*autoscaling.CreateLaunchConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.CreateLaunchConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 停用伸缩组动态策略 */
func (c *AutoscalingClient) DisableDynamicPolicy(request *autoscaling.DisableDynamicPolicyRequest) (*autoscaling.DisableDynamicPolicyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DisableDynamicPolicyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询动态伸缩策略列表 */
func (c *AutoscalingClient) QueryDynamicPolicy(request *autoscaling.QueryDynamicPolicyRequest) (*autoscaling.QueryDynamicPolicyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.QueryDynamicPolicyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询启动配置 */
func (c *AutoscalingClient) QueryLaunchConfig(request *autoscaling.QueryLaunchConfigRequest) (*autoscaling.QueryLaunchConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.QueryLaunchConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 启用伸缩组定时策略 */
func (c *AutoscalingClient) EnableScheduledAction(request *autoscaling.EnableScheduledActionRequest) (*autoscaling.EnableScheduledActionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.EnableScheduledActionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建伸缩组定时策略 */
func (c *AutoscalingClient) CreateScheduledAction(request *autoscaling.CreateScheduledActionRequest) (*autoscaling.CreateScheduledActionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.CreateScheduledActionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除联系人 */
func (c *AutoscalingClient) DeleteContact(request *autoscaling.DeleteContactRequest) (*autoscaling.DeleteContactResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DeleteContactResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 启用弹性伸缩详情（AG属性） */
func (c *AutoscalingClient) EnableAutoscaling(request *autoscaling.EnableAutoscalingRequest) (*autoscaling.EnableAutoscalingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.EnableAutoscalingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 启用某个弹性伸缩组 */
func (c *AutoscalingClient) EnableAutoscalingGroupById(request *autoscaling.EnableAutoscalingGroupByIdRequest) (*autoscaling.EnableAutoscalingGroupByIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.EnableAutoscalingGroupByIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建弹性伸缩组 */
func (c *AutoscalingClient) CreateAutoscalingGroup(request *autoscaling.CreateAutoscalingGroupRequest) (*autoscaling.CreateAutoscalingGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.CreateAutoscalingGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 启用伸缩组动态策略 */
func (c *AutoscalingClient) EnableDynamicPolicy(request *autoscaling.EnableDynamicPolicyRequest) (*autoscaling.EnableDynamicPolicyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.EnableDynamicPolicyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建伸缩组动态策略 */
func (c *AutoscalingClient) CreateDynamicPolicy(request *autoscaling.CreateDynamicPolicyRequest) (*autoscaling.CreateDynamicPolicyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.CreateDynamicPolicyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询弹性伸缩组的伸缩活动历史 */
func (c *AutoscalingClient) QueryScalingHistory(request *autoscaling.QueryScalingHistoryRequest) (*autoscaling.QueryScalingHistoryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.QueryScalingHistoryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询某个弹性伸缩组详情 */
func (c *AutoscalingClient) QueryAutoscalingGroupById(request *autoscaling.QueryAutoscalingGroupByIdRequest) (*autoscaling.QueryAutoscalingGroupByIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.QueryAutoscalingGroupByIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 停用伸缩组定时策略 */
func (c *AutoscalingClient) DisableScheduledAction(request *autoscaling.DisableScheduledActionRequest) (*autoscaling.DisableScheduledActionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DisableScheduledActionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修复弹性伸缩组下的异常资源 */
func (c *AutoscalingClient) HealAutoscalingGroupById(request *autoscaling.HealAutoscalingGroupByIdRequest) (*autoscaling.HealAutoscalingGroupByIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.HealAutoscalingGroupByIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据启动配置查询弹性伸缩组 */
func (c *AutoscalingClient) QueryAutoscalingGroupsByLaunchConfigId(request *autoscaling.QueryAutoscalingGroupsByLaunchConfigIdRequest) (*autoscaling.QueryAutoscalingGroupsByLaunchConfigIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.QueryAutoscalingGroupsByLaunchConfigIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 启用某启动配置 */
func (c *AutoscalingClient) EnableLaunchConfig(request *autoscaling.EnableLaunchConfigRequest) (*autoscaling.EnableLaunchConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.EnableLaunchConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除伸缩组动态策略 */
func (c *AutoscalingClient) DeleteDynamicPolicy(request *autoscaling.DeleteDynamicPolicyRequest) (*autoscaling.DeleteDynamicPolicyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DeleteDynamicPolicyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询某个弹性伸缩组下的实例 */
func (c *AutoscalingClient) QueryInstancesByAutoscalingGroupId(request *autoscaling.QueryInstancesByAutoscalingGroupIdRequest) (*autoscaling.QueryInstancesByAutoscalingGroupIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.QueryInstancesByAutoscalingGroupIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 由伸缩组UUDI查询伸缩组的组定时策略 */
func (c *AutoscalingClient) QueryScheduledByAutoscalingGroupId(request *autoscaling.QueryScheduledByAutoscalingGroupIdRequest) (*autoscaling.QueryScheduledByAutoscalingGroupIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.QueryScheduledByAutoscalingGroupIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询联系人 */
func (c *AutoscalingClient) QueryContacts(request *autoscaling.QueryContactsRequest) (*autoscaling.QueryContactsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.QueryContactsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询弹性伸缩组列表 */
func (c *AutoscalingClient) QueryAutoscalingGroups(request *autoscaling.QueryAutoscalingGroupsRequest) (*autoscaling.QueryAutoscalingGroupsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.QueryAutoscalingGroupsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 从弹性伸缩组中移除实例 */
func (c *AutoscalingClient) DetachInstances(request *autoscaling.DetachInstancesRequest) (*autoscaling.DetachInstancesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DetachInstancesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询某启动配置详情 */
func (c *AutoscalingClient) QueryLaunchConfigById(request *autoscaling.QueryLaunchConfigByIdRequest) (*autoscaling.QueryLaunchConfigByIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.QueryLaunchConfigByIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 通过实例ID查询伸缩组 */
func (c *AutoscalingClient) DescribeAsGroupsByInstanceIds(request *autoscaling.DescribeAsGroupsByInstanceIdsRequest) (*autoscaling.DescribeAsGroupsByInstanceIdsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DescribeAsGroupsByInstanceIdsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除弹性伸缩详情（AG属性） */
func (c *AutoscalingClient) DeleteAutoscaling(request *autoscaling.DeleteAutoscalingRequest) (*autoscaling.DeleteAutoscalingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DeleteAutoscalingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量查询弹性伸缩详情（AG属性） */
func (c *AutoscalingClient) DescribeAutoscalings(request *autoscaling.DescribeAutoscalingsRequest) (*autoscaling.DescribeAutoscalingsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &autoscaling.DescribeAutoscalingsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

