// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    iam "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/iam/models"
)

type UpdateRoleRequest struct {

    core.JDCloudRequest

    /* 角色名称  */
    RoleName string `json:"roleName"`

    /* 角色信息  */
    UpdateRoleInfo *iam.UpdateRoleInfo `json:"updateRoleInfo"`
}

/*
 * param roleName: 角色名称 (Required)
 * param updateRoleInfo: 角色信息 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateRoleRequest(
    roleName string,
    updateRoleInfo *iam.UpdateRoleInfo,
) *UpdateRoleRequest {

	return &UpdateRoleRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/role/{roleName}",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        RoleName: roleName,
        UpdateRoleInfo: updateRoleInfo,
	}
}

/*
 * param roleName: 角色名称 (Required)
 * param updateRoleInfo: 角色信息 (Required)
 */
func NewUpdateRoleRequestWithAllParams(
    roleName string,
    updateRoleInfo *iam.UpdateRoleInfo,
) *UpdateRoleRequest {

    return &UpdateRoleRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/role/{roleName}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        RoleName: roleName,
        UpdateRoleInfo: updateRoleInfo,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateRoleRequestWithoutParam() *UpdateRoleRequest {

    return &UpdateRoleRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/role/{roleName}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param roleName: 角色名称(Required) */
func (r *UpdateRoleRequest) SetRoleName(roleName string) {
    r.RoleName = roleName
}

/* param updateRoleInfo: 角色信息(Required) */
func (r *UpdateRoleRequest) SetUpdateRoleInfo(updateRoleInfo *iam.UpdateRoleInfo) {
    r.UpdateRoleInfo = updateRoleInfo
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateRoleRequest) GetRegionId() string {
    return ""
}

type UpdateRoleResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateRoleResult `json:"result"`
}

type UpdateRoleResult struct {
}