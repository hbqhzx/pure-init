// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    sts "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/sts/models"
)

type AssumeServiceRoleRequest struct {

    core.JDCloudRequest

    /* service role name  */
    AssumedServiceRoleName string `json:"assumedServiceRoleName"`

    /* 角色代入参数  */
    AssumeServiceRoleInfo *sts.AssumeServiceRoleInfo `json:"assumeServiceRoleInfo"`
}

/*
 * param assumedServiceRoleName: service role name (Required)
 * param assumeServiceRoleInfo: 角色代入参数 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewAssumeServiceRoleRequest(
    assumedServiceRoleName string,
    assumeServiceRoleInfo *sts.AssumeServiceRoleInfo,
) *AssumeServiceRoleRequest {

	return &AssumeServiceRoleRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/assumedServiceRole/{assumedServiceRoleName}/credentials",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        AssumedServiceRoleName: assumedServiceRoleName,
        AssumeServiceRoleInfo: assumeServiceRoleInfo,
	}
}

/*
 * param assumedServiceRoleName: service role name (Required)
 * param assumeServiceRoleInfo: 角色代入参数 (Required)
 */
func NewAssumeServiceRoleRequestWithAllParams(
    assumedServiceRoleName string,
    assumeServiceRoleInfo *sts.AssumeServiceRoleInfo,
) *AssumeServiceRoleRequest {

    return &AssumeServiceRoleRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/assumedServiceRole/{assumedServiceRoleName}/credentials",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        AssumedServiceRoleName: assumedServiceRoleName,
        AssumeServiceRoleInfo: assumeServiceRoleInfo,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewAssumeServiceRoleRequestWithoutParam() *AssumeServiceRoleRequest {

    return &AssumeServiceRoleRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/assumedServiceRole/{assumedServiceRoleName}/credentials",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param assumedServiceRoleName: service role name(Required) */
func (r *AssumeServiceRoleRequest) SetAssumedServiceRoleName(assumedServiceRoleName string) {
    r.AssumedServiceRoleName = assumedServiceRoleName
}

/* param assumeServiceRoleInfo: 角色代入参数(Required) */
func (r *AssumeServiceRoleRequest) SetAssumeServiceRoleInfo(assumeServiceRoleInfo *sts.AssumeServiceRoleInfo) {
    r.AssumeServiceRoleInfo = assumeServiceRoleInfo
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r AssumeServiceRoleRequest) GetRegionId() string {
    return ""
}

type AssumeServiceRoleResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result AssumeServiceRoleResult `json:"result"`
}

type AssumeServiceRoleResult struct {
    Credentials sts.Credentials `json:"credentials"`
    AssumedRoleUser sts.AssumedRoleService `json:"assumedRoleUser"`
}