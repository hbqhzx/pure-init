// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    ipanti "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/ipanti/models"
)

type ModifySSLCertificateRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* 证书 ID  */
    CertId int `json:"certId"`

    /* 更新 SSL 证书请求参数  */
    CertificateSpec *ipanti.CertificateSpec `json:"certificateSpec"`
}

/*
 * param regionId: Region ID (Required)
 * param certId: 证书 ID (Required)
 * param certificateSpec: 更新 SSL 证书请求参数 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewModifySSLCertificateRequest(
    regionId string,
    certId int,
    certificateSpec *ipanti.CertificateSpec,
) *ModifySSLCertificateRequest {

	return &ModifySSLCertificateRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/certificate/{certId}",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        CertId: certId,
        CertificateSpec: certificateSpec,
	}
}

/*
 * param regionId: Region ID (Required)
 * param certId: 证书 ID (Required)
 * param certificateSpec: 更新 SSL 证书请求参数 (Required)
 */
func NewModifySSLCertificateRequestWithAllParams(
    regionId string,
    certId int,
    certificateSpec *ipanti.CertificateSpec,
) *ModifySSLCertificateRequest {

    return &ModifySSLCertificateRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/certificate/{certId}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        CertId: certId,
        CertificateSpec: certificateSpec,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewModifySSLCertificateRequestWithoutParam() *ModifySSLCertificateRequest {

    return &ModifySSLCertificateRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/certificate/{certId}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *ModifySSLCertificateRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param certId: 证书 ID(Required) */
func (r *ModifySSLCertificateRequest) SetCertId(certId int) {
    r.CertId = certId
}

/* param certificateSpec: 更新 SSL 证书请求参数(Required) */
func (r *ModifySSLCertificateRequest) SetCertificateSpec(certificateSpec *ipanti.CertificateSpec) {
    r.CertificateSpec = certificateSpec
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ModifySSLCertificateRequest) GetRegionId() string {
    return r.RegionId
}

type ModifySSLCertificateResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ModifySSLCertificateResult `json:"result"`
}

type ModifySSLCertificateResult struct {
    FailedDomains []string `json:"failedDomains"`
    SucceedDomains []string `json:"succeedDomains"`
}