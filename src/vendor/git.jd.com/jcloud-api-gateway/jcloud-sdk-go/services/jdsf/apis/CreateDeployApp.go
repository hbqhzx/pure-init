// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type CreateDeployAppRequest struct {

    core.JDCloudRequest

    /* 可用区id  */
    RegionId string `json:"regionId"`

    /* 云部署应用名称  */
    AppName string `json:"appName"`

    /* 数据同步使用字段，初次创建不传 (Optional) */
    AppId *string `json:"appId"`

    /* 部署平台：1云主机，2原生容器  */
    Platform int `json:"platform"`

    /* 使用分布式服务框架：0不使用，1使用 此接口支持此传1  */
    JdsfEnabled int `json:"jdsfEnabled"`

    /* 备注信息 (Optional) */
    Desc *string `json:"desc"`
}

/*
 * param regionId: 可用区id (Required)
 * param appName: 云部署应用名称 (Required)
 * param platform: 部署平台：1云主机，2原生容器 (Required)
 * param jdsfEnabled: 使用分布式服务框架：0不使用，1使用 此接口支持此传1 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateDeployAppRequest(
    regionId string,
    appName string,
    platform int,
    jdsfEnabled int,
) *CreateDeployAppRequest {

	return &CreateDeployAppRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/deployapps",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        AppName: appName,
        Platform: platform,
        JdsfEnabled: jdsfEnabled,
	}
}

/*
 * param regionId: 可用区id (Required)
 * param appName: 云部署应用名称 (Required)
 * param appId: 数据同步使用字段，初次创建不传 (Optional)
 * param platform: 部署平台：1云主机，2原生容器 (Required)
 * param jdsfEnabled: 使用分布式服务框架：0不使用，1使用 此接口支持此传1 (Required)
 * param desc: 备注信息 (Optional)
 */
func NewCreateDeployAppRequestWithAllParams(
    regionId string,
    appName string,
    appId *string,
    platform int,
    jdsfEnabled int,
    desc *string,
) *CreateDeployAppRequest {

    return &CreateDeployAppRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/deployapps",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        AppName: appName,
        AppId: appId,
        Platform: platform,
        JdsfEnabled: jdsfEnabled,
        Desc: desc,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateDeployAppRequestWithoutParam() *CreateDeployAppRequest {

    return &CreateDeployAppRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/deployapps",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 可用区id(Required) */
func (r *CreateDeployAppRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param appName: 云部署应用名称(Required) */
func (r *CreateDeployAppRequest) SetAppName(appName string) {
    r.AppName = appName
}

/* param appId: 数据同步使用字段，初次创建不传(Optional) */
func (r *CreateDeployAppRequest) SetAppId(appId string) {
    r.AppId = &appId
}

/* param platform: 部署平台：1云主机，2原生容器(Required) */
func (r *CreateDeployAppRequest) SetPlatform(platform int) {
    r.Platform = platform
}

/* param jdsfEnabled: 使用分布式服务框架：0不使用，1使用 此接口支持此传1(Required) */
func (r *CreateDeployAppRequest) SetJdsfEnabled(jdsfEnabled int) {
    r.JdsfEnabled = jdsfEnabled
}

/* param desc: 备注信息(Optional) */
func (r *CreateDeployAppRequest) SetDesc(desc string) {
    r.Desc = &desc
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateDeployAppRequest) GetRegionId() string {
    return r.RegionId
}

type CreateDeployAppResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateDeployAppResult `json:"result"`
}

type CreateDeployAppResult struct {
    CreateResult string `json:"createResult"`
    AppId string `json:"appId"`
}