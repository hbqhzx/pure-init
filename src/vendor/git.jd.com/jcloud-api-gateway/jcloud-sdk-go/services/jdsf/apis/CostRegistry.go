// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    jdsf "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/jdsf/models"
)

type CostRegistryRequest struct {

    core.JDCloudRequest

    /* 可用区id  */
    RegionId string `json:"regionId"`

    /* 服务实例数量  */
    RegistrySpec string `json:"registrySpec"`
}

/*
 * param regionId: 可用区id (Required)
 * param registrySpec: 服务实例数量 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCostRegistryRequest(
    regionId string,
    registrySpec string,
) *CostRegistryRequest {

	return &CostRegistryRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/registries:getRegistryCost",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        RegistrySpec: registrySpec,
	}
}

/*
 * param regionId: 可用区id (Required)
 * param registrySpec: 服务实例数量 (Required)
 */
func NewCostRegistryRequestWithAllParams(
    regionId string,
    registrySpec string,
) *CostRegistryRequest {

    return &CostRegistryRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/registries:getRegistryCost",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        RegistrySpec: registrySpec,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCostRegistryRequestWithoutParam() *CostRegistryRequest {

    return &CostRegistryRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/registries:getRegistryCost",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 可用区id(Required) */
func (r *CostRegistryRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param registrySpec: 服务实例数量(Required) */
func (r *CostRegistryRequest) SetRegistrySpec(registrySpec string) {
    r.RegistrySpec = registrySpec
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CostRegistryRequest) GetRegionId() string {
    return r.RegionId
}

type CostRegistryResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CostRegistryResult `json:"result"`
}

type CostRegistryResult struct {
    RegistryCost jdsf.RegistryCost `json:"registryCost"`
}