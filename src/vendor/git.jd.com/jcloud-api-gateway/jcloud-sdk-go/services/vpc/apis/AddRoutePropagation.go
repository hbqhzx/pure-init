// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    vpc "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/vpc/models"
)

type AddRoutePropagationRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* RouteTable ID  */
    RouteTableId string `json:"routeTableId"`

    /* 允许路由表学习的网段范围，多个网段通过","分隔  */
    PropagationCidrs string `json:"propagationCidrs"`

    /* 传播的bgw ID  */
    BgwId string `json:"bgwId"`
}

/*
 * param regionId: Region ID (Required)
 * param routeTableId: RouteTable ID (Required)
 * param propagationCidrs: 允许路由表学习的网段范围，多个网段通过","分隔 (Required)
 * param bgwId: 传播的bgw ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewAddRoutePropagationRequest(
    regionId string,
    routeTableId string,
    propagationCidrs string,
    bgwId string,
) *AddRoutePropagationRequest {

	return &AddRoutePropagationRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/routeTables/{routeTableId}:addRoutePropagation",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        RouteTableId: routeTableId,
        PropagationCidrs: propagationCidrs,
        BgwId: bgwId,
	}
}

/*
 * param regionId: Region ID (Required)
 * param routeTableId: RouteTable ID (Required)
 * param propagationCidrs: 允许路由表学习的网段范围，多个网段通过","分隔 (Required)
 * param bgwId: 传播的bgw ID (Required)
 */
func NewAddRoutePropagationRequestWithAllParams(
    regionId string,
    routeTableId string,
    propagationCidrs string,
    bgwId string,
) *AddRoutePropagationRequest {

    return &AddRoutePropagationRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/routeTables/{routeTableId}:addRoutePropagation",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        RouteTableId: routeTableId,
        PropagationCidrs: propagationCidrs,
        BgwId: bgwId,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewAddRoutePropagationRequestWithoutParam() *AddRoutePropagationRequest {

    return &AddRoutePropagationRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/routeTables/{routeTableId}:addRoutePropagation",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *AddRoutePropagationRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param routeTableId: RouteTable ID(Required) */
func (r *AddRoutePropagationRequest) SetRouteTableId(routeTableId string) {
    r.RouteTableId = routeTableId
}

/* param propagationCidrs: 允许路由表学习的网段范围，多个网段通过","分隔(Required) */
func (r *AddRoutePropagationRequest) SetPropagationCidrs(propagationCidrs string) {
    r.PropagationCidrs = propagationCidrs
}

/* param bgwId: 传播的bgw ID(Required) */
func (r *AddRoutePropagationRequest) SetBgwId(bgwId string) {
    r.BgwId = bgwId
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r AddRoutePropagationRequest) GetRegionId() string {
    return r.RegionId
}

type AddRoutePropagationResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result AddRoutePropagationResult `json:"result"`
}

type AddRoutePropagationResult struct {
    RouteTables []vpc.RouteTable `json:"routeTables"`
    TotalCount int `json:"totalCount"`
}