// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    order "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/order/models"
)

type QueryErrorCodeListRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* 错误码英文名称 (Optional) */
    Name *string `json:"name"`

    /* 错误信息 (Optional) */
    Msg *string `json:"msg"`

    /* 类别名称 (Optional) */
    TypeName *string `json:"typeName"`

    /* 错误码 (Optional) */
    Code *int `json:"code"`

    /* 类别(1, 业务限制),(2, 系统异常),(3, 异常请求),(4, 其他) (Optional) */
    TypeCode *int `json:"typeCode"`
}

/*
 * param regionId: Region ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewQueryErrorCodeListRequest(
    regionId string,
) *QueryErrorCodeListRequest {

	return &QueryErrorCodeListRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/order:errorCodeList",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: Region ID (Required)
 * param name: 错误码英文名称 (Optional)
 * param msg: 错误信息 (Optional)
 * param typeName: 类别名称 (Optional)
 * param code: 错误码 (Optional)
 * param typeCode: 类别(1, 业务限制),(2, 系统异常),(3, 异常请求),(4, 其他) (Optional)
 */
func NewQueryErrorCodeListRequestWithAllParams(
    regionId string,
    name *string,
    msg *string,
    typeName *string,
    code *int,
    typeCode *int,
) *QueryErrorCodeListRequest {

    return &QueryErrorCodeListRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/order:errorCodeList",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Name: name,
        Msg: msg,
        TypeName: typeName,
        Code: code,
        TypeCode: typeCode,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewQueryErrorCodeListRequestWithoutParam() *QueryErrorCodeListRequest {

    return &QueryErrorCodeListRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/order:errorCodeList",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *QueryErrorCodeListRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param name: 错误码英文名称(Optional) */
func (r *QueryErrorCodeListRequest) SetName(name string) {
    r.Name = &name
}

/* param msg: 错误信息(Optional) */
func (r *QueryErrorCodeListRequest) SetMsg(msg string) {
    r.Msg = &msg
}

/* param typeName: 类别名称(Optional) */
func (r *QueryErrorCodeListRequest) SetTypeName(typeName string) {
    r.TypeName = &typeName
}

/* param code: 错误码(Optional) */
func (r *QueryErrorCodeListRequest) SetCode(code int) {
    r.Code = &code
}

/* param typeCode: 类别(1, 业务限制),(2, 系统异常),(3, 异常请求),(4, 其他)(Optional) */
func (r *QueryErrorCodeListRequest) SetTypeCode(typeCode int) {
    r.TypeCode = &typeCode
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r QueryErrorCodeListRequest) GetRegionId() string {
    return r.RegionId
}

type QueryErrorCodeListResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result QueryErrorCodeListResult `json:"result"`
}

type QueryErrorCodeListResult struct {
    Data []order.ErrorVo `json:"data"`
}