// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type UpdateTemplateRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* 模板id  */
    TemplateId string `json:"templateId"`

    /* 模板描述 (Optional) */
    Describe *string `json:"describe"`

    /* 模板名称 (Optional) */
    Name *string `json:"name"`

    /* 模板内容 (Optional) */
    Template *interface{} `json:"template"`
}

/*
 * param regionId: 地域 Id (Required)
 * param templateId: 模板id (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateTemplateRequest(
    regionId string,
    templateId string,
) *UpdateTemplateRequest {

	return &UpdateTemplateRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/templates/{templateId}",
			Method:  "PATCH",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        TemplateId: templateId,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param templateId: 模板id (Required)
 * param describe: 模板描述 (Optional)
 * param name: 模板名称 (Optional)
 * param template: 模板内容 (Optional)
 */
func NewUpdateTemplateRequestWithAllParams(
    regionId string,
    templateId string,
    describe *string,
    name *string,
    template *interface{},
) *UpdateTemplateRequest {

    return &UpdateTemplateRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/templates/{templateId}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        TemplateId: templateId,
        Describe: describe,
        Name: name,
        Template: template,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateTemplateRequestWithoutParam() *UpdateTemplateRequest {

    return &UpdateTemplateRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/templates/{templateId}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *UpdateTemplateRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param templateId: 模板id(Required) */
func (r *UpdateTemplateRequest) SetTemplateId(templateId string) {
    r.TemplateId = templateId
}

/* param describe: 模板描述(Optional) */
func (r *UpdateTemplateRequest) SetDescribe(describe string) {
    r.Describe = &describe
}

/* param name: 模板名称(Optional) */
func (r *UpdateTemplateRequest) SetName(name string) {
    r.Name = &name
}

/* param template: 模板内容(Optional) */
func (r *UpdateTemplateRequest) SetTemplate(template interface{}) {
    r.Template = &template
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateTemplateRequest) GetRegionId() string {
    return r.RegionId
}

type UpdateTemplateResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateTemplateResult `json:"result"`
}

type UpdateTemplateResult struct {
}