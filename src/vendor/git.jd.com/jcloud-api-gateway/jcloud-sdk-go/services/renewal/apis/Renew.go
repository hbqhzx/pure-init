// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    renewal "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/renewal/models"
)

type RenewRequest struct {

    core.JDCloudRequest

    /*   */
    RegionId string `json:"regionId"`

    /*  (Optional) */
    ReturnURL *string `json:"returnURL"`

    /*  (Optional) */
    AppCode *string `json:"appCode"`

    /*  (Optional) */
    ServiceCode *string `json:"serviceCode"`

    /*  (Optional) */
    DataCenter *string `json:"dataCenter"`

    /*  (Optional) */
    OperatorType *string `json:"operatorType"`

    /*  (Optional) */
    OperatorName *string `json:"operatorName"`

    /*  (Optional) */
    ProcessType *int `json:"processType"`

    /*  (Optional) */
    TimeUnit *int `json:"timeUnit"`

    /*  (Optional) */
    TimeSpan *int `json:"timeSpan"`

    /*  (Optional) */
    Sign *string `json:"sign"`

    /*  (Optional) */
    ResourceList []renewal.OrderItemVo `json:"resourceList"`

    /*  (Optional) */
    Ip *string `json:"ip"`

    /*  (Optional) */
    BrowserVersion *string `json:"browserVersion"`

    /*  (Optional) */
    ClientToken *string `json:"clientToken"`

    /*  (Optional) */
    ExpireDate *string `json:"expireDate"`

    /*  (Optional) */
    IsUnifyDate *int `json:"isUnifyDate"`
}

/*
 * param regionId:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewRenewRequest(
    regionId string,
) *RenewRequest {

	return &RenewRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/renew",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId:  (Required)
 * param returnURL:  (Optional)
 * param appCode:  (Optional)
 * param serviceCode:  (Optional)
 * param dataCenter:  (Optional)
 * param operatorType:  (Optional)
 * param operatorName:  (Optional)
 * param processType:  (Optional)
 * param timeUnit:  (Optional)
 * param timeSpan:  (Optional)
 * param sign:  (Optional)
 * param resourceList:  (Optional)
 * param ip:  (Optional)
 * param browserVersion:  (Optional)
 * param clientToken:  (Optional)
 * param expireDate:  (Optional)
 * param isUnifyDate:  (Optional)
 */
func NewRenewRequestWithAllParams(
    regionId string,
    returnURL *string,
    appCode *string,
    serviceCode *string,
    dataCenter *string,
    operatorType *string,
    operatorName *string,
    processType *int,
    timeUnit *int,
    timeSpan *int,
    sign *string,
    resourceList []renewal.OrderItemVo,
    ip *string,
    browserVersion *string,
    clientToken *string,
    expireDate *string,
    isUnifyDate *int,
) *RenewRequest {

    return &RenewRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/renew",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        ReturnURL: returnURL,
        AppCode: appCode,
        ServiceCode: serviceCode,
        DataCenter: dataCenter,
        OperatorType: operatorType,
        OperatorName: operatorName,
        ProcessType: processType,
        TimeUnit: timeUnit,
        TimeSpan: timeSpan,
        Sign: sign,
        ResourceList: resourceList,
        Ip: ip,
        BrowserVersion: browserVersion,
        ClientToken: clientToken,
        ExpireDate: expireDate,
        IsUnifyDate: isUnifyDate,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewRenewRequestWithoutParam() *RenewRequest {

    return &RenewRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/renew",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: (Required) */
func (r *RenewRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param returnURL: (Optional) */
func (r *RenewRequest) SetReturnURL(returnURL string) {
    r.ReturnURL = &returnURL
}

/* param appCode: (Optional) */
func (r *RenewRequest) SetAppCode(appCode string) {
    r.AppCode = &appCode
}

/* param serviceCode: (Optional) */
func (r *RenewRequest) SetServiceCode(serviceCode string) {
    r.ServiceCode = &serviceCode
}

/* param dataCenter: (Optional) */
func (r *RenewRequest) SetDataCenter(dataCenter string) {
    r.DataCenter = &dataCenter
}

/* param operatorType: (Optional) */
func (r *RenewRequest) SetOperatorType(operatorType string) {
    r.OperatorType = &operatorType
}

/* param operatorName: (Optional) */
func (r *RenewRequest) SetOperatorName(operatorName string) {
    r.OperatorName = &operatorName
}

/* param processType: (Optional) */
func (r *RenewRequest) SetProcessType(processType int) {
    r.ProcessType = &processType
}

/* param timeUnit: (Optional) */
func (r *RenewRequest) SetTimeUnit(timeUnit int) {
    r.TimeUnit = &timeUnit
}

/* param timeSpan: (Optional) */
func (r *RenewRequest) SetTimeSpan(timeSpan int) {
    r.TimeSpan = &timeSpan
}

/* param sign: (Optional) */
func (r *RenewRequest) SetSign(sign string) {
    r.Sign = &sign
}

/* param resourceList: (Optional) */
func (r *RenewRequest) SetResourceList(resourceList []renewal.OrderItemVo) {
    r.ResourceList = resourceList
}

/* param ip: (Optional) */
func (r *RenewRequest) SetIp(ip string) {
    r.Ip = &ip
}

/* param browserVersion: (Optional) */
func (r *RenewRequest) SetBrowserVersion(browserVersion string) {
    r.BrowserVersion = &browserVersion
}

/* param clientToken: (Optional) */
func (r *RenewRequest) SetClientToken(clientToken string) {
    r.ClientToken = &clientToken
}

/* param expireDate: (Optional) */
func (r *RenewRequest) SetExpireDate(expireDate string) {
    r.ExpireDate = &expireDate
}

/* param isUnifyDate: (Optional) */
func (r *RenewRequest) SetIsUnifyDate(isUnifyDate int) {
    r.IsUnifyDate = &isUnifyDate
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r RenewRequest) GetRegionId() string {
    return r.RegionId
}

type RenewResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result RenewResult `json:"result"`
}

type RenewResult struct {
    OrderNumber string `json:"orderNumber"`
    ReturnURL string `json:"returnURL"`
}