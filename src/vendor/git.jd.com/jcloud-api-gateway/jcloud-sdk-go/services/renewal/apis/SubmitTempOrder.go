// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type SubmitTempOrderRequest struct {

    core.JDCloudRequest

    /*   */
    RegionId string `json:"regionId"`

    /*   */
    ResourceIdList []string `json:"resourceIdList"`

    /*   */
    DataCenter string `json:"dataCenter"`

    /*   */
    AppCode string `json:"appCode"`

    /*   */
    ServiceCode string `json:"serviceCode"`
}

/*
 * param regionId:  (Required)
 * param resourceIdList:  (Required)
 * param dataCenter:  (Required)
 * param appCode:  (Required)
 * param serviceCode:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewSubmitTempOrderRequest(
    regionId string,
    resourceIdList []string,
    dataCenter string,
    appCode string,
    serviceCode string,
) *SubmitTempOrderRequest {

	return &SubmitTempOrderRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/tempOrder",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        ResourceIdList: resourceIdList,
        DataCenter: dataCenter,
        AppCode: appCode,
        ServiceCode: serviceCode,
	}
}

/*
 * param regionId:  (Required)
 * param resourceIdList:  (Required)
 * param dataCenter:  (Required)
 * param appCode:  (Required)
 * param serviceCode:  (Required)
 */
func NewSubmitTempOrderRequestWithAllParams(
    regionId string,
    resourceIdList []string,
    dataCenter string,
    appCode string,
    serviceCode string,
) *SubmitTempOrderRequest {

    return &SubmitTempOrderRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/tempOrder",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        ResourceIdList: resourceIdList,
        DataCenter: dataCenter,
        AppCode: appCode,
        ServiceCode: serviceCode,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewSubmitTempOrderRequestWithoutParam() *SubmitTempOrderRequest {

    return &SubmitTempOrderRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/tempOrder",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: (Required) */
func (r *SubmitTempOrderRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param resourceIdList: (Required) */
func (r *SubmitTempOrderRequest) SetResourceIdList(resourceIdList []string) {
    r.ResourceIdList = resourceIdList
}

/* param dataCenter: (Required) */
func (r *SubmitTempOrderRequest) SetDataCenter(dataCenter string) {
    r.DataCenter = dataCenter
}

/* param appCode: (Required) */
func (r *SubmitTempOrderRequest) SetAppCode(appCode string) {
    r.AppCode = appCode
}

/* param serviceCode: (Required) */
func (r *SubmitTempOrderRequest) SetServiceCode(serviceCode string) {
    r.ServiceCode = serviceCode
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r SubmitTempOrderRequest) GetRegionId() string {
    return r.RegionId
}

type SubmitTempOrderResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result SubmitTempOrderResult `json:"result"`
}

type SubmitTempOrderResult struct {
    StringResult string `json:"stringResult"`
}