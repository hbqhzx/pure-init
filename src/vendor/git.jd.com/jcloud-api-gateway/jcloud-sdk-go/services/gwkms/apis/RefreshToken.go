// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type RefreshTokenRequest struct {

    core.JDCloudRequest

    /* 旧的token  */
    Token string `json:"token"`
}

/*
 * param token: 旧的token (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewRefreshTokenRequest(
    token string,
) *RefreshTokenRequest {

	return &RefreshTokenRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/tokens/{token}:refresh",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Token: token,
	}
}

/*
 * param token: 旧的token (Required)
 */
func NewRefreshTokenRequestWithAllParams(
    token string,
) *RefreshTokenRequest {

    return &RefreshTokenRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/tokens/{token}:refresh",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Token: token,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewRefreshTokenRequestWithoutParam() *RefreshTokenRequest {

    return &RefreshTokenRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/tokens/{token}:refresh",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param token: 旧的token(Required) */
func (r *RefreshTokenRequest) SetToken(token string) {
    r.Token = token
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r RefreshTokenRequest) GetRegionId() string {
    return ""
}

type RefreshTokenResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result RefreshTokenResult `json:"result"`
}

type RefreshTokenResult struct {
    Token string `json:"token"`
}