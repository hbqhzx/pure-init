// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type UpdateVideoRequest struct {

    core.JDCloudRequest

    /* 媒资ID  */
    Mid string `json:"mid"`

    /* 视频名称  */
    VideoName string `json:"videoName"`

    /* 分类ID (Optional) */
    CategoryId *int `json:"categoryId"`

    /* 视频标签 (Optional) */
    Tags *string `json:"tags"`

    /* 封面图ID (Optional) */
    ImgId *int `json:"imgId"`

    /* 封面图地址 (Optional) */
    ImgUrl *string `json:"imgUrl"`

    /* 视频介绍 (Optional) */
    Notes *string `json:"notes"`
}

/*
 * param mid: 媒资ID (Required)
 * param videoName: 视频名称 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateVideoRequest(
    mid string,
    videoName string,
) *UpdateVideoRequest {

	return &UpdateVideoRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/videos/{mid}",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        Mid: mid,
        VideoName: videoName,
	}
}

/*
 * param mid: 媒资ID (Required)
 * param videoName: 视频名称 (Required)
 * param categoryId: 分类ID (Optional)
 * param tags: 视频标签 (Optional)
 * param imgId: 封面图ID (Optional)
 * param imgUrl: 封面图地址 (Optional)
 * param notes: 视频介绍 (Optional)
 */
func NewUpdateVideoRequestWithAllParams(
    mid string,
    videoName string,
    categoryId *int,
    tags *string,
    imgId *int,
    imgUrl *string,
    notes *string,
) *UpdateVideoRequest {

    return &UpdateVideoRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/videos/{mid}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        Mid: mid,
        VideoName: videoName,
        CategoryId: categoryId,
        Tags: tags,
        ImgId: imgId,
        ImgUrl: imgUrl,
        Notes: notes,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateVideoRequestWithoutParam() *UpdateVideoRequest {

    return &UpdateVideoRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/videos/{mid}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param mid: 媒资ID(Required) */
func (r *UpdateVideoRequest) SetMid(mid string) {
    r.Mid = mid
}

/* param videoName: 视频名称(Required) */
func (r *UpdateVideoRequest) SetVideoName(videoName string) {
    r.VideoName = videoName
}

/* param categoryId: 分类ID(Optional) */
func (r *UpdateVideoRequest) SetCategoryId(categoryId int) {
    r.CategoryId = &categoryId
}

/* param tags: 视频标签(Optional) */
func (r *UpdateVideoRequest) SetTags(tags string) {
    r.Tags = &tags
}

/* param imgId: 封面图ID(Optional) */
func (r *UpdateVideoRequest) SetImgId(imgId int) {
    r.ImgId = &imgId
}

/* param imgUrl: 封面图地址(Optional) */
func (r *UpdateVideoRequest) SetImgUrl(imgUrl string) {
    r.ImgUrl = &imgUrl
}

/* param notes: 视频介绍(Optional) */
func (r *UpdateVideoRequest) SetNotes(notes string) {
    r.Notes = &notes
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateVideoRequest) GetRegionId() string {
    return ""
}

type UpdateVideoResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateVideoResult `json:"result"`
}

type UpdateVideoResult struct {
    Mid string `json:"mid"`
    Name string `json:"name"`
}