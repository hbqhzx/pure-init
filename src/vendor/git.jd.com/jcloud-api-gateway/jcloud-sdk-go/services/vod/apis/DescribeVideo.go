// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    vod "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/vod/models"
)

type DescribeVideoRequest struct {

    core.JDCloudRequest

    /* 媒资ID  */
    Mid string `json:"mid"`
}

/*
 * param mid: 媒资ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeVideoRequest(
    mid string,
) *DescribeVideoRequest {

	return &DescribeVideoRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/videos/{mid}",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        Mid: mid,
	}
}

/*
 * param mid: 媒资ID (Required)
 */
func NewDescribeVideoRequestWithAllParams(
    mid string,
) *DescribeVideoRequest {

    return &DescribeVideoRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/videos/{mid}",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        Mid: mid,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeVideoRequestWithoutParam() *DescribeVideoRequest {

    return &DescribeVideoRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/videos/{mid}",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param mid: 媒资ID(Required) */
func (r *DescribeVideoRequest) SetMid(mid string) {
    r.Mid = mid
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeVideoRequest) GetRegionId() string {
    return ""
}

type DescribeVideoResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeVideoResult `json:"result"`
}

type DescribeVideoResult struct {
    Mid string `json:"mid"`
    VideoName string `json:"videoName"`
    Url string `json:"url"`
    ImgUrl string `json:"imgUrl"`
    CategoryId int64 `json:"categoryId"`
    Category string `json:"category"`
    Status int `json:"status"`
    Size int64 `json:"size"`
    Duration int64 `json:"duration"`
    Tags string `json:"tags"`
    Notes string `json:"notes"`
    CoderateId string `json:"coderateId"`
    LogoId string `json:"logoId"`
    Md5 string `json:"md5"`
    ClientIp string `json:"clientIp"`
    ClientId int `json:"clientId"`
    CreateTime string `json:"createTime"`
    UpdateTime string `json:"updateTime"`
    Snapshots []vod.Snapshot `json:"snapshots"`
}