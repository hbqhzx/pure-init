// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    jdmesh "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/jdmesh/apis"
    "encoding/json"
    "errors"
)

type JdmeshClient struct {
    core.JDCloudClient
}

func NewJdmeshClient(credential *core.Credential) *JdmeshClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("jdmesh.jdcloud-api.com")

    return &JdmeshClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "jdmesh",
            Revision:    "0.1.1",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *JdmeshClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *JdmeshClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 修改应用基本配置，是否开启网格白名单和被动健康检查及其参数。
 */
func (c *JdmeshClient) UpdateBasicConfig(request *jdmesh.UpdateBasicConfigRequest) (*jdmesh.UpdateBasicConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdmesh.UpdateBasicConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改应用逻辑子集配置
 */
func (c *JdmeshClient) UpdateDestinationRule(request *jdmesh.UpdateDestinationRuleRequest) (*jdmesh.UpdateDestinationRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdmesh.UpdateDestinationRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询某应用的逻辑子集配置
 */
func (c *JdmeshClient) DescribeDestinationRule(request *jdmesh.DescribeDestinationRuleRequest) (*jdmesh.DescribeDestinationRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdmesh.DescribeDestinationRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询某应用的路由规则配置
 */
func (c *JdmeshClient) DescribeRouteRule(request *jdmesh.DescribeRouteRuleRequest) (*jdmesh.DescribeRouteRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdmesh.DescribeRouteRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改应用路由规则配置
 */
func (c *JdmeshClient) UpdateRouteRule(request *jdmesh.UpdateRouteRuleRequest) (*jdmesh.UpdateRouteRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdmesh.UpdateRouteRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询某应用的基本配置，包含是否开启网格白名单，是否开启被动健康检查及其参数等。
 */
func (c *JdmeshClient) DescribeBasicConfig(request *jdmesh.DescribeBasicConfigRequest) (*jdmesh.DescribeBasicConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdmesh.DescribeBasicConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

