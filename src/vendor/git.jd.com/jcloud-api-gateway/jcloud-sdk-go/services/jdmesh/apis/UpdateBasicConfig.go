// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    jdmesh "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/jdmesh/models"
)

type UpdateBasicConfigRequest struct {

    core.JDCloudRequest

    /* 环境名，pre/product  */
    Env string `json:"env"`

    /* 应用ID  */
    AppId string `json:"appId"`

    /* 启用网格白名单检查  */
    EnableWhiteListCheck bool `json:"enableWhiteListCheck"`

    /* 启用被动健康检查  */
    EnableNegativeHealthCheck bool `json:"enableNegativeHealthCheck"`

    /* 被动健康检查参数 (Optional) */
    HealthCheckParameters *jdmesh.HealthCheckParameters `json:"healthCheckParameters"`

    /* 网格外部服务依赖项 (Optional) */
    ServiceEntries []jdmesh.ServiceEntry `json:"serviceEntries"`
}

/*
 * param env: 环境名，pre/product (Required)
 * param appId: 应用ID (Required)
 * param enableWhiteListCheck: 启用网格白名单检查 (Required)
 * param enableNegativeHealthCheck: 启用被动健康检查 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateBasicConfigRequest(
    env string,
    appId string,
    enableWhiteListCheck bool,
    enableNegativeHealthCheck bool,
) *UpdateBasicConfigRequest {

	return &UpdateBasicConfigRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/envs/{env}/apps/{appId}/basicconfig",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Env: env,
        AppId: appId,
        EnableWhiteListCheck: enableWhiteListCheck,
        EnableNegativeHealthCheck: enableNegativeHealthCheck,
	}
}

/*
 * param env: 环境名，pre/product (Required)
 * param appId: 应用ID (Required)
 * param enableWhiteListCheck: 启用网格白名单检查 (Required)
 * param enableNegativeHealthCheck: 启用被动健康检查 (Required)
 * param healthCheckParameters: 被动健康检查参数 (Optional)
 * param serviceEntries: 网格外部服务依赖项 (Optional)
 */
func NewUpdateBasicConfigRequestWithAllParams(
    env string,
    appId string,
    enableWhiteListCheck bool,
    enableNegativeHealthCheck bool,
    healthCheckParameters *jdmesh.HealthCheckParameters,
    serviceEntries []jdmesh.ServiceEntry,
) *UpdateBasicConfigRequest {

    return &UpdateBasicConfigRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/envs/{env}/apps/{appId}/basicconfig",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Env: env,
        AppId: appId,
        EnableWhiteListCheck: enableWhiteListCheck,
        EnableNegativeHealthCheck: enableNegativeHealthCheck,
        HealthCheckParameters: healthCheckParameters,
        ServiceEntries: serviceEntries,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateBasicConfigRequestWithoutParam() *UpdateBasicConfigRequest {

    return &UpdateBasicConfigRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/envs/{env}/apps/{appId}/basicconfig",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param env: 环境名，pre/product(Required) */
func (r *UpdateBasicConfigRequest) SetEnv(env string) {
    r.Env = env
}

/* param appId: 应用ID(Required) */
func (r *UpdateBasicConfigRequest) SetAppId(appId string) {
    r.AppId = appId
}

/* param enableWhiteListCheck: 启用网格白名单检查(Required) */
func (r *UpdateBasicConfigRequest) SetEnableWhiteListCheck(enableWhiteListCheck bool) {
    r.EnableWhiteListCheck = enableWhiteListCheck
}

/* param enableNegativeHealthCheck: 启用被动健康检查(Required) */
func (r *UpdateBasicConfigRequest) SetEnableNegativeHealthCheck(enableNegativeHealthCheck bool) {
    r.EnableNegativeHealthCheck = enableNegativeHealthCheck
}

/* param healthCheckParameters: 被动健康检查参数(Optional) */
func (r *UpdateBasicConfigRequest) SetHealthCheckParameters(healthCheckParameters *jdmesh.HealthCheckParameters) {
    r.HealthCheckParameters = healthCheckParameters
}

/* param serviceEntries: 网格外部服务依赖项(Optional) */
func (r *UpdateBasicConfigRequest) SetServiceEntries(serviceEntries []jdmesh.ServiceEntry) {
    r.ServiceEntries = serviceEntries
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateBasicConfigRequest) GetRegionId() string {
    return ""
}

type UpdateBasicConfigResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateBasicConfigResult `json:"result"`
}

type UpdateBasicConfigResult struct {
}