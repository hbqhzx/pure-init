// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type ModifyInstanceRequest struct {

    core.JDCloudRequest

    /* 区域ID  */
    RegionId string `json:"regionId"`

    /* 实例ID  */
    InstanceId string `json:"instanceId"`

    /* 实例名称，如果未修改可以不带这个参数 (Optional) */
    InstanceName *string `json:"instanceName"`

    /* 实例描述，如果未修改可以不带这个参数 (Optional) */
    InstanceDescription *string `json:"instanceDescription"`

    /* 认证方式（true：需要认证，false：免密），如果未修改可以不带这个参数 (Optional) */
    McAuth *bool `json:"mcAuth"`

    /* 密码，如果未修改可以不带这个参数，修改密码时必须携带mcAuth (Optional) */
    McPswd *string `json:"mcPswd"`
}

/*
 * param regionId: 区域ID (Required)
 * param instanceId: 实例ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewModifyInstanceRequest(
    regionId string,
    instanceId string,
) *ModifyInstanceRequest {

	return &ModifyInstanceRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/instances/{instanceId}",
			Method:  "PATCH",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        InstanceId: instanceId,
	}
}

/*
 * param regionId: 区域ID (Required)
 * param instanceId: 实例ID (Required)
 * param instanceName: 实例名称，如果未修改可以不带这个参数 (Optional)
 * param instanceDescription: 实例描述，如果未修改可以不带这个参数 (Optional)
 * param mcAuth: 认证方式（true：需要认证，false：免密），如果未修改可以不带这个参数 (Optional)
 * param mcPswd: 密码，如果未修改可以不带这个参数，修改密码时必须携带mcAuth (Optional)
 */
func NewModifyInstanceRequestWithAllParams(
    regionId string,
    instanceId string,
    instanceName *string,
    instanceDescription *string,
    mcAuth *bool,
    mcPswd *string,
) *ModifyInstanceRequest {

    return &ModifyInstanceRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        InstanceId: instanceId,
        InstanceName: instanceName,
        InstanceDescription: instanceDescription,
        McAuth: mcAuth,
        McPswd: mcPswd,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewModifyInstanceRequestWithoutParam() *ModifyInstanceRequest {

    return &ModifyInstanceRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 区域ID(Required) */
func (r *ModifyInstanceRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param instanceId: 实例ID(Required) */
func (r *ModifyInstanceRequest) SetInstanceId(instanceId string) {
    r.InstanceId = instanceId
}

/* param instanceName: 实例名称，如果未修改可以不带这个参数(Optional) */
func (r *ModifyInstanceRequest) SetInstanceName(instanceName string) {
    r.InstanceName = &instanceName
}

/* param instanceDescription: 实例描述，如果未修改可以不带这个参数(Optional) */
func (r *ModifyInstanceRequest) SetInstanceDescription(instanceDescription string) {
    r.InstanceDescription = &instanceDescription
}

/* param mcAuth: 认证方式（true：需要认证，false：免密），如果未修改可以不带这个参数(Optional) */
func (r *ModifyInstanceRequest) SetMcAuth(mcAuth bool) {
    r.McAuth = &mcAuth
}

/* param mcPswd: 密码，如果未修改可以不带这个参数，修改密码时必须携带mcAuth(Optional) */
func (r *ModifyInstanceRequest) SetMcPswd(mcPswd string) {
    r.McPswd = &mcPswd
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ModifyInstanceRequest) GetRegionId() string {
    return r.RegionId
}

type ModifyInstanceResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ModifyInstanceResult `json:"result"`
}

type ModifyInstanceResult struct {
}