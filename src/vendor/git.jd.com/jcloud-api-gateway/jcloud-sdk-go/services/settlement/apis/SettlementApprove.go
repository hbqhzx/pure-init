// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    settlement "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/settlement/models"
)

type SettlementApproveRequest struct {

    core.JDCloudRequest

    /*   */
    RegionId string `json:"regionId"`

    /* 结算单号列表  */
    SettlementApproveVoList []settlement.SettlementApproveVo `json:"settlementApproveVoList"`

    /* 操作类型：1-通过；2-驳回  */
    OperationType int `json:"operationType"`

    /* 驳回原因，驳回时必填 (Optional) */
    Reason *string `json:"reason"`
}

/*
 * param regionId:  (Required)
 * param settlementApproveVoList: 结算单号列表 (Required)
 * param operationType: 操作类型：1-通过；2-驳回 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewSettlementApproveRequest(
    regionId string,
    settlementApproveVoList []settlement.SettlementApproveVo,
    operationType int,
) *SettlementApproveRequest {

	return &SettlementApproveRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/settlement:approve",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        SettlementApproveVoList: settlementApproveVoList,
        OperationType: operationType,
	}
}

/*
 * param regionId:  (Required)
 * param settlementApproveVoList: 结算单号列表 (Required)
 * param operationType: 操作类型：1-通过；2-驳回 (Required)
 * param reason: 驳回原因，驳回时必填 (Optional)
 */
func NewSettlementApproveRequestWithAllParams(
    regionId string,
    settlementApproveVoList []settlement.SettlementApproveVo,
    operationType int,
    reason *string,
) *SettlementApproveRequest {

    return &SettlementApproveRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/settlement:approve",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        SettlementApproveVoList: settlementApproveVoList,
        OperationType: operationType,
        Reason: reason,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewSettlementApproveRequestWithoutParam() *SettlementApproveRequest {

    return &SettlementApproveRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/settlement:approve",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: (Required) */
func (r *SettlementApproveRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param settlementApproveVoList: 结算单号列表(Required) */
func (r *SettlementApproveRequest) SetSettlementApproveVoList(settlementApproveVoList []settlement.SettlementApproveVo) {
    r.SettlementApproveVoList = settlementApproveVoList
}

/* param operationType: 操作类型：1-通过；2-驳回(Required) */
func (r *SettlementApproveRequest) SetOperationType(operationType int) {
    r.OperationType = operationType
}

/* param reason: 驳回原因，驳回时必填(Optional) */
func (r *SettlementApproveRequest) SetReason(reason string) {
    r.Reason = &reason
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r SettlementApproveRequest) GetRegionId() string {
    return r.RegionId
}

type SettlementApproveResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result SettlementApproveResult `json:"result"`
}

type SettlementApproveResult struct {
    Result bool `json:"result"`
}