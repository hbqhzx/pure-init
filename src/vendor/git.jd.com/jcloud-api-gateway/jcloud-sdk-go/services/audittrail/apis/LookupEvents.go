// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    audittrail "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/audittrail/models"
)

type LookupEventsRequest struct {

    core.JDCloudRequest

    /*   */
    RegionId string `json:"regionId"`

    /* 开始时间 (Optional) */
    StartTime *int64 `json:"startTime"`

    /* 结束时间 (Optional) */
    EndTime *int64 `json:"endTime"`

    /* 类别 (Optional) */
    Classification *string `json:"classification"`

    /* 每页大小 (Optional) */
    PageSize *int `json:"pageSize"`

    /* 页码 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* lookupAttributes (Optional) */
    LookupAttributes *string `json:"lookupAttributes"`

    /* requestId (Optional) */
    RequestId *string `json:"requestId"`

    /* 主账号 (Optional) */
    Account *string `json:"account"`

    /* 子账号 (Optional) */
    SubAccount *string `json:"subAccount"`
}

/*
 * param regionId:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewLookupEventsRequest(
    regionId string,
) *LookupEventsRequest {

	return &LookupEventsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/events",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId:  (Required)
 * param startTime: 开始时间 (Optional)
 * param endTime: 结束时间 (Optional)
 * param classification: 类别 (Optional)
 * param pageSize: 每页大小 (Optional)
 * param pageNumber: 页码 (Optional)
 * param lookupAttributes: lookupAttributes (Optional)
 * param requestId: requestId (Optional)
 * param account: 主账号 (Optional)
 * param subAccount: 子账号 (Optional)
 */
func NewLookupEventsRequestWithAllParams(
    regionId string,
    startTime *int64,
    endTime *int64,
    classification *string,
    pageSize *int,
    pageNumber *int,
    lookupAttributes *string,
    requestId *string,
    account *string,
    subAccount *string,
) *LookupEventsRequest {

    return &LookupEventsRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/events",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        StartTime: startTime,
        EndTime: endTime,
        Classification: classification,
        PageSize: pageSize,
        PageNumber: pageNumber,
        LookupAttributes: lookupAttributes,
        RequestId: requestId,
        Account: account,
        SubAccount: subAccount,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewLookupEventsRequestWithoutParam() *LookupEventsRequest {

    return &LookupEventsRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/events",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: (Required) */
func (r *LookupEventsRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param startTime: 开始时间(Optional) */
func (r *LookupEventsRequest) SetStartTime(startTime int64) {
    r.StartTime = &startTime
}

/* param endTime: 结束时间(Optional) */
func (r *LookupEventsRequest) SetEndTime(endTime int64) {
    r.EndTime = &endTime
}

/* param classification: 类别(Optional) */
func (r *LookupEventsRequest) SetClassification(classification string) {
    r.Classification = &classification
}

/* param pageSize: 每页大小(Optional) */
func (r *LookupEventsRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

/* param pageNumber: 页码(Optional) */
func (r *LookupEventsRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}

/* param lookupAttributes: lookupAttributes(Optional) */
func (r *LookupEventsRequest) SetLookupAttributes(lookupAttributes string) {
    r.LookupAttributes = &lookupAttributes
}

/* param requestId: requestId(Optional) */
func (r *LookupEventsRequest) SetRequestId(requestId string) {
    r.RequestId = &requestId
}

/* param account: 主账号(Optional) */
func (r *LookupEventsRequest) SetAccount(account string) {
    r.Account = &account
}

/* param subAccount: 子账号(Optional) */
func (r *LookupEventsRequest) SetSubAccount(subAccount string) {
    r.SubAccount = &subAccount
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r LookupEventsRequest) GetRegionId() string {
    return r.RegionId
}

type LookupEventsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result LookupEventsResult `json:"result"`
}

type LookupEventsResult struct {
    PageSize int `json:"pageSize"`
    PageNumber int `json:"pageNumber"`
    TotalNumber int64 `json:"totalNumber"`
    Events []audittrail.EventItem `json:"events"`
}