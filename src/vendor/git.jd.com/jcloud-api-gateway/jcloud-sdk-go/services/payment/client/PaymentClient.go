// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    payment "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/payment/apis"
    "encoding/json"
    "errors"
)

type PaymentClient struct {
    core.JDCloudClient
}

func NewPaymentClient(credential *core.Credential) *PaymentClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("payment.jdcloud-api.com")

    return &PaymentClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "payment",
            Revision:    "0.0.1",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *PaymentClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *PaymentClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 线下汇款,生成汇款识别码和支付流水 */
func (c *PaymentClient) GenerateIdentifyCode(request *payment.GenerateIdentifyCodeRequest) (*payment.GenerateIdentifyCodeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &payment.GenerateIdentifyCodeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 线下汇款-查询汇款认领记录 */
func (c *PaymentClient) GetRemmitlist(request *payment.GetRemmitlistRequest) (*payment.GetRemmitlistResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &payment.GetRemmitlistResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 线下汇款-收款认领列表 */
func (c *PaymentClient) GetRemmitClaimlist(request *payment.GetRemmitClaimlistRequest) (*payment.GetRemmitClaimlistResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &payment.GetRemmitClaimlistResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 京东支付 */
func (c *PaymentClient) ApiToPay(request *payment.ApiToPayRequest) (*payment.ApiToPayResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &payment.ApiToPayResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 线下汇款-根据Id,pin查询汇款认领记录 */
func (c *PaymentClient) GetRemmitClaimById(request *payment.GetRemmitClaimByIdRequest) (*payment.GetRemmitClaimByIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &payment.GetRemmitClaimByIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 线下汇款查询接口 */
func (c *PaymentClient) FindPaymentOrder(request *payment.FindPaymentOrderRequest) (*payment.FindPaymentOrderResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &payment.FindPaymentOrderResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 微信支付确定页 */
func (c *PaymentClient) OrderByWeiXinPayConfirm(request *payment.OrderByWeiXinPayConfirmRequest) (*payment.OrderByWeiXinPayConfirmResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &payment.OrderByWeiXinPayConfirmResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询微信交易状态 */
func (c *PaymentClient) CheckResult(request *payment.CheckResultRequest) (*payment.CheckResultResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &payment.CheckResultResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 线下汇款-添加汇款认领单 */
func (c *PaymentClient) AddRemmitClaim(request *payment.AddRemmitClaimRequest) (*payment.AddRemmitClaimResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &payment.AddRemmitClaimResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 线下汇款-收款账户 */
func (c *PaymentClient) QueryRemittanceAccounts(request *payment.QueryRemittanceAccountsRequest) (*payment.QueryRemittanceAccountsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &payment.QueryRemittanceAccountsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 回调成功 */
func (c *PaymentClient) PaySuccess(request *payment.PaySuccessRequest) (*payment.PaySuccessResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &payment.PaySuccessResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 准备调用网银在线 */
func (c *PaymentClient) ApiToBank(request *payment.ApiToBankRequest) (*payment.ApiToBankResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &payment.ApiToBankResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

