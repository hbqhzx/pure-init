// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    lb "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/lb/models"
)

type UpdateBackendRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* Backend Id  */
    BackendId string `json:"backendId"`

    /* 后端服务名字,只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符 (Optional) */
    BackendName *string `json:"backendName"`

    /* 健康检查信息 (Optional) */
    HealthCheckSpec *lb.HealthCheckSpec `json:"healthCheckSpec"`

    /* 调度算法, 取值范围为[IpHash、RoundRobin、LeastConn]（取值范围的含义分别为：源Ip hash，加权轮询和加权最小连接） (Optional) */
    Algorithm *string `json:"algorithm"`

    /* 服务器组的Id列表，目前只支持一个，且与agIds不能同时存在 (Optional) */
    TargetGroupIds []string `json:"targetGroupIds"`

    /* 可用性组Id列表，目前只支持一个，且与targetGroupIds不能同时存在 (Optional) */
    AgIds []string `json:"agIds"`

    /* 【alb Tcp协议】获取真实ip, 取值为False(不获取)或者True(获取,支持Proxy Protocol v1版本)，默认为False (Optional) */
    ProxyProtocol *bool `json:"proxyProtocol"`

    /* 【nlb】是否启用Proxy ProtocolV2协议, 取值为false或者true, 默认为false (Optional) */
    ProxyProtocolV2 *bool `json:"proxyProtocolV2"`

    /* 描述,允许输入UTF-8编码下的全部字符，不超过256字符 (Optional) */
    Description *string `json:"description"`

    /* 后端服务的后端保持, 取值为false(不开启)或者true(开启)，默认为false【alb Http协议，RoundRobin算法】支持基于cookie的会话保持【nlb】支持基于报文源目的IP的会话保持 (Optional) */
    SessionStickiness *bool `json:"sessionStickiness"`

    /* 【nlb】会话保持超时时间，sessionStickiness开启时生效, 取值范围[1-3600] (Optional) */
    SessionStickyTimeout *int `json:"sessionStickyTimeout"`

    /* 【nlb】移除target前，连接的最大保持时间，默认300s，取值范围[0-3600] (Optional) */
    ConnectionDrainingSeconds *int `json:"connectionDrainingSeconds"`

    /* 【alb Http协议】cookie的过期时间,sessionStickiness开启时生效，取值范围为[0-86400], 0表示cookie与浏览器同生命周期 (Optional) */
    HttpCookieExpireSeconds *int `json:"httpCookieExpireSeconds"`

    /* 【alb Http协议】获取负载均衡的协议, 取值为False(不获取)或True(获取) (Optional) */
    HttpForwardedProtocol *bool `json:"httpForwardedProtocol"`

    /* 【alb Http协议】获取负载均衡的端口, 取值为False(不获取)或True(获取) (Optional) */
    HttpForwardedPort *bool `json:"httpForwardedPort"`

    /* 【alb Http协议】获取负载均衡的host信息, 取值为False(不获取)或True(获取) (Optional) */
    HttpForwardedHost *bool `json:"httpForwardedHost"`

    /* 【alb Http协议】获取负载均衡的vip, 取值为False(不获取)或True(获取) (Optional) */
    HttpForwardedVip *bool `json:"httpForwardedVip"`

    /* 关闭健康检查，取值为false(不关闭)或true(关闭) (Optional) */
    CloseHealthCheck *bool `json:"closeHealthCheck"`
}

/*
 * param regionId: Region ID (Required)
 * param backendId: Backend Id (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateBackendRequest(
    regionId string,
    backendId string,
) *UpdateBackendRequest {

	return &UpdateBackendRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/backends/{backendId}",
			Method:  "PATCH",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        BackendId: backendId,
	}
}

/*
 * param regionId: Region ID (Required)
 * param backendId: Backend Id (Required)
 * param backendName: 后端服务名字,只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符 (Optional)
 * param healthCheckSpec: 健康检查信息 (Optional)
 * param algorithm: 调度算法, 取值范围为[IpHash、RoundRobin、LeastConn]（取值范围的含义分别为：源Ip hash，加权轮询和加权最小连接） (Optional)
 * param targetGroupIds: 服务器组的Id列表，目前只支持一个，且与agIds不能同时存在 (Optional)
 * param agIds: 可用性组Id列表，目前只支持一个，且与targetGroupIds不能同时存在 (Optional)
 * param proxyProtocol: 【alb Tcp协议】获取真实ip, 取值为False(不获取)或者True(获取,支持Proxy Protocol v1版本)，默认为False (Optional)
 * param proxyProtocolV2: 【nlb】是否启用Proxy ProtocolV2协议, 取值为false或者true, 默认为false (Optional)
 * param description: 描述,允许输入UTF-8编码下的全部字符，不超过256字符 (Optional)
 * param sessionStickiness: 后端服务的后端保持, 取值为false(不开启)或者true(开启)，默认为false【alb Http协议，RoundRobin算法】支持基于cookie的会话保持【nlb】支持基于报文源目的IP的会话保持 (Optional)
 * param sessionStickyTimeout: 【nlb】会话保持超时时间，sessionStickiness开启时生效, 取值范围[1-3600] (Optional)
 * param connectionDrainingSeconds: 【nlb】移除target前，连接的最大保持时间，默认300s，取值范围[0-3600] (Optional)
 * param httpCookieExpireSeconds: 【alb Http协议】cookie的过期时间,sessionStickiness开启时生效，取值范围为[0-86400], 0表示cookie与浏览器同生命周期 (Optional)
 * param httpForwardedProtocol: 【alb Http协议】获取负载均衡的协议, 取值为False(不获取)或True(获取) (Optional)
 * param httpForwardedPort: 【alb Http协议】获取负载均衡的端口, 取值为False(不获取)或True(获取) (Optional)
 * param httpForwardedHost: 【alb Http协议】获取负载均衡的host信息, 取值为False(不获取)或True(获取) (Optional)
 * param httpForwardedVip: 【alb Http协议】获取负载均衡的vip, 取值为False(不获取)或True(获取) (Optional)
 * param closeHealthCheck: 关闭健康检查，取值为false(不关闭)或true(关闭) (Optional)
 */
func NewUpdateBackendRequestWithAllParams(
    regionId string,
    backendId string,
    backendName *string,
    healthCheckSpec *lb.HealthCheckSpec,
    algorithm *string,
    targetGroupIds []string,
    agIds []string,
    proxyProtocol *bool,
    proxyProtocolV2 *bool,
    description *string,
    sessionStickiness *bool,
    sessionStickyTimeout *int,
    connectionDrainingSeconds *int,
    httpCookieExpireSeconds *int,
    httpForwardedProtocol *bool,
    httpForwardedPort *bool,
    httpForwardedHost *bool,
    httpForwardedVip *bool,
    closeHealthCheck *bool,
) *UpdateBackendRequest {

    return &UpdateBackendRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/backends/{backendId}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        BackendId: backendId,
        BackendName: backendName,
        HealthCheckSpec: healthCheckSpec,
        Algorithm: algorithm,
        TargetGroupIds: targetGroupIds,
        AgIds: agIds,
        ProxyProtocol: proxyProtocol,
        ProxyProtocolV2: proxyProtocolV2,
        Description: description,
        SessionStickiness: sessionStickiness,
        SessionStickyTimeout: sessionStickyTimeout,
        ConnectionDrainingSeconds: connectionDrainingSeconds,
        HttpCookieExpireSeconds: httpCookieExpireSeconds,
        HttpForwardedProtocol: httpForwardedProtocol,
        HttpForwardedPort: httpForwardedPort,
        HttpForwardedHost: httpForwardedHost,
        HttpForwardedVip: httpForwardedVip,
        CloseHealthCheck: closeHealthCheck,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateBackendRequestWithoutParam() *UpdateBackendRequest {

    return &UpdateBackendRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/backends/{backendId}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *UpdateBackendRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param backendId: Backend Id(Required) */
func (r *UpdateBackendRequest) SetBackendId(backendId string) {
    r.BackendId = backendId
}

/* param backendName: 后端服务名字,只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符(Optional) */
func (r *UpdateBackendRequest) SetBackendName(backendName string) {
    r.BackendName = &backendName
}

/* param healthCheckSpec: 健康检查信息(Optional) */
func (r *UpdateBackendRequest) SetHealthCheckSpec(healthCheckSpec *lb.HealthCheckSpec) {
    r.HealthCheckSpec = healthCheckSpec
}

/* param algorithm: 调度算法, 取值范围为[IpHash、RoundRobin、LeastConn]（取值范围的含义分别为：源Ip hash，加权轮询和加权最小连接）(Optional) */
func (r *UpdateBackendRequest) SetAlgorithm(algorithm string) {
    r.Algorithm = &algorithm
}

/* param targetGroupIds: 服务器组的Id列表，目前只支持一个，且与agIds不能同时存在(Optional) */
func (r *UpdateBackendRequest) SetTargetGroupIds(targetGroupIds []string) {
    r.TargetGroupIds = targetGroupIds
}

/* param agIds: 可用性组Id列表，目前只支持一个，且与targetGroupIds不能同时存在(Optional) */
func (r *UpdateBackendRequest) SetAgIds(agIds []string) {
    r.AgIds = agIds
}

/* param proxyProtocol: 【alb Tcp协议】获取真实ip, 取值为False(不获取)或者True(获取,支持Proxy Protocol v1版本)，默认为False(Optional) */
func (r *UpdateBackendRequest) SetProxyProtocol(proxyProtocol bool) {
    r.ProxyProtocol = &proxyProtocol
}

/* param proxyProtocolV2: 【nlb】是否启用Proxy ProtocolV2协议, 取值为false或者true, 默认为false(Optional) */
func (r *UpdateBackendRequest) SetProxyProtocolV2(proxyProtocolV2 bool) {
    r.ProxyProtocolV2 = &proxyProtocolV2
}

/* param description: 描述,允许输入UTF-8编码下的全部字符，不超过256字符(Optional) */
func (r *UpdateBackendRequest) SetDescription(description string) {
    r.Description = &description
}

/* param sessionStickiness: 后端服务的后端保持, 取值为false(不开启)或者true(开启)，默认为false【alb Http协议，RoundRobin算法】支持基于cookie的会话保持【nlb】支持基于报文源目的IP的会话保持(Optional) */
func (r *UpdateBackendRequest) SetSessionStickiness(sessionStickiness bool) {
    r.SessionStickiness = &sessionStickiness
}

/* param sessionStickyTimeout: 【nlb】会话保持超时时间，sessionStickiness开启时生效, 取值范围[1-3600](Optional) */
func (r *UpdateBackendRequest) SetSessionStickyTimeout(sessionStickyTimeout int) {
    r.SessionStickyTimeout = &sessionStickyTimeout
}

/* param connectionDrainingSeconds: 【nlb】移除target前，连接的最大保持时间，默认300s，取值范围[0-3600](Optional) */
func (r *UpdateBackendRequest) SetConnectionDrainingSeconds(connectionDrainingSeconds int) {
    r.ConnectionDrainingSeconds = &connectionDrainingSeconds
}

/* param httpCookieExpireSeconds: 【alb Http协议】cookie的过期时间,sessionStickiness开启时生效，取值范围为[0-86400], 0表示cookie与浏览器同生命周期(Optional) */
func (r *UpdateBackendRequest) SetHttpCookieExpireSeconds(httpCookieExpireSeconds int) {
    r.HttpCookieExpireSeconds = &httpCookieExpireSeconds
}

/* param httpForwardedProtocol: 【alb Http协议】获取负载均衡的协议, 取值为False(不获取)或True(获取)(Optional) */
func (r *UpdateBackendRequest) SetHttpForwardedProtocol(httpForwardedProtocol bool) {
    r.HttpForwardedProtocol = &httpForwardedProtocol
}

/* param httpForwardedPort: 【alb Http协议】获取负载均衡的端口, 取值为False(不获取)或True(获取)(Optional) */
func (r *UpdateBackendRequest) SetHttpForwardedPort(httpForwardedPort bool) {
    r.HttpForwardedPort = &httpForwardedPort
}

/* param httpForwardedHost: 【alb Http协议】获取负载均衡的host信息, 取值为False(不获取)或True(获取)(Optional) */
func (r *UpdateBackendRequest) SetHttpForwardedHost(httpForwardedHost bool) {
    r.HttpForwardedHost = &httpForwardedHost
}

/* param httpForwardedVip: 【alb Http协议】获取负载均衡的vip, 取值为False(不获取)或True(获取)(Optional) */
func (r *UpdateBackendRequest) SetHttpForwardedVip(httpForwardedVip bool) {
    r.HttpForwardedVip = &httpForwardedVip
}

/* param closeHealthCheck: 关闭健康检查，取值为false(不关闭)或true(关闭)(Optional) */
func (r *UpdateBackendRequest) SetCloseHealthCheck(closeHealthCheck bool) {
    r.CloseHealthCheck = &closeHealthCheck
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateBackendRequest) GetRegionId() string {
    return r.RegionId
}

type UpdateBackendResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateBackendResult `json:"result"`
}

type UpdateBackendResult struct {
}