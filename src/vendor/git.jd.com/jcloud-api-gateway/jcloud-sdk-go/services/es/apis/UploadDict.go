// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type UploadDictRequest struct {

    core.JDCloudRequest

    /* regionId  */
    RegionId string `json:"regionId"`

    /* 实例ID  */
    InstanceId string `json:"instanceId"`

    /* 字典类型，可选值：ext_dict,ext_stopwords (Optional) */
    DictType *string `json:"dictType"`

    /* 字典文件名，最长100个字 (Optional) */
    FileName *string `json:"fileName"`

    /* 字典文件。该字段是将字典文件内容进行base64 encod后的值 (Optional) */
    DictFile *string `json:"dictFile"`

    /* 字典文件MD5值，用于校验文件传输的完整性 (Optional) */
    Md5str *string `json:"md5str"`
}

/*
 * param regionId: regionId (Required)
 * param instanceId: 实例ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUploadDictRequest(
    regionId string,
    instanceId string,
) *UploadDictRequest {

	return &UploadDictRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/instances/{instanceId}/dicts",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        InstanceId: instanceId,
	}
}

/*
 * param regionId: regionId (Required)
 * param instanceId: 实例ID (Required)
 * param dictType: 字典类型，可选值：ext_dict,ext_stopwords (Optional)
 * param fileName: 字典文件名，最长100个字 (Optional)
 * param dictFile: 字典文件。该字段是将字典文件内容进行base64 encod后的值 (Optional)
 * param md5str: 字典文件MD5值，用于校验文件传输的完整性 (Optional)
 */
func NewUploadDictRequestWithAllParams(
    regionId string,
    instanceId string,
    dictType *string,
    fileName *string,
    dictFile *string,
    md5str *string,
) *UploadDictRequest {

    return &UploadDictRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}/dicts",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        InstanceId: instanceId,
        DictType: dictType,
        FileName: fileName,
        DictFile: dictFile,
        Md5str: md5str,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUploadDictRequestWithoutParam() *UploadDictRequest {

    return &UploadDictRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}/dicts",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: regionId(Required) */
func (r *UploadDictRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param instanceId: 实例ID(Required) */
func (r *UploadDictRequest) SetInstanceId(instanceId string) {
    r.InstanceId = instanceId
}

/* param dictType: 字典类型，可选值：ext_dict,ext_stopwords(Optional) */
func (r *UploadDictRequest) SetDictType(dictType string) {
    r.DictType = &dictType
}

/* param fileName: 字典文件名，最长100个字(Optional) */
func (r *UploadDictRequest) SetFileName(fileName string) {
    r.FileName = &fileName
}

/* param dictFile: 字典文件。该字段是将字典文件内容进行base64 encod后的值(Optional) */
func (r *UploadDictRequest) SetDictFile(dictFile string) {
    r.DictFile = &dictFile
}

/* param md5str: 字典文件MD5值，用于校验文件传输的完整性(Optional) */
func (r *UploadDictRequest) SetMd5str(md5str string) {
    r.Md5str = &md5str
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UploadDictRequest) GetRegionId() string {
    return r.RegionId
}

type UploadDictResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UploadDictResult `json:"result"`
}

type UploadDictResult struct {
    DictFileName string `json:"dictFileName"`
}