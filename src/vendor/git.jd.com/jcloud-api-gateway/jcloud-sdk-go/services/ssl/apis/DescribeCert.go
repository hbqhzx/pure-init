// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    ssl "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/ssl/models"
)

type DescribeCertRequest struct {

    core.JDCloudRequest

    /* 证书 Id  */
    CertId string `json:"certId"`
}

/*
 * param certId: 证书 Id (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeCertRequest(
    certId string,
) *DescribeCertRequest {

	return &DescribeCertRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/sslCert/{certId}",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        CertId: certId,
	}
}

/*
 * param certId: 证书 Id (Required)
 */
func NewDescribeCertRequestWithAllParams(
    certId string,
) *DescribeCertRequest {

    return &DescribeCertRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/sslCert/{certId}",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        CertId: certId,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeCertRequestWithoutParam() *DescribeCertRequest {

    return &DescribeCertRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/sslCert/{certId}",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param certId: 证书 Id(Required) */
func (r *DescribeCertRequest) SetCertId(certId string) {
    r.CertId = certId
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeCertRequest) GetRegionId() string {
    return ""
}

type DescribeCertResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeCertResult `json:"result"`
}

type DescribeCertResult struct {
    CertId string `json:"certId"`
    CertName string `json:"certName"`
    CommonName string `json:"commonName"`
    CertType string `json:"certType"`
    Issuer string `json:"issuer"`
    StartTime string `json:"startTime"`
    EndTime string `json:"endTime"`
    DnsNames []string `json:"dnsNames"`
    Digest string `json:"digest"`
    UsedBy []ssl.CertBindInfo `json:"usedBy"`
}