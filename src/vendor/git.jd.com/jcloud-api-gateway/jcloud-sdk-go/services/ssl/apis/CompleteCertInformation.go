// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type CompleteCertInformationRequest struct {

    core.JDCloudRequest

    /* 证书名称  */
    CertName string `json:"certName"`

    /* 证书申购记录Id  */
    RecordId string `json:"recordId"`

    /* 校验类型，DNS或File  */
    ValidateType string `json:"validateType"`

    /* 证书绑定域名  */
    CommonName string `json:"commonName"`
}

/*
 * param certName: 证书名称 (Required)
 * param recordId: 证书申购记录Id (Required)
 * param validateType: 校验类型，DNS或File (Required)
 * param commonName: 证书绑定域名 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCompleteCertInformationRequest(
    certName string,
    recordId string,
    validateType string,
    commonName string,
) *CompleteCertInformationRequest {

	return &CompleteCertInformationRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/sslRecord:complete",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        CertName: certName,
        RecordId: recordId,
        ValidateType: validateType,
        CommonName: commonName,
	}
}

/*
 * param certName: 证书名称 (Required)
 * param recordId: 证书申购记录Id (Required)
 * param validateType: 校验类型，DNS或File (Required)
 * param commonName: 证书绑定域名 (Required)
 */
func NewCompleteCertInformationRequestWithAllParams(
    certName string,
    recordId string,
    validateType string,
    commonName string,
) *CompleteCertInformationRequest {

    return &CompleteCertInformationRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/sslRecord:complete",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        CertName: certName,
        RecordId: recordId,
        ValidateType: validateType,
        CommonName: commonName,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCompleteCertInformationRequestWithoutParam() *CompleteCertInformationRequest {

    return &CompleteCertInformationRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/sslRecord:complete",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param certName: 证书名称(Required) */
func (r *CompleteCertInformationRequest) SetCertName(certName string) {
    r.CertName = certName
}

/* param recordId: 证书申购记录Id(Required) */
func (r *CompleteCertInformationRequest) SetRecordId(recordId string) {
    r.RecordId = recordId
}

/* param validateType: 校验类型，DNS或File(Required) */
func (r *CompleteCertInformationRequest) SetValidateType(validateType string) {
    r.ValidateType = validateType
}

/* param commonName: 证书绑定域名(Required) */
func (r *CompleteCertInformationRequest) SetCommonName(commonName string) {
    r.CommonName = commonName
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CompleteCertInformationRequest) GetRegionId() string {
    return ""
}

type CompleteCertInformationResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CompleteCertInformationResult `json:"result"`
}

type CompleteCertInformationResult struct {
    RecordId string `json:"recordId"`
}