// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type RecordCertIssuedRequest struct {

    core.JDCloudRequest

    /* 供应商名称  */
    Vendor string `json:"vendor"`

    /* 供应商订单Id  */
    PartnerOrderId string `json:"partnerOrderId"`

    /* 推送的证书状态码  */
    Code int `json:"code"`

    /* 证书状态描述 (Optional) */
    Description *string `json:"description"`

    /* 签发的证书 (Optional) */
    Data *string `json:"data"`
}

/*
 * param vendor: 供应商名称 (Required)
 * param partnerOrderId: 供应商订单Id (Required)
 * param code: 推送的证书状态码 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewRecordCertIssuedRequest(
    vendor string,
    partnerOrderId string,
    code int,
) *RecordCertIssuedRequest {

	return &RecordCertIssuedRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/sslRecord:certIssued",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Vendor: vendor,
        PartnerOrderId: partnerOrderId,
        Code: code,
	}
}

/*
 * param vendor: 供应商名称 (Required)
 * param partnerOrderId: 供应商订单Id (Required)
 * param code: 推送的证书状态码 (Required)
 * param description: 证书状态描述 (Optional)
 * param data: 签发的证书 (Optional)
 */
func NewRecordCertIssuedRequestWithAllParams(
    vendor string,
    partnerOrderId string,
    code int,
    description *string,
    data *string,
) *RecordCertIssuedRequest {

    return &RecordCertIssuedRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/sslRecord:certIssued",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Vendor: vendor,
        PartnerOrderId: partnerOrderId,
        Code: code,
        Description: description,
        Data: data,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewRecordCertIssuedRequestWithoutParam() *RecordCertIssuedRequest {

    return &RecordCertIssuedRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/sslRecord:certIssued",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param vendor: 供应商名称(Required) */
func (r *RecordCertIssuedRequest) SetVendor(vendor string) {
    r.Vendor = vendor
}

/* param partnerOrderId: 供应商订单Id(Required) */
func (r *RecordCertIssuedRequest) SetPartnerOrderId(partnerOrderId string) {
    r.PartnerOrderId = partnerOrderId
}

/* param code: 推送的证书状态码(Required) */
func (r *RecordCertIssuedRequest) SetCode(code int) {
    r.Code = code
}

/* param description: 证书状态描述(Optional) */
func (r *RecordCertIssuedRequest) SetDescription(description string) {
    r.Description = &description
}

/* param data: 签发的证书(Optional) */
func (r *RecordCertIssuedRequest) SetData(data string) {
    r.Data = &data
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r RecordCertIssuedRequest) GetRegionId() string {
    return ""
}

type RecordCertIssuedResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result RecordCertIssuedResult `json:"result"`
}

type RecordCertIssuedResult struct {
    Code int `json:"code"`
    Message string `json:"message"`
}