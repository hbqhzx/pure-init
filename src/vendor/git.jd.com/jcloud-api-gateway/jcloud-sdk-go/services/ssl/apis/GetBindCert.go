// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type GetBindCertRequest struct {

    core.JDCloudRequest

    /* 证书 Id  */
    CertId string `json:"certId"`

    /* 绑定资源的业务类型，如lb、cdn等  */
    BindFrom string `json:"bindFrom"`

    /* 绑定资源的ID  */
    BindId string `json:"bindId"`

    /* 绑定资源所在的Region (Optional) */
    BindRegion *string `json:"bindRegion"`

    /* 绑定资源所在的可用区 (Optional) */
    BindZone *string `json:"bindZone"`
}

/*
 * param certId: 证书 Id (Required)
 * param bindFrom: 绑定资源的业务类型，如lb、cdn等 (Required)
 * param bindId: 绑定资源的ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewGetBindCertRequest(
    certId string,
    bindFrom string,
    bindId string,
) *GetBindCertRequest {

	return &GetBindCertRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/sslCert/{certId}:bind",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        CertId: certId,
        BindFrom: bindFrom,
        BindId: bindId,
	}
}

/*
 * param certId: 证书 Id (Required)
 * param bindFrom: 绑定资源的业务类型，如lb、cdn等 (Required)
 * param bindId: 绑定资源的ID (Required)
 * param bindRegion: 绑定资源所在的Region (Optional)
 * param bindZone: 绑定资源所在的可用区 (Optional)
 */
func NewGetBindCertRequestWithAllParams(
    certId string,
    bindFrom string,
    bindId string,
    bindRegion *string,
    bindZone *string,
) *GetBindCertRequest {

    return &GetBindCertRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/sslCert/{certId}:bind",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        CertId: certId,
        BindFrom: bindFrom,
        BindId: bindId,
        BindRegion: bindRegion,
        BindZone: bindZone,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewGetBindCertRequestWithoutParam() *GetBindCertRequest {

    return &GetBindCertRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/sslCert/{certId}:bind",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param certId: 证书 Id(Required) */
func (r *GetBindCertRequest) SetCertId(certId string) {
    r.CertId = certId
}

/* param bindFrom: 绑定资源的业务类型，如lb、cdn等(Required) */
func (r *GetBindCertRequest) SetBindFrom(bindFrom string) {
    r.BindFrom = bindFrom
}

/* param bindId: 绑定资源的ID(Required) */
func (r *GetBindCertRequest) SetBindId(bindId string) {
    r.BindId = bindId
}

/* param bindRegion: 绑定资源所在的Region(Optional) */
func (r *GetBindCertRequest) SetBindRegion(bindRegion string) {
    r.BindRegion = &bindRegion
}

/* param bindZone: 绑定资源所在的可用区(Optional) */
func (r *GetBindCertRequest) SetBindZone(bindZone string) {
    r.BindZone = &bindZone
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r GetBindCertRequest) GetRegionId() string {
    return ""
}

type GetBindCertResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result GetBindCertResult `json:"result"`
}

type GetBindCertResult struct {
    CertId string `json:"certId"`
    KeyFile string `json:"keyFile"`
    CertFile string `json:"certFile"`
}