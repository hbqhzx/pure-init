// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    logs "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/logs/models"
)

type UpdateSystemTemplateRequest struct {

    core.JDCloudRequest

    /* templateUID  */
    TemplateUID string `json:"templateUID"`

    /* 日志类型  */
    Name string `json:"name"`

    /* log path (Optional) */
    Path *string `json:"path"`

    /* log mode：1-JSON/2-FLATTEN/3-SEPARATE/4-ROW/5-ROWS  */
    LogMode int `json:"logMode"`

    /* tenant：原始日志只有tenantId，没有pin，则传 1，否则传 0  */
    Tenant int `json:"tenant"`

    /* fields,字段列表  */
    Fields []logs.Field `json:"fields"`
}

/*
 * param templateUID: templateUID (Required)
 * param name: 日志类型 (Required)
 * param logMode: log mode：1-JSON/2-FLATTEN/3-SEPARATE/4-ROW/5-ROWS (Required)
 * param tenant: tenant：原始日志只有tenantId，没有pin，则传 1，否则传 0 (Required)
 * param fields: fields,字段列表 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateSystemTemplateRequest(
    templateUID string,
    name string,
    logMode int,
    tenant int,
    fields []logs.Field,
) *UpdateSystemTemplateRequest {

	return &UpdateSystemTemplateRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/teamplatesx/{templateUID}",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        TemplateUID: templateUID,
        Name: name,
        LogMode: logMode,
        Tenant: tenant,
        Fields: fields,
	}
}

/*
 * param templateUID: templateUID (Required)
 * param name: 日志类型 (Required)
 * param path: log path (Optional)
 * param logMode: log mode：1-JSON/2-FLATTEN/3-SEPARATE/4-ROW/5-ROWS (Required)
 * param tenant: tenant：原始日志只有tenantId，没有pin，则传 1，否则传 0 (Required)
 * param fields: fields,字段列表 (Required)
 */
func NewUpdateSystemTemplateRequestWithAllParams(
    templateUID string,
    name string,
    path *string,
    logMode int,
    tenant int,
    fields []logs.Field,
) *UpdateSystemTemplateRequest {

    return &UpdateSystemTemplateRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/teamplatesx/{templateUID}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        TemplateUID: templateUID,
        Name: name,
        Path: path,
        LogMode: logMode,
        Tenant: tenant,
        Fields: fields,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateSystemTemplateRequestWithoutParam() *UpdateSystemTemplateRequest {

    return &UpdateSystemTemplateRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/teamplatesx/{templateUID}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param templateUID: templateUID(Required) */
func (r *UpdateSystemTemplateRequest) SetTemplateUID(templateUID string) {
    r.TemplateUID = templateUID
}

/* param name: 日志类型(Required) */
func (r *UpdateSystemTemplateRequest) SetName(name string) {
    r.Name = name
}

/* param path: log path(Optional) */
func (r *UpdateSystemTemplateRequest) SetPath(path string) {
    r.Path = &path
}

/* param logMode: log mode：1-JSON/2-FLATTEN/3-SEPARATE/4-ROW/5-ROWS(Required) */
func (r *UpdateSystemTemplateRequest) SetLogMode(logMode int) {
    r.LogMode = logMode
}

/* param tenant: tenant：原始日志只有tenantId，没有pin，则传 1，否则传 0(Required) */
func (r *UpdateSystemTemplateRequest) SetTenant(tenant int) {
    r.Tenant = tenant
}

/* param fields: fields,字段列表(Required) */
func (r *UpdateSystemTemplateRequest) SetFields(fields []logs.Field) {
    r.Fields = fields
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateSystemTemplateRequest) GetRegionId() string {
    return ""
}

type UpdateSystemTemplateResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateSystemTemplateResult `json:"result"`
}

type UpdateSystemTemplateResult struct {
}