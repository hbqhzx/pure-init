// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    logs "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/logs/models"
)

type CreateApiConfRequest struct {

    core.JDCloudRequest

    /* ServiceCode  */
    ServiceCode string `json:"serviceCode"`

    /* ApiName  */
    ApiName string `json:"apiName"`

    /* Url  */
    Url string `json:"url"`

    /* Method  */
    Method string `json:"method"`

    /* Version  */
    Version string `json:"version"`

    /* Params  */
    Params []logs.Pair `json:"params"`

    /* Resp map[string]string  */
    Resp []logs.Pair `json:"resp"`
}

/*
 * param serviceCode: ServiceCode (Required)
 * param apiName: ApiName (Required)
 * param url: Url (Required)
 * param method: Method (Required)
 * param version: Version (Required)
 * param params: Params (Required)
 * param resp: Resp map[string]string (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateApiConfRequest(
    serviceCode string,
    apiName string,
    url string,
    method string,
    version string,
    params []logs.Pair,
    resp []logs.Pair,
) *CreateApiConfRequest {

	return &CreateApiConfRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/apiconfsx",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        ServiceCode: serviceCode,
        ApiName: apiName,
        Url: url,
        Method: method,
        Version: version,
        Params: params,
        Resp: resp,
	}
}

/*
 * param serviceCode: ServiceCode (Required)
 * param apiName: ApiName (Required)
 * param url: Url (Required)
 * param method: Method (Required)
 * param version: Version (Required)
 * param params: Params (Required)
 * param resp: Resp map[string]string (Required)
 */
func NewCreateApiConfRequestWithAllParams(
    serviceCode string,
    apiName string,
    url string,
    method string,
    version string,
    params []logs.Pair,
    resp []logs.Pair,
) *CreateApiConfRequest {

    return &CreateApiConfRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/apiconfsx",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        ServiceCode: serviceCode,
        ApiName: apiName,
        Url: url,
        Method: method,
        Version: version,
        Params: params,
        Resp: resp,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateApiConfRequestWithoutParam() *CreateApiConfRequest {

    return &CreateApiConfRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/apiconfsx",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param serviceCode: ServiceCode(Required) */
func (r *CreateApiConfRequest) SetServiceCode(serviceCode string) {
    r.ServiceCode = serviceCode
}

/* param apiName: ApiName(Required) */
func (r *CreateApiConfRequest) SetApiName(apiName string) {
    r.ApiName = apiName
}

/* param url: Url(Required) */
func (r *CreateApiConfRequest) SetUrl(url string) {
    r.Url = url
}

/* param method: Method(Required) */
func (r *CreateApiConfRequest) SetMethod(method string) {
    r.Method = method
}

/* param version: Version(Required) */
func (r *CreateApiConfRequest) SetVersion(version string) {
    r.Version = version
}

/* param params: Params(Required) */
func (r *CreateApiConfRequest) SetParams(params []logs.Pair) {
    r.Params = params
}

/* param resp: Resp map[string]string(Required) */
func (r *CreateApiConfRequest) SetResp(resp []logs.Pair) {
    r.Resp = resp
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateApiConfRequest) GetRegionId() string {
    return ""
}

type CreateApiConfResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateApiConfResult `json:"result"`
}

type CreateApiConfResult struct {
}