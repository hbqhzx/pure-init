// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    csa "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/csa/apis"
    "encoding/json"
    "errors"
)

type CsaClient struct {
    core.JDCloudClient
}

func NewCsaClient(credential *core.Credential) *CsaClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("csa.jdcloud-api.com")

    return &CsaClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "csa",
            Revision:    "2.0.72",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *CsaClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *CsaClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 查询定向攻击事件详情接口 */
func (c *CsaClient) QueryTargetAttack(request *csa.QueryTargetAttackRequest) (*csa.QueryTargetAttackResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryTargetAttackResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 网络安全态势大屏Web攻击事件分类查询接口 */
func (c *CsaClient) QueryWebAttackClassify(request *csa.QueryWebAttackClassifyRequest) (*csa.QueryWebAttackClassifyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryWebAttackClassifyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查看扫描漏洞列表信息接口 */
func (c *CsaClient) QueryScanVuls(request *csa.QueryScanVulsRequest) (*csa.QueryScanVulsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryScanVulsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 态势感知大屏事件严重等级查询接口 */
func (c *CsaClient) QuerySeveritySelection(request *csa.QuerySeveritySelectionRequest) (*csa.QuerySeveritySelectionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QuerySeveritySelectionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查看资产详情接口 */
func (c *CsaClient) QueryAssetManagerServerDetail(request *csa.QueryAssetManagerServerDetailRequest) (*csa.QueryAssetManagerServerDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryAssetManagerServerDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除扫描资产配置信息接口 */
func (c *CsaClient) DeleteScanAssetConfig(request *csa.DeleteScanAssetConfigRequest) (*csa.DeleteScanAssetConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.DeleteScanAssetConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量更改事件状态 */
func (c *CsaClient) BatchUpdateTargetAttacksStatus(request *csa.BatchUpdateTargetAttacksStatusRequest) (*csa.BatchUpdateTargetAttacksStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.BatchUpdateTargetAttacksStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 主机安全态势大屏入侵检测攻击类型分布查询接口 */
func (c *CsaClient) QueryInvasionDetectAttackType(request *csa.QueryInvasionDetectAttackTypeRequest) (*csa.QueryInvasionDetectAttackTypeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryInvasionDetectAttackTypeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 态势感知大屏风险值总分查询接口 */
func (c *CsaClient) QueryTotalRiskScore(request *csa.QueryTotalRiskScoreRequest) (*csa.QueryTotalRiskScoreResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryTotalRiskScoreResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询安全引擎启动覆盖率对比 */
func (c *CsaClient) QueryDefensesCoverageTrend(request *csa.QueryDefensesCoverageTrendRequest) (*csa.QueryDefensesCoverageTrendResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryDefensesCoverageTrendResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 态势感知主机风险值总分查询接口 */
func (c *CsaClient) QueryRiskScoreByServerId(request *csa.QueryRiskScoreByServerIdRequest) (*csa.QueryRiskScoreByServerIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryRiskScoreByServerIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询告警事件安全事件列表 */
func (c *CsaClient) QueryAlarmEvents(request *csa.QueryAlarmEventsRequest) (*csa.QueryAlarmEventsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryAlarmEventsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询用户是否被授权 */
func (c *CsaClient) IsAuthorizationGiven(request *csa.IsAuthorizationGivenRequest) (*csa.IsAuthorizationGivenResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.IsAuthorizationGivenResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 网络安全态势大屏DDos攻击事件网络联通状态占比查询接口 */
func (c *CsaClient) QueryDdosNetworkUnicomState(request *csa.QueryDdosNetworkUnicomStateRequest) (*csa.QueryDdosNetworkUnicomStateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryDdosNetworkUnicomStateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 主机安全态势大屏入侵检测实时告警计数查询接口 */
func (c *CsaClient) QueryHostScreenRealTimeAlarmStatistics(request *csa.QueryHostScreenRealTimeAlarmStatisticsRequest) (*csa.QueryHostScreenRealTimeAlarmStatisticsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryHostScreenRealTimeAlarmStatisticsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修复漏洞 */
func (c *CsaClient) FixWeakEventsLeaks(request *csa.FixWeakEventsLeaksRequest) (*csa.FixWeakEventsLeaksResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.FixWeakEventsLeaksResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询威胁事件安全事件统计接口 */
func (c *CsaClient) QueryThreatEventsNameCountStat(request *csa.QueryThreatEventsNameCountStatRequest) (*csa.QueryThreatEventsNameCountStatResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryThreatEventsNameCountStatResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询安全事件发展趋势 */
func (c *CsaClient) QueryStatisticsEventTrend(request *csa.QueryStatisticsEventTrendRequest) (*csa.QueryStatisticsEventTrendResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryStatisticsEventTrendResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询报警通知规则联系人 */
func (c *CsaClient) QueryNotifyRuleContacts(request *csa.QueryNotifyRuleContactsRequest) (*csa.QueryNotifyRuleContactsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryNotifyRuleContactsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更改事件状态 */
func (c *CsaClient) UpdateAlarmEventStatus(request *csa.UpdateAlarmEventStatusRequest) (*csa.UpdateAlarmEventStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.UpdateAlarmEventStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 态势感知大屏威胁统计威胁事件统计查询接口 */
func (c *CsaClient) QueryThreatStatistics(request *csa.QueryThreatStatisticsRequest) (*csa.QueryThreatStatisticsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryThreatStatisticsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查看专用Web漏洞记录数量接口 */
func (c *CsaClient) QueryWebsiteVulNotIgnoredRecorderCount(request *csa.QueryWebsiteVulNotIgnoredRecorderCountRequest) (*csa.QueryWebsiteVulNotIgnoredRecorderCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryWebsiteVulNotIgnoredRecorderCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询DDos流量数据 */
func (c *CsaClient) QueryAlarmEventsDDosFlowRates(request *csa.QueryAlarmEventsDDosFlowRatesRequest) (*csa.QueryAlarmEventsDDosFlowRatesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryAlarmEventsDDosFlowRatesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 网络安全态势大屏DDos攻击事件受影响公网Ip查询接口 */
func (c *CsaClient) QueryDdosAffectedFloatingIp(request *csa.QueryDdosAffectedFloatingIpRequest) (*csa.QueryDdosAffectedFloatingIpResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryDdosAffectedFloatingIpResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更改事件状态 */
func (c *CsaClient) UpdateThreatEventStatus(request *csa.UpdateThreatEventStatusRequest) (*csa.UpdateThreatEventStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.UpdateThreatEventStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 设置web漏洞记录ID状态接口 */
func (c *CsaClient) SetWebsiteVulsRecorderIgnoreValue(request *csa.SetWebsiteVulsRecorderIgnoreValueRequest) (*csa.SetWebsiteVulsRecorderIgnoreValueResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.SetWebsiteVulsRecorderIgnoreValueResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查看扫描资产配置列表信息接口 */
func (c *CsaClient) QueryScanAssetConfigs(request *csa.QueryScanAssetConfigsRequest) (*csa.QueryScanAssetConfigsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryScanAssetConfigsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 主机安全态势大屏入侵检测影响资产接口 */
func (c *CsaClient) QueryInvasionDetectAffectedAssets(request *csa.QueryInvasionDetectAffectedAssetsRequest) (*csa.QueryInvasionDetectAffectedAssetsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryInvasionDetectAffectedAssetsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查看已检测到漏洞列表信息接口 */
func (c *CsaClient) QueryScanDetectedVuls(request *csa.QueryScanDetectedVulsRequest) (*csa.QueryScanDetectedVulsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryScanDetectedVulsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 主机安全态势大屏主机漏洞分布查询接口 */
func (c *CsaClient) QueryHostLeakDistribution(request *csa.QueryHostLeakDistributionRequest) (*csa.QueryHostLeakDistributionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryHostLeakDistributionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 主机安全态势大屏主机漏洞危险程度分布查询接口 */
func (c *CsaClient) QueryHostLeakCriticality(request *csa.QueryHostLeakCriticalityRequest) (*csa.QueryHostLeakCriticalityResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryHostLeakCriticalityResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询威胁事件数 */
func (c *CsaClient) QueryThreatEventsCount(request *csa.QueryThreatEventsCountRequest) (*csa.QueryThreatEventsCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryThreatEventsCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* Pcap攻击取证 */
func (c *CsaClient) QueryAlarmEventsPcapUrl(request *csa.QueryAlarmEventsPcapUrlRequest) (*csa.QueryAlarmEventsPcapUrlResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryAlarmEventsPcapUrlResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询TopN风险主机计数接口 */
func (c *CsaClient) QueryStatisticsTopRiskServerInfoCount(request *csa.QueryStatisticsTopRiskServerInfoCountRequest) (*csa.QueryStatisticsTopRiskServerInfoCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryStatisticsTopRiskServerInfoCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询定向攻击事件数对比 */
func (c *CsaClient) QueryTargetAttacksTrend(request *csa.QueryTargetAttacksTrendRequest) (*csa.QueryTargetAttacksTrendResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryTargetAttacksTrendResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 网络安全态势大屏高级威胁事件分类查询接口 */
func (c *CsaClient) QueryAdvancedThreatClassify(request *csa.QueryAdvancedThreatClassifyRequest) (*csa.QueryAdvancedThreatClassifyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryAdvancedThreatClassifyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询告警事件数 */
func (c *CsaClient) QueryAlarmEventsCount(request *csa.QueryAlarmEventsCountRequest) (*csa.QueryAlarmEventsCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryAlarmEventsCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取态势感知获取大屏事件 */
func (c *CsaClient) QueryLargeScreenEvent(request *csa.QueryLargeScreenEventRequest) (*csa.QueryLargeScreenEventResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryLargeScreenEventResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询升级企业版价格 */
func (c *CsaClient) QueryBillingUpgradeEnterpriseEditionPrice(request *csa.QueryBillingUpgradeEnterpriseEditionPriceRequest) (*csa.QueryBillingUpgradeEnterpriseEditionPriceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryBillingUpgradeEnterpriseEditionPriceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 网络安全态势大屏漏洞攻击受影响服务类型查询接口 */
func (c *CsaClient) QueryAffectedServiceType(request *csa.QueryAffectedServiceTypeRequest) (*csa.QueryAffectedServiceTypeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryAffectedServiceTypeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 设置预览配置接口 */
func (c *CsaClient) SetOverviewConfig(request *csa.SetOverviewConfigRequest) (*csa.SetOverviewConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.SetOverviewConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询弱点事件数对比 */
func (c *CsaClient) QueryWeakEventsTrend(request *csa.QueryWeakEventsTrendRequest) (*csa.QueryWeakEventsTrendResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryWeakEventsTrendResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询安全引擎启动覆盖率 */
func (c *CsaClient) QueryDefensesStartupCoverage(request *csa.QueryDefensesStartupCoverageRequest) (*csa.QueryDefensesStartupCoverageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryDefensesStartupCoverageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询单一攻击事件安全事件统计接口 */
func (c *CsaClient) QuerySingleAttacksNameCountStat(request *csa.QuerySingleAttacksNameCountStatRequest) (*csa.QuerySingleAttacksNameCountStatResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QuerySingleAttacksNameCountStatResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询威胁事件列表接口 */
func (c *CsaClient) QueryThreatEvents(request *csa.QueryThreatEventsRequest) (*csa.QueryThreatEventsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryThreatEventsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* Pcap攻击取证 */
func (c *CsaClient) QuerySingleAttacksPcapUrl(request *csa.QuerySingleAttacksPcapUrlRequest) (*csa.QuerySingleAttacksPcapUrlResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QuerySingleAttacksPcapUrlResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询单一攻击事件数对比 */
func (c *CsaClient) QuerySingleAttacksTrend(request *csa.QuerySingleAttacksTrendRequest) (*csa.QuerySingleAttacksTrendResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QuerySingleAttacksTrendResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 设置报警通知规则 */
func (c *CsaClient) SetNotifyRule(request *csa.SetNotifyRuleRequest) (*csa.SetNotifyRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.SetNotifyRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 主机安全态势大屏主机漏洞影响资产接口 */
func (c *CsaClient) QueryHostLeakAffectedAssets(request *csa.QueryHostLeakAffectedAssetsRequest) (*csa.QueryHostLeakAffectedAssetsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryHostLeakAffectedAssetsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询告警事件安全事件统计接口 */
func (c *CsaClient) QueryAlarmEventsNameCountStat(request *csa.QueryAlarmEventsNameCountStatRequest) (*csa.QueryAlarmEventsNameCountStatResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryAlarmEventsNameCountStatResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 态势感知大屏Top5风险资产查询接口 */
func (c *CsaClient) QueryTopRiskAsset(request *csa.QueryTopRiskAssetRequest) (*csa.QueryTopRiskAssetResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryTopRiskAssetResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询单一攻击事件安全事件 */
func (c *CsaClient) QuerySingleAttack(request *csa.QuerySingleAttackRequest) (*csa.QuerySingleAttackResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QuerySingleAttackResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 网络安全态势大屏事件发展趋势查询接口 */
func (c *CsaClient) QueryEventDevelopTrend(request *csa.QueryEventDevelopTrendRequest) (*csa.QueryEventDevelopTrendResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryEventDevelopTrendResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询预览配置接口 */
func (c *CsaClient) QueryOverviewConfig(request *csa.QueryOverviewConfigRequest) (*csa.QueryOverviewConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryOverviewConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新扫描资产配置信息接口 */
func (c *CsaClient) UpdateScanAssetConfig(request *csa.UpdateScanAssetConfigRequest) (*csa.UpdateScanAssetConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.UpdateScanAssetConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询TopN计数接口 */
func (c *CsaClient) QueryStatisticsTopCount(request *csa.QueryStatisticsTopCountRequest) (*csa.QueryStatisticsTopCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryStatisticsTopCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询新购企业版价格 */
func (c *CsaClient) QueryBillingNewEnterpriseEditionPrice(request *csa.QueryBillingNewEnterpriseEditionPriceRequest) (*csa.QueryBillingNewEnterpriseEditionPriceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryBillingNewEnterpriseEditionPriceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询漏洞列表 */
func (c *CsaClient) QueryWeakEvents(request *csa.QueryWeakEventsRequest) (*csa.QueryWeakEventsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryWeakEventsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 网络安全态势大屏高级威胁事件风险主机查询接口 */
func (c *CsaClient) QueryRiskHost(request *csa.QueryRiskHostRequest) (*csa.QueryRiskHostResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryRiskHostResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 下单新购企业版本 */
func (c *CsaClient) NewEnterpriseEditionOrder(request *csa.NewEnterpriseEditionOrderRequest) (*csa.NewEnterpriseEditionOrderResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.NewEnterpriseEditionOrderResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 网络安全态势大屏各项攻击统计查询接口 */
func (c *CsaClient) QueryNetworkScreenAttackStatistics(request *csa.QueryNetworkScreenAttackStatisticsRequest) (*csa.QueryNetworkScreenAttackStatisticsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryNetworkScreenAttackStatisticsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询报警通知规则列表 */
func (c *CsaClient) QueryNotifyRules(request *csa.QueryNotifyRulesRequest) (*csa.QueryNotifyRulesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryNotifyRulesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 态势感知大屏事件严重等级设置接口 */
func (c *CsaClient) SetSeveritySelection(request *csa.SetSeveritySelectionRequest) (*csa.SetSeveritySelectionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.SetSeveritySelectionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询定向攻击事件列表接口 */
func (c *CsaClient) QueryTargetAttacks(request *csa.QueryTargetAttacksRequest) (*csa.QueryTargetAttacksResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryTargetAttacksResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 取消授权态势感知 */
func (c *CsaClient) CancelAuthorization(request *csa.CancelAuthorizationRequest) (*csa.CancelAuthorizationResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.CancelAuthorizationResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加扫描资产配置列表信息接口 */
func (c *CsaClient) AddScanAssetConfig(request *csa.AddScanAssetConfigRequest) (*csa.AddScanAssetConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.AddScanAssetConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询专用Web漏洞记录数对比 */
func (c *CsaClient) QueryWebsiteVulsTrend(request *csa.QueryWebsiteVulsTrendRequest) (*csa.QueryWebsiteVulsTrendResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryWebsiteVulsTrendResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询单一攻击事件安全事件列表 */
func (c *CsaClient) QuerySingleAttacks(request *csa.QuerySingleAttacksRequest) (*csa.QuerySingleAttacksResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QuerySingleAttacksResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 同意授权态势感知 */
func (c *CsaClient) ConfirmAuthorization(request *csa.ConfirmAuthorizationRequest) (*csa.ConfirmAuthorizationResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.ConfirmAuthorizationResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更改事件状态 */
func (c *CsaClient) UpdateTargetAttackStatus(request *csa.UpdateTargetAttackStatusRequest) (*csa.UpdateTargetAttackStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.UpdateTargetAttackStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 内部接口，提供给交易使用，根据资源id获取资源信息。 */
func (c *CsaClient) SelectDetailList(request *csa.SelectDetailListRequest) (*csa.SelectDetailListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.SelectDetailListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查看专用Web漏洞记录列表接口 */
func (c *CsaClient) QueryWebsiteVul(request *csa.QueryWebsiteVulRequest) (*csa.QueryWebsiteVulResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryWebsiteVulResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询DDos流量数据 */
func (c *CsaClient) QuerySingleAttacksDDosFlowRates(request *csa.QuerySingleAttacksDDosFlowRatesRequest) (*csa.QuerySingleAttacksDDosFlowRatesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QuerySingleAttacksDDosFlowRatesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查看专用Web漏洞列表信息接口 */
func (c *CsaClient) QueryWebsiteVuls(request *csa.QueryWebsiteVulsRequest) (*csa.QueryWebsiteVulsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryWebsiteVulsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 同步资产 */
func (c *CsaClient) SyncAssetResource(request *csa.SyncAssetResourceRequest) (*csa.SyncAssetResourceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.SyncAssetResourceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查看扫描漏洞信息接口 */
func (c *CsaClient) QueryScanVul(request *csa.QueryScanVulRequest) (*csa.QueryScanVulResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryScanVulResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量更改事件状态 */
func (c *CsaClient) BatchUpdateSingleAttacksStatus(request *csa.BatchUpdateSingleAttacksStatusRequest) (*csa.BatchUpdateSingleAttacksStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.BatchUpdateSingleAttacksStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询恶意/可疑文件沙箱行为分析 */
func (c *CsaClient) QueryAlarmEventsFileSandboxAnalysis(request *csa.QueryAlarmEventsFileSandboxAnalysisRequest) (*csa.QueryAlarmEventsFileSandboxAnalysisResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryAlarmEventsFileSandboxAnalysisResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询告警事件安全事件 */
func (c *CsaClient) QueryAlarmEvent(request *csa.QueryAlarmEventRequest) (*csa.QueryAlarmEventResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryAlarmEventResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查看资产列表 */
func (c *CsaClient) QueryAssetList(request *csa.QueryAssetListRequest) (*csa.QueryAssetListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryAssetListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 网络安全态势大屏Web攻击事件受影响域名查询接口 */
func (c *CsaClient) QueryAffectedDomainName(request *csa.QueryAffectedDomainNameRequest) (*csa.QueryAffectedDomainNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryAffectedDomainNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 态势感知获取大屏WebSocketToken接口 */
func (c *CsaClient) GetLargeScreenWebSocketToken(request *csa.GetLargeScreenWebSocketTokenRequest) (*csa.GetLargeScreenWebSocketTokenResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.GetLargeScreenWebSocketTokenResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量更改事件状态 */
func (c *CsaClient) BatchUpdateAlarmEventsStatus(request *csa.BatchUpdateAlarmEventsStatusRequest) (*csa.BatchUpdateAlarmEventsStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.BatchUpdateAlarmEventsStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 网络检测引擎开关接口 */
func (c *CsaClient) UpdateAssetNidsStatus(request *csa.UpdateAssetNidsStatusRequest) (*csa.UpdateAssetNidsStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.UpdateAssetNidsStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查看企业版相关信息 */
func (c *CsaClient) QueryAccountEEInfo(request *csa.QueryAccountEEInfoRequest) (*csa.QueryAccountEEInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryAccountEEInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 再次漏洞扫描接口 */
func (c *CsaClient) RescanScanVul(request *csa.RescanScanVulRequest) (*csa.RescanScanVulResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.RescanScanVulResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更改事件状态 */
func (c *CsaClient) UpdateSingleAttackStatus(request *csa.UpdateSingleAttackStatusRequest) (*csa.UpdateSingleAttackStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.UpdateSingleAttackStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询威胁事件详情接口 */
func (c *CsaClient) QueryThreatEvent(request *csa.QueryThreatEventRequest) (*csa.QueryThreatEventResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryThreatEventResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询单一攻击事件数 */
func (c *CsaClient) QuerySingleAttacksCount(request *csa.QuerySingleAttacksCountRequest) (*csa.QuerySingleAttacksCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QuerySingleAttacksCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询定向攻击事件安全事件统计接口 */
func (c *CsaClient) QueryTargetAttacksNameCountStat(request *csa.QueryTargetAttacksNameCountStatRequest) (*csa.QueryTargetAttacksNameCountStatResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryTargetAttacksNameCountStatResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 网络安全态势大屏漏洞攻击类型查询接口 */
func (c *CsaClient) QueryLeakAttackType(request *csa.QueryLeakAttackTypeRequest) (*csa.QueryLeakAttackTypeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryLeakAttackTypeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 下单升级企业版本 */
func (c *CsaClient) UpgradeEnterpriseEditionOrder(request *csa.UpgradeEnterpriseEditionOrderRequest) (*csa.UpgradeEnterpriseEditionOrderResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.UpgradeEnterpriseEditionOrderResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查看扫描漏洞数量接口 */
func (c *CsaClient) QueryScanVulCounts(request *csa.QueryScanVulCountsRequest) (*csa.QueryScanVulCountsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryScanVulCountsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询威胁事件数对比 */
func (c *CsaClient) QueryThreatEventsTrend(request *csa.QueryThreatEventsTrendRequest) (*csa.QueryThreatEventsTrendResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryThreatEventsTrendResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 态势感知大屏安全事件发展趋势查询接口 */
func (c *CsaClient) QuerySecurityEventTrend(request *csa.QuerySecurityEventTrendRequest) (*csa.QuerySecurityEventTrendResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QuerySecurityEventTrendResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 态势感知大屏Top5攻击者查询接口 */
func (c *CsaClient) QueryTopAttacker(request *csa.QueryTopAttackerRequest) (*csa.QueryTopAttackerResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryTopAttackerResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 态势感知大屏日期查询接口 */
func (c *CsaClient) QueryDateSelection(request *csa.QueryDateSelectionRequest) (*csa.QueryDateSelectionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryDateSelectionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 态势感知大屏威胁统计弱点事件统计查询接口 */
func (c *CsaClient) QueryWeaknessStatistics(request *csa.QueryWeaknessStatisticsRequest) (*csa.QueryWeaknessStatisticsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryWeaknessStatisticsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询告警事件数对比 */
func (c *CsaClient) QueryAlarmEventsTrend(request *csa.QueryAlarmEventsTrendRequest) (*csa.QueryAlarmEventsTrendResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryAlarmEventsTrendResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询漏洞资产列表 */
func (c *CsaClient) QueryWeakEventsFixedIps(request *csa.QueryWeakEventsFixedIpsRequest) (*csa.QueryWeakEventsFixedIpsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryWeakEventsFixedIpsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 态势感知大屏威胁统计告警事件统计查询接口 */
func (c *CsaClient) QueryAlertStatistics(request *csa.QueryAlertStatisticsRequest) (*csa.QueryAlertStatisticsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryAlertStatisticsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量更改事件状态 */
func (c *CsaClient) BatchUpdateThreatEventsStatus(request *csa.BatchUpdateThreatEventsStatusRequest) (*csa.BatchUpdateThreatEventsStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.BatchUpdateThreatEventsStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询企业版本下单结果 */
func (c *CsaClient) QueryOrderResult(request *csa.QueryOrderResultRequest) (*csa.QueryOrderResultResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryOrderResultResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询弱点事件数 */
func (c *CsaClient) QueryWeakEventsCount(request *csa.QueryWeakEventsCountRequest) (*csa.QueryWeakEventsCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryWeakEventsCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 总览大屏日期设置接口 */
func (c *CsaClient) SetDateSelection(request *csa.SetDateSelectionRequest) (*csa.SetDateSelectionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.SetDateSelectionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询定向攻击事件数 */
func (c *CsaClient) QueryTargetAttacksCount(request *csa.QueryTargetAttacksCountRequest) (*csa.QueryTargetAttacksCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.QueryTargetAttacksCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 验证扫描资产配置信息接口 */
func (c *CsaClient) VerifyScanAssetConfig(request *csa.VerifyScanAssetConfigRequest) (*csa.VerifyScanAssetConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &csa.VerifyScanAssetConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

