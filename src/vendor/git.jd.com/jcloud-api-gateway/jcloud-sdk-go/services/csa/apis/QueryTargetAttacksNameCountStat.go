// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    csa "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/csa/models"
)

type QueryTargetAttacksNameCountStatRequest struct {

    core.JDCloudRequest

    /* 起始时间, 毫秒时间戳。如果不传，则需要传timeSpan (Optional) */
    TimeBegin *string `json:"timeBegin"`

    /* 结束时间, 毫秒时间戳, 不传为当前时间 (Optional) */
    TimeEnd *string `json:"timeEnd"`

    /* 天数.如果timeBegin，则该参数无效 (Optional) */
    TimeSpan *int `json:"timeSpan"`

    /* 威胁模型 (Optional) */
    ThreatModel *int `json:"threatModel"`

    /* 云主机外网IP (Optional) */
    FloatingIp *string `json:"floatingIp"`

    /* 云主机内网IP (Optional) */
    FixedIp *string `json:"fixedIp"`

    /* 云主机Id (Optional) */
    ServerId *string `json:"serverId"`

    /* 云主机名称 (Optional) */
    ServerName *string `json:"serverName"`

    /* 事件等级 (Optional) */
    Severity *int `json:"severity"`

    /* 事件等级,支持多个，逗号分隔 (Optional) */
    Severities *string `json:"severities"`

    /* 事件状态, 待处理传0，完成传1,2,3 (Optional) */
    Statuses *string `json:"statuses"`

    /* 当sortBy = time时指定的间隔，取值为1h 1d 1w 1m  */
    Interval string `json:"interval"`

    /* time:按时间段聚合,data_center:数据中心名称,floatingip:外网IP,fixedip:内网IP,server_id:服务器ID,severity: 事件等级{紧急:1,常规:2},status: 事件状态 //0:待处理; 1:完成,2:忽略(必选)默认0；threatmodel: 威胁模型  */
    SortBy string `json:"sortBy"`
}

/*
 * param interval: 当sortBy = time时指定的间隔，取值为1h 1d 1w 1m (Required)
 * param sortBy: time:按时间段聚合,data_center:数据中心名称,floatingip:外网IP,fixedip:内网IP,server_id:服务器ID,severity: 事件等级{紧急:1,常规:2},status: 事件状态 //0:待处理; 1:完成,2:忽略(必选)默认0；threatmodel: 威胁模型 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewQueryTargetAttacksNameCountStatRequest(
    interval string,
    sortBy string,
) *QueryTargetAttacksNameCountStatRequest {

	return &QueryTargetAttacksNameCountStatRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/targetAttacks:queryNameCountStat",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Interval: interval,
        SortBy: sortBy,
	}
}

/*
 * param timeBegin: 起始时间, 毫秒时间戳。如果不传，则需要传timeSpan (Optional)
 * param timeEnd: 结束时间, 毫秒时间戳, 不传为当前时间 (Optional)
 * param timeSpan: 天数.如果timeBegin，则该参数无效 (Optional)
 * param threatModel: 威胁模型 (Optional)
 * param floatingIp: 云主机外网IP (Optional)
 * param fixedIp: 云主机内网IP (Optional)
 * param serverId: 云主机Id (Optional)
 * param serverName: 云主机名称 (Optional)
 * param severity: 事件等级 (Optional)
 * param severities: 事件等级,支持多个，逗号分隔 (Optional)
 * param statuses: 事件状态, 待处理传0，完成传1,2,3 (Optional)
 * param interval: 当sortBy = time时指定的间隔，取值为1h 1d 1w 1m (Required)
 * param sortBy: time:按时间段聚合,data_center:数据中心名称,floatingip:外网IP,fixedip:内网IP,server_id:服务器ID,severity: 事件等级{紧急:1,常规:2},status: 事件状态 //0:待处理; 1:完成,2:忽略(必选)默认0；threatmodel: 威胁模型 (Required)
 */
func NewQueryTargetAttacksNameCountStatRequestWithAllParams(
    timeBegin *string,
    timeEnd *string,
    timeSpan *int,
    threatModel *int,
    floatingIp *string,
    fixedIp *string,
    serverId *string,
    serverName *string,
    severity *int,
    severities *string,
    statuses *string,
    interval string,
    sortBy string,
) *QueryTargetAttacksNameCountStatRequest {

    return &QueryTargetAttacksNameCountStatRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/targetAttacks:queryNameCountStat",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        TimeBegin: timeBegin,
        TimeEnd: timeEnd,
        TimeSpan: timeSpan,
        ThreatModel: threatModel,
        FloatingIp: floatingIp,
        FixedIp: fixedIp,
        ServerId: serverId,
        ServerName: serverName,
        Severity: severity,
        Severities: severities,
        Statuses: statuses,
        Interval: interval,
        SortBy: sortBy,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewQueryTargetAttacksNameCountStatRequestWithoutParam() *QueryTargetAttacksNameCountStatRequest {

    return &QueryTargetAttacksNameCountStatRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/targetAttacks:queryNameCountStat",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param timeBegin: 起始时间, 毫秒时间戳。如果不传，则需要传timeSpan(Optional) */
func (r *QueryTargetAttacksNameCountStatRequest) SetTimeBegin(timeBegin string) {
    r.TimeBegin = &timeBegin
}

/* param timeEnd: 结束时间, 毫秒时间戳, 不传为当前时间(Optional) */
func (r *QueryTargetAttacksNameCountStatRequest) SetTimeEnd(timeEnd string) {
    r.TimeEnd = &timeEnd
}

/* param timeSpan: 天数.如果timeBegin，则该参数无效(Optional) */
func (r *QueryTargetAttacksNameCountStatRequest) SetTimeSpan(timeSpan int) {
    r.TimeSpan = &timeSpan
}

/* param threatModel: 威胁模型(Optional) */
func (r *QueryTargetAttacksNameCountStatRequest) SetThreatModel(threatModel int) {
    r.ThreatModel = &threatModel
}

/* param floatingIp: 云主机外网IP(Optional) */
func (r *QueryTargetAttacksNameCountStatRequest) SetFloatingIp(floatingIp string) {
    r.FloatingIp = &floatingIp
}

/* param fixedIp: 云主机内网IP(Optional) */
func (r *QueryTargetAttacksNameCountStatRequest) SetFixedIp(fixedIp string) {
    r.FixedIp = &fixedIp
}

/* param serverId: 云主机Id(Optional) */
func (r *QueryTargetAttacksNameCountStatRequest) SetServerId(serverId string) {
    r.ServerId = &serverId
}

/* param serverName: 云主机名称(Optional) */
func (r *QueryTargetAttacksNameCountStatRequest) SetServerName(serverName string) {
    r.ServerName = &serverName
}

/* param severity: 事件等级(Optional) */
func (r *QueryTargetAttacksNameCountStatRequest) SetSeverity(severity int) {
    r.Severity = &severity
}

/* param severities: 事件等级,支持多个，逗号分隔(Optional) */
func (r *QueryTargetAttacksNameCountStatRequest) SetSeverities(severities string) {
    r.Severities = &severities
}

/* param statuses: 事件状态, 待处理传0，完成传1,2,3(Optional) */
func (r *QueryTargetAttacksNameCountStatRequest) SetStatuses(statuses string) {
    r.Statuses = &statuses
}

/* param interval: 当sortBy = time时指定的间隔，取值为1h 1d 1w 1m(Required) */
func (r *QueryTargetAttacksNameCountStatRequest) SetInterval(interval string) {
    r.Interval = interval
}

/* param sortBy: time:按时间段聚合,data_center:数据中心名称,floatingip:外网IP,fixedip:内网IP,server_id:服务器ID,severity: 事件等级{紧急:1,常规:2},status: 事件状态 //0:待处理; 1:完成,2:忽略(必选)默认0；threatmodel: 威胁模型(Required) */
func (r *QueryTargetAttacksNameCountStatRequest) SetSortBy(sortBy string) {
    r.SortBy = sortBy
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r QueryTargetAttacksNameCountStatRequest) GetRegionId() string {
    return ""
}

type QueryTargetAttacksNameCountStatResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result QueryTargetAttacksNameCountStatResult `json:"result"`
}

type QueryTargetAttacksNameCountStatResult struct {
    Data []csa.NameCount `json:"data"`
    Message string `json:"message"`
}