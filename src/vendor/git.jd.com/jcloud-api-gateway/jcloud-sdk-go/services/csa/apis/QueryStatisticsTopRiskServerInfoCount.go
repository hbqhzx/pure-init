// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    csa "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/csa/models"
)

type QueryStatisticsTopRiskServerInfoCountRequest struct {

    core.JDCloudRequest

    /* 天数，如果timeBegin，则该参数无效 (Optional) */
    TimeSpan *int `json:"timeSpan"`

    /* 展示聚合顺序的前N个元素，相当于TopN的N。 不加size参数时，默认展示TOP 10 (Optional) */
    TopSize *int `json:"topSize"`

    /* 事件等级,支持多个，逗号分隔 (Optional) */
    Severities *string `json:"severities"`

    /* 事件类型:alarm,threat. 默认值为alarm (Optional) */
    EventType *string `json:"eventType"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewQueryStatisticsTopRiskServerInfoCountRequest(
) *QueryStatisticsTopRiskServerInfoCountRequest {

	return &QueryStatisticsTopRiskServerInfoCountRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/statistics:queryTopRiskServerInfoCount",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param timeSpan: 天数，如果timeBegin，则该参数无效 (Optional)
 * param topSize: 展示聚合顺序的前N个元素，相当于TopN的N。 不加size参数时，默认展示TOP 10 (Optional)
 * param severities: 事件等级,支持多个，逗号分隔 (Optional)
 * param eventType: 事件类型:alarm,threat. 默认值为alarm (Optional)
 */
func NewQueryStatisticsTopRiskServerInfoCountRequestWithAllParams(
    timeSpan *int,
    topSize *int,
    severities *string,
    eventType *string,
) *QueryStatisticsTopRiskServerInfoCountRequest {

    return &QueryStatisticsTopRiskServerInfoCountRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/statistics:queryTopRiskServerInfoCount",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        TimeSpan: timeSpan,
        TopSize: topSize,
        Severities: severities,
        EventType: eventType,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewQueryStatisticsTopRiskServerInfoCountRequestWithoutParam() *QueryStatisticsTopRiskServerInfoCountRequest {

    return &QueryStatisticsTopRiskServerInfoCountRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/statistics:queryTopRiskServerInfoCount",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param timeSpan: 天数，如果timeBegin，则该参数无效(Optional) */
func (r *QueryStatisticsTopRiskServerInfoCountRequest) SetTimeSpan(timeSpan int) {
    r.TimeSpan = &timeSpan
}

/* param topSize: 展示聚合顺序的前N个元素，相当于TopN的N。 不加size参数时，默认展示TOP 10(Optional) */
func (r *QueryStatisticsTopRiskServerInfoCountRequest) SetTopSize(topSize int) {
    r.TopSize = &topSize
}

/* param severities: 事件等级,支持多个，逗号分隔(Optional) */
func (r *QueryStatisticsTopRiskServerInfoCountRequest) SetSeverities(severities string) {
    r.Severities = &severities
}

/* param eventType: 事件类型:alarm,threat. 默认值为alarm(Optional) */
func (r *QueryStatisticsTopRiskServerInfoCountRequest) SetEventType(eventType string) {
    r.EventType = &eventType
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r QueryStatisticsTopRiskServerInfoCountRequest) GetRegionId() string {
    return ""
}

type QueryStatisticsTopRiskServerInfoCountResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result QueryStatisticsTopRiskServerInfoCountResult `json:"result"`
}

type QueryStatisticsTopRiskServerInfoCountResult struct {
    Detail []csa.ServerInfoCount `json:"detail"`
}