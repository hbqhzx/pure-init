// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    csa "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/csa/models"
)

type QueryAssetListRequest struct {

    core.JDCloudRequest

    /* 第几页，从1开始计数，最大值为100 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 每页显示的数目,默认为10，最大值为100 (Optional) */
    PageSize *int `json:"pageSize"`

    /* 公网Ip不为空，则公网Ip做为查询条件 (Optional) */
    FloatingIp *string `json:"floatingIp"`

    /* 公网Ip为空，内网Ip不为空，则内网Ip做为查询条件 (Optional) */
    FixedIp *string `json:"fixedIp"`

    /* 公网Ip和内网Ip为空,资产名称不为空，则资产名称做为查询条件 (Optional) */
    ServerName *string `json:"serverName"`

    /* 公网Ip,内网Ip和资产名称为空,资产Id不为空，则资产Id做为查询条件 (Optional) */
    ServerId *string `json:"serverId"`

    /* 0代表基础版本，1代表企业版本。公网Ip,内网Ip,资产名称和资产Id为空，态势感知版本不为空，则态势感知版本做为查询条件 (Optional) */
    EeVersion *int `json:"eeVersion"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewQueryAssetListRequest(
) *QueryAssetListRequest {

	return &QueryAssetListRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/queryAssetList",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param pageNumber: 第几页，从1开始计数，最大值为100 (Optional)
 * param pageSize: 每页显示的数目,默认为10，最大值为100 (Optional)
 * param floatingIp: 公网Ip不为空，则公网Ip做为查询条件 (Optional)
 * param fixedIp: 公网Ip为空，内网Ip不为空，则内网Ip做为查询条件 (Optional)
 * param serverName: 公网Ip和内网Ip为空,资产名称不为空，则资产名称做为查询条件 (Optional)
 * param serverId: 公网Ip,内网Ip和资产名称为空,资产Id不为空，则资产Id做为查询条件 (Optional)
 * param eeVersion: 0代表基础版本，1代表企业版本。公网Ip,内网Ip,资产名称和资产Id为空，态势感知版本不为空，则态势感知版本做为查询条件 (Optional)
 */
func NewQueryAssetListRequestWithAllParams(
    pageNumber *int,
    pageSize *int,
    floatingIp *string,
    fixedIp *string,
    serverName *string,
    serverId *string,
    eeVersion *int,
) *QueryAssetListRequest {

    return &QueryAssetListRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/queryAssetList",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        PageNumber: pageNumber,
        PageSize: pageSize,
        FloatingIp: floatingIp,
        FixedIp: fixedIp,
        ServerName: serverName,
        ServerId: serverId,
        EeVersion: eeVersion,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewQueryAssetListRequestWithoutParam() *QueryAssetListRequest {

    return &QueryAssetListRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/queryAssetList",
            Method:  "GET",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param pageNumber: 第几页，从1开始计数，最大值为100(Optional) */
func (r *QueryAssetListRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}

/* param pageSize: 每页显示的数目,默认为10，最大值为100(Optional) */
func (r *QueryAssetListRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

/* param floatingIp: 公网Ip不为空，则公网Ip做为查询条件(Optional) */
func (r *QueryAssetListRequest) SetFloatingIp(floatingIp string) {
    r.FloatingIp = &floatingIp
}

/* param fixedIp: 公网Ip为空，内网Ip不为空，则内网Ip做为查询条件(Optional) */
func (r *QueryAssetListRequest) SetFixedIp(fixedIp string) {
    r.FixedIp = &fixedIp
}

/* param serverName: 公网Ip和内网Ip为空,资产名称不为空，则资产名称做为查询条件(Optional) */
func (r *QueryAssetListRequest) SetServerName(serverName string) {
    r.ServerName = &serverName
}

/* param serverId: 公网Ip,内网Ip和资产名称为空,资产Id不为空，则资产Id做为查询条件(Optional) */
func (r *QueryAssetListRequest) SetServerId(serverId string) {
    r.ServerId = &serverId
}

/* param eeVersion: 0代表基础版本，1代表企业版本。公网Ip,内网Ip,资产名称和资产Id为空，态势感知版本不为空，则态势感知版本做为查询条件(Optional) */
func (r *QueryAssetListRequest) SetEeVersion(eeVersion int) {
    r.EeVersion = &eeVersion
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r QueryAssetListRequest) GetRegionId() string {
    return ""
}

type QueryAssetListResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result QueryAssetListResult `json:"result"`
}

type QueryAssetListResult struct {
    AssetList []csa.AssetList `json:"assetList"`
    TotalCount int `json:"totalCount"`
    ServerCount int `json:"serverCount"`
}