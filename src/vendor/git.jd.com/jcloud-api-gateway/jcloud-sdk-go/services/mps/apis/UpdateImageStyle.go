// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type UpdateImageStyleRequest struct {

    core.JDCloudRequest

    /* 区域ID  */
    RegionId string `json:"regionId"`

    /* Bucket名称  */
    BucketName string `json:"bucketName"`

    /* 图片样式id  */
    Id int `json:"id"`

    /* 图片样式id(readOnly) (Optional) */
    Id *int64 `json:"id"`

    /* 用户id(readOnly) (Optional) */
    UserId *string `json:"userId"`

    /* 图片样式名称 (Optional) */
    StyleName *string `json:"styleName"`

    /* 图片样式参数 (Optional) */
    Params *string `json:"params"`

    /* 图片样式参数别名 (Optional) */
    ParamAlias *string `json:"paramAlias"`

    /* 所属区域(readOnly) (Optional) */
    RegionId *string `json:"regionId"`

    /* 所属Bucket(readOnly) (Optional) */
    BucketName *string `json:"bucketName"`

    /* 图片样式状态(readOnly) (Optional) */
    Status *int `json:"status"`

    /* 修改时间(readOnly) (Optional) */
    ModifyTime *string `json:"modifyTime"`

    /* 创建时间(readOnly) (Optional) */
    CreatedTime *string `json:"createdTime"`
}

/*
 * param regionId: 区域ID (Required)
 * param bucketName: Bucket名称 (Required)
 * param id: 图片样式id (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateImageStyleRequest(
    regionId string,
    bucketName string,
    id int,
) *UpdateImageStyleRequest {

	return &UpdateImageStyleRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/buckets/{bucketName}/imageStyles/{id}",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        BucketName: bucketName,
        Id: id,
	}
}

/*
 * param regionId: 区域ID (Required)
 * param bucketName: Bucket名称 (Required)
 * param id: 图片样式id (Required)
 * param id: 图片样式id(readOnly) (Optional)
 * param userId: 用户id(readOnly) (Optional)
 * param styleName: 图片样式名称 (Optional)
 * param params: 图片样式参数 (Optional)
 * param paramAlias: 图片样式参数别名 (Optional)
 * param regionId: 所属区域(readOnly) (Optional)
 * param bucketName: 所属Bucket(readOnly) (Optional)
 * param status: 图片样式状态(readOnly) (Optional)
 * param modifyTime: 修改时间(readOnly) (Optional)
 * param createdTime: 创建时间(readOnly) (Optional)
 */
func NewUpdateImageStyleRequestWithAllParams(
    regionId string,
    bucketName string,
    id int,
    id *int64,
    userId *string,
    styleName *string,
    params *string,
    paramAlias *string,
    regionId *string,
    bucketName *string,
    status *int,
    modifyTime *string,
    createdTime *string,
) *UpdateImageStyleRequest {

    return &UpdateImageStyleRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/buckets/{bucketName}/imageStyles/{id}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        BucketName: bucketName,
        Id: id,
        Id: id,
        UserId: userId,
        StyleName: styleName,
        Params: params,
        ParamAlias: paramAlias,
        RegionId: regionId,
        BucketName: bucketName,
        Status: status,
        ModifyTime: modifyTime,
        CreatedTime: createdTime,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateImageStyleRequestWithoutParam() *UpdateImageStyleRequest {

    return &UpdateImageStyleRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/buckets/{bucketName}/imageStyles/{id}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 区域ID(Required) */
func (r *UpdateImageStyleRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param bucketName: Bucket名称(Required) */
func (r *UpdateImageStyleRequest) SetBucketName(bucketName string) {
    r.BucketName = bucketName
}

/* param id: 图片样式id(Required) */
func (r *UpdateImageStyleRequest) SetId(id int) {
    r.Id = id
}

/* param id: 图片样式id(readOnly)(Optional) */
func (r *UpdateImageStyleRequest) SetId(id int64) {
    r.Id = &id
}

/* param userId: 用户id(readOnly)(Optional) */
func (r *UpdateImageStyleRequest) SetUserId(userId string) {
    r.UserId = &userId
}

/* param styleName: 图片样式名称(Optional) */
func (r *UpdateImageStyleRequest) SetStyleName(styleName string) {
    r.StyleName = &styleName
}

/* param params: 图片样式参数(Optional) */
func (r *UpdateImageStyleRequest) SetParams(params string) {
    r.Params = &params
}

/* param paramAlias: 图片样式参数别名(Optional) */
func (r *UpdateImageStyleRequest) SetParamAlias(paramAlias string) {
    r.ParamAlias = &paramAlias
}

/* param regionId: 所属区域(readOnly)(Optional) */
func (r *UpdateImageStyleRequest) SetRegionId(regionId string) {
    r.RegionId = &regionId
}

/* param bucketName: 所属Bucket(readOnly)(Optional) */
func (r *UpdateImageStyleRequest) SetBucketName(bucketName string) {
    r.BucketName = &bucketName
}

/* param status: 图片样式状态(readOnly)(Optional) */
func (r *UpdateImageStyleRequest) SetStatus(status int) {
    r.Status = &status
}

/* param modifyTime: 修改时间(readOnly)(Optional) */
func (r *UpdateImageStyleRequest) SetModifyTime(modifyTime string) {
    r.ModifyTime = &modifyTime
}

/* param createdTime: 创建时间(readOnly)(Optional) */
func (r *UpdateImageStyleRequest) SetCreatedTime(createdTime string) {
    r.CreatedTime = &createdTime
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateImageStyleRequest) GetRegionId() string {
    return r.RegionId
}

type UpdateImageStyleResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateImageStyleResult `json:"result"`
}

type UpdateImageStyleResult struct {
}