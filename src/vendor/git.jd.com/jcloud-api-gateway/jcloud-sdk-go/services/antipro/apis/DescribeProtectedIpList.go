// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    antipro "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/antipro/models"
)

type DescribeProtectedIpListRequest struct {

    core.JDCloudRequest

    /* 页码, 默认为 1 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 分页大小, 默认为 10, 取值范围 [10, 100] (Optional) */
    PageSize *int `json:"pageSize"`

    /* 实例 Id, 缺省时查询用户所有已防护 IP (Optional) */
    InstanceId *int `json:"instanceId"`

    /* 被防护 IP类型: 0: 全部, 1: 弹性公网 IP, 2: 云物理服务器 IP  */
    Type int `json:"type"`

    /* 被防护 IP, 支持模糊查询 (Optional) */
    Ip *string `json:"ip"`
}

/*
 * param type_: 被防护 IP类型: 0: 全部, 1: 弹性公网 IP, 2: 云物理服务器 IP (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeProtectedIpListRequest(
    type_ int,
) *DescribeProtectedIpListRequest {

	return &DescribeProtectedIpListRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/describeProtectedIpList",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        Type: type_,
	}
}

/*
 * param pageNumber: 页码, 默认为 1 (Optional)
 * param pageSize: 分页大小, 默认为 10, 取值范围 [10, 100] (Optional)
 * param instanceId: 实例 Id, 缺省时查询用户所有已防护 IP (Optional)
 * param type_: 被防护 IP类型: 0: 全部, 1: 弹性公网 IP, 2: 云物理服务器 IP (Required)
 * param ip: 被防护 IP, 支持模糊查询 (Optional)
 */
func NewDescribeProtectedIpListRequestWithAllParams(
    pageNumber *int,
    pageSize *int,
    instanceId *int,
    type_ int,
    ip *string,
) *DescribeProtectedIpListRequest {

    return &DescribeProtectedIpListRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/describeProtectedIpList",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        PageNumber: pageNumber,
        PageSize: pageSize,
        InstanceId: instanceId,
        Type: type_,
        Ip: ip,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeProtectedIpListRequestWithoutParam() *DescribeProtectedIpListRequest {

    return &DescribeProtectedIpListRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/describeProtectedIpList",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param pageNumber: 页码, 默认为 1(Optional) */
func (r *DescribeProtectedIpListRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}

/* param pageSize: 分页大小, 默认为 10, 取值范围 [10, 100](Optional) */
func (r *DescribeProtectedIpListRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

/* param instanceId: 实例 Id, 缺省时查询用户所有已防护 IP(Optional) */
func (r *DescribeProtectedIpListRequest) SetInstanceId(instanceId int) {
    r.InstanceId = &instanceId
}

/* param type_: 被防护 IP类型: 0: 全部, 1: 弹性公网 IP, 2: 云物理服务器 IP(Required) */
func (r *DescribeProtectedIpListRequest) SetType(type_ int) {
    r.Type = type_
}

/* param ip: 被防护 IP, 支持模糊查询(Optional) */
func (r *DescribeProtectedIpListRequest) SetIp(ip string) {
    r.Ip = &ip
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeProtectedIpListRequest) GetRegionId() string {
    return ""
}

type DescribeProtectedIpListResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeProtectedIpListResult `json:"result"`
}

type DescribeProtectedIpListResult struct {
    DataList []antipro.ProtectedIp `json:"dataList"`
    CurrentCount int `json:"currentCount"`
    TotalCount int `json:"totalCount"`
    TotalPage int `json:"totalPage"`
}