// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type RegionExistRequest struct {

    core.JDCloudRequest

    /*   */
    RegionId string `json:"regionId"`

    /*  (Optional) */
    RegionCode *string `json:"regionCode"`

    /*  (Optional) */
    RegionName *string `json:"regionName"`
}

/*
 * param regionId:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewRegionExistRequest(
    regionId string,
) *RegionExistRequest {

	return &RegionExistRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/region:exist",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId:  (Required)
 * param regionCode:  (Optional)
 * param regionName:  (Optional)
 */
func NewRegionExistRequestWithAllParams(
    regionId string,
    regionCode *string,
    regionName *string,
) *RegionExistRequest {

    return &RegionExistRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/region:exist",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        RegionCode: regionCode,
        RegionName: regionName,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewRegionExistRequestWithoutParam() *RegionExistRequest {

    return &RegionExistRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/region:exist",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: (Required) */
func (r *RegionExistRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param regionCode: (Optional) */
func (r *RegionExistRequest) SetRegionCode(regionCode string) {
    r.RegionCode = &regionCode
}

/* param regionName: (Optional) */
func (r *RegionExistRequest) SetRegionName(regionName string) {
    r.RegionName = &regionName
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r RegionExistRequest) GetRegionId() string {
    return r.RegionId
}

type RegionExistResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result RegionExistResult `json:"result"`
}

type RegionExistResult struct {
    Result bool `json:"result"`
}