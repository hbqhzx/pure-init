// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type AddCategoryRequest struct {

    core.JDCloudRequest

    /*   */
    RegionId string `json:"regionId"`

    /*   */
    Name string `json:"name"`

    /*   */
    Code string `json:"code"`

    /*   */
    Type int `json:"type"`

    /*  (Optional) */
    Parent *int `json:"parent"`

    /*  (Optional) */
    Alias *string `json:"alias"`

    /*  (Optional) */
    Relation *string `json:"relation"`
}

/*
 * param regionId:  (Required)
 * param name:  (Required)
 * param code:  (Required)
 * param type_:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewAddCategoryRequest(
    regionId string,
    name string,
    code string,
    type_ int,
) *AddCategoryRequest {

	return &AddCategoryRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/category:add",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        Name: name,
        Code: code,
        Type: type_,
	}
}

/*
 * param regionId:  (Required)
 * param name:  (Required)
 * param code:  (Required)
 * param type_:  (Required)
 * param parent:  (Optional)
 * param alias:  (Optional)
 * param relation:  (Optional)
 */
func NewAddCategoryRequestWithAllParams(
    regionId string,
    name string,
    code string,
    type_ int,
    parent *int,
    alias *string,
    relation *string,
) *AddCategoryRequest {

    return &AddCategoryRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/category:add",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Name: name,
        Code: code,
        Type: type_,
        Parent: parent,
        Alias: alias,
        Relation: relation,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewAddCategoryRequestWithoutParam() *AddCategoryRequest {

    return &AddCategoryRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/category:add",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: (Required) */
func (r *AddCategoryRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param name: (Required) */
func (r *AddCategoryRequest) SetName(name string) {
    r.Name = name
}

/* param code: (Required) */
func (r *AddCategoryRequest) SetCode(code string) {
    r.Code = code
}

/* param type_: (Required) */
func (r *AddCategoryRequest) SetType(type_ int) {
    r.Type = type_
}

/* param parent: (Optional) */
func (r *AddCategoryRequest) SetParent(parent int) {
    r.Parent = &parent
}

/* param alias: (Optional) */
func (r *AddCategoryRequest) SetAlias(alias string) {
    r.Alias = &alias
}

/* param relation: (Optional) */
func (r *AddCategoryRequest) SetRelation(relation string) {
    r.Relation = &relation
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r AddCategoryRequest) GetRegionId() string {
    return r.RegionId
}

type AddCategoryResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result AddCategoryResult `json:"result"`
}

type AddCategoryResult struct {
    Count int `json:"count"`
}