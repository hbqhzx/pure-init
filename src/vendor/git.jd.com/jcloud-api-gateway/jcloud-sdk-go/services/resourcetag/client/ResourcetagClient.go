// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    resourcetag "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/resourcetag/apis"
    "encoding/json"
    "errors"
)

type ResourcetagClient struct {
    core.JDCloudClient
}

func NewResourcetagClient(credential *core.Credential) *ResourcetagClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("resourcetag.jdcloud-api.com")

    return &ResourcetagClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "resourcetag",
            Revision:    "0.1.3",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *ResourcetagClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *ResourcetagClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 标签列表信息 */
func (c *ResourcetagClient) DescribeTagResourcesInfo(request *resourcetag.DescribeTagResourcesInfoRequest) (*resourcetag.DescribeTagResourcesInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &resourcetag.DescribeTagResourcesInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 资源标签解绑 */
func (c *ResourcetagClient) UnTagResources(request *resourcetag.UnTagResourcesRequest) (*resourcetag.UnTagResourcesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &resourcetag.UnTagResourcesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 标签资源信息 */
func (c *ResourcetagClient) DescribeResourcesInfo(request *resourcetag.DescribeResourcesInfoRequest) (*resourcetag.DescribeResourcesInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &resourcetag.DescribeResourcesInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取标签keys */
func (c *ResourcetagClient) DescribeKeys(request *resourcetag.DescribeKeysRequest) (*resourcetag.DescribeKeysResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &resourcetag.DescribeKeysResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获得资源 jrn 与tag mapping */
func (c *ResourcetagClient) DescribeResources(request *resourcetag.DescribeResourcesRequest) (*resourcetag.DescribeResourcesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &resourcetag.DescribeResourcesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取标签values */
func (c *ResourcetagClient) DescribeValues(request *resourcetag.DescribeValuesRequest) (*resourcetag.DescribeValuesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &resourcetag.DescribeValuesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取资源标签 */
func (c *ResourcetagClient) DescribeTags(request *resourcetag.DescribeTagsRequest) (*resourcetag.DescribeTagsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &resourcetag.DescribeTagsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 对资源打标签 */
func (c *ResourcetagClient) TagResources(request *resourcetag.TagResourcesRequest) (*resourcetag.TagResourcesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &resourcetag.TagResourcesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

