// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type UpdateRegistrySpecRequest struct {

    core.JDCloudRequest

    /* 可用区id  */
    RegionId string `json:"regionId"`

    /* 实例规格主键id  */
    RegistrySpecId string `json:"registrySpecId"`

    /* 配置名称  */
    RegistrySpecName string `json:"registrySpecName"`

    /* 显示顺序，大的靠前（权重）  */
    ShowOrder int `json:"showOrder"`

    /* 实例规格  */
    InstanceSpec string `json:"instanceSpec"`

    /* manager规格  */
    FlavorManager string `json:"flavorManager"`

    /* 节点规格  */
    Flavor string `json:"flavor"`

    /* 可用区一  */
    Az1 string `json:"az1"`

    /* 可用区二  */
    Az2 string `json:"az2"`

    /* 可用区三  */
    Az3 string `json:"az3"`

    /* 可用区一数量  */
    Az1Num string `json:"az1Num"`

    /* 可用区二数量  */
    Az2Num string `json:"az2Num"`

    /* 可用区三数量  */
    Az3Num string `json:"az3Num"`
}

/*
 * param regionId: 可用区id (Required)
 * param registrySpecId: 实例规格主键id (Required)
 * param registrySpecName: 配置名称 (Required)
 * param showOrder: 显示顺序，大的靠前（权重） (Required)
 * param instanceSpec: 实例规格 (Required)
 * param flavorManager: manager规格 (Required)
 * param flavor: 节点规格 (Required)
 * param az1: 可用区一 (Required)
 * param az2: 可用区二 (Required)
 * param az3: 可用区三 (Required)
 * param az1Num: 可用区一数量 (Required)
 * param az2Num: 可用区二数量 (Required)
 * param az3Num: 可用区三数量 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateRegistrySpecRequest(
    regionId string,
    registrySpecId string,
    registrySpecName string,
    showOrder int,
    instanceSpec string,
    flavorManager string,
    flavor string,
    az1 string,
    az2 string,
    az3 string,
    az1Num string,
    az2Num string,
    az3Num string,
) *UpdateRegistrySpecRequest {

	return &UpdateRegistrySpecRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/registryspecs/{registrySpecId}",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        RegistrySpecId: registrySpecId,
        RegistrySpecName: registrySpecName,
        ShowOrder: showOrder,
        InstanceSpec: instanceSpec,
        FlavorManager: flavorManager,
        Flavor: flavor,
        Az1: az1,
        Az2: az2,
        Az3: az3,
        Az1Num: az1Num,
        Az2Num: az2Num,
        Az3Num: az3Num,
	}
}

/*
 * param regionId: 可用区id (Required)
 * param registrySpecId: 实例规格主键id (Required)
 * param registrySpecName: 配置名称 (Required)
 * param showOrder: 显示顺序，大的靠前（权重） (Required)
 * param instanceSpec: 实例规格 (Required)
 * param flavorManager: manager规格 (Required)
 * param flavor: 节点规格 (Required)
 * param az1: 可用区一 (Required)
 * param az2: 可用区二 (Required)
 * param az3: 可用区三 (Required)
 * param az1Num: 可用区一数量 (Required)
 * param az2Num: 可用区二数量 (Required)
 * param az3Num: 可用区三数量 (Required)
 */
func NewUpdateRegistrySpecRequestWithAllParams(
    regionId string,
    registrySpecId string,
    registrySpecName string,
    showOrder int,
    instanceSpec string,
    flavorManager string,
    flavor string,
    az1 string,
    az2 string,
    az3 string,
    az1Num string,
    az2Num string,
    az3Num string,
) *UpdateRegistrySpecRequest {

    return &UpdateRegistrySpecRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/registryspecs/{registrySpecId}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        RegistrySpecId: registrySpecId,
        RegistrySpecName: registrySpecName,
        ShowOrder: showOrder,
        InstanceSpec: instanceSpec,
        FlavorManager: flavorManager,
        Flavor: flavor,
        Az1: az1,
        Az2: az2,
        Az3: az3,
        Az1Num: az1Num,
        Az2Num: az2Num,
        Az3Num: az3Num,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateRegistrySpecRequestWithoutParam() *UpdateRegistrySpecRequest {

    return &UpdateRegistrySpecRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/registryspecs/{registrySpecId}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 可用区id(Required) */
func (r *UpdateRegistrySpecRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param registrySpecId: 实例规格主键id(Required) */
func (r *UpdateRegistrySpecRequest) SetRegistrySpecId(registrySpecId string) {
    r.RegistrySpecId = registrySpecId
}

/* param registrySpecName: 配置名称(Required) */
func (r *UpdateRegistrySpecRequest) SetRegistrySpecName(registrySpecName string) {
    r.RegistrySpecName = registrySpecName
}

/* param showOrder: 显示顺序，大的靠前（权重）(Required) */
func (r *UpdateRegistrySpecRequest) SetShowOrder(showOrder int) {
    r.ShowOrder = showOrder
}

/* param instanceSpec: 实例规格(Required) */
func (r *UpdateRegistrySpecRequest) SetInstanceSpec(instanceSpec string) {
    r.InstanceSpec = instanceSpec
}

/* param flavorManager: manager规格(Required) */
func (r *UpdateRegistrySpecRequest) SetFlavorManager(flavorManager string) {
    r.FlavorManager = flavorManager
}

/* param flavor: 节点规格(Required) */
func (r *UpdateRegistrySpecRequest) SetFlavor(flavor string) {
    r.Flavor = flavor
}

/* param az1: 可用区一(Required) */
func (r *UpdateRegistrySpecRequest) SetAz1(az1 string) {
    r.Az1 = az1
}

/* param az2: 可用区二(Required) */
func (r *UpdateRegistrySpecRequest) SetAz2(az2 string) {
    r.Az2 = az2
}

/* param az3: 可用区三(Required) */
func (r *UpdateRegistrySpecRequest) SetAz3(az3 string) {
    r.Az3 = az3
}

/* param az1Num: 可用区一数量(Required) */
func (r *UpdateRegistrySpecRequest) SetAz1Num(az1Num string) {
    r.Az1Num = az1Num
}

/* param az2Num: 可用区二数量(Required) */
func (r *UpdateRegistrySpecRequest) SetAz2Num(az2Num string) {
    r.Az2Num = az2Num
}

/* param az3Num: 可用区三数量(Required) */
func (r *UpdateRegistrySpecRequest) SetAz3Num(az3Num string) {
    r.Az3Num = az3Num
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateRegistrySpecRequest) GetRegionId() string {
    return r.RegionId
}

type UpdateRegistrySpecResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateRegistrySpecResult `json:"result"`
}

type UpdateRegistrySpecResult struct {
    UpdateRegistrySpecResult string `json:"updateRegistrySpecResult"`
}