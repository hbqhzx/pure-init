// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type UpdateTaskRequest struct {

    core.JDCloudRequest

    /* 可用区id  */
    RegionId string `json:"regionId"`

    /* 主键Id  */
    TaskId int `json:"taskId"`

    /* cron 表达式  */
    CronExpression string `json:"cronExpression"`

    /* 任务描述  */
    Description string `json:"description"`

    /* 任务类型  */
    TaskType string `json:"taskType"`
}

/*
 * param regionId: 可用区id (Required)
 * param taskId: 主键Id (Required)
 * param cronExpression: cron 表达式 (Required)
 * param description: 任务描述 (Required)
 * param taskType: 任务类型 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateTaskRequest(
    regionId string,
    taskId int,
    cronExpression string,
    description string,
    taskType string,
) *UpdateTaskRequest {

	return &UpdateTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/scheduled_tasks/{taskId}",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        TaskId: taskId,
        CronExpression: cronExpression,
        Description: description,
        TaskType: taskType,
	}
}

/*
 * param regionId: 可用区id (Required)
 * param taskId: 主键Id (Required)
 * param cronExpression: cron 表达式 (Required)
 * param description: 任务描述 (Required)
 * param taskType: 任务类型 (Required)
 */
func NewUpdateTaskRequestWithAllParams(
    regionId string,
    taskId int,
    cronExpression string,
    description string,
    taskType string,
) *UpdateTaskRequest {

    return &UpdateTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/scheduled_tasks/{taskId}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        TaskId: taskId,
        CronExpression: cronExpression,
        Description: description,
        TaskType: taskType,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateTaskRequestWithoutParam() *UpdateTaskRequest {

    return &UpdateTaskRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/scheduled_tasks/{taskId}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 可用区id(Required) */
func (r *UpdateTaskRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param taskId: 主键Id(Required) */
func (r *UpdateTaskRequest) SetTaskId(taskId int) {
    r.TaskId = taskId
}

/* param cronExpression: cron 表达式(Required) */
func (r *UpdateTaskRequest) SetCronExpression(cronExpression string) {
    r.CronExpression = cronExpression
}

/* param description: 任务描述(Required) */
func (r *UpdateTaskRequest) SetDescription(description string) {
    r.Description = description
}

/* param taskType: 任务类型(Required) */
func (r *UpdateTaskRequest) SetTaskType(taskType string) {
    r.TaskType = taskType
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateTaskRequest) GetRegionId() string {
    return r.RegionId
}

type UpdateTaskResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateTaskResult `json:"result"`
}

type UpdateTaskResult struct {
    UpdateStatus string `json:"updateStatus"`
}