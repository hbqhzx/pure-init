// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    jdsfadmin "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/jdsfadmin/apis"
    "encoding/json"
    "errors"
)

type JdsfadminClient struct {
    core.JDCloudClient
}

func NewJdsfadminClient(credential *core.Credential) *JdsfadminClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("jdsfadmin.jdcloud-api.com")

    return &JdsfadminClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "jdsfadmin",
            Revision:    "0.1.0",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *JdsfadminClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *JdsfadminClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 更新产品线区域对应信息，最终只能更新描述信息和名称需要注意 */
func (c *JdsfadminClient) UpdateProductRegion(request *jdsfadmin.UpdateProductRegionRequest) (*jdsfadmin.UpdateProductRegionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.UpdateProductRegionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取调用链实例规格列表 */
func (c *JdsfadminClient) DescribeTraceSpecs(request *jdsfadmin.DescribeTraceSpecsRequest) (*jdsfadmin.DescribeTraceSpecsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeTraceSpecsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建设置信息 */
func (c *JdsfadminClient) CreateSettings(request *jdsfadmin.CreateSettingsRequest) (*jdsfadmin.CreateSettingsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.CreateSettingsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除设置信息 */
func (c *JdsfadminClient) DeleteSettings(request *jdsfadmin.DeleteSettingsRequest) (*jdsfadmin.DeleteSettingsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DeleteSettingsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新白名单用户限额 */
func (c *JdsfadminClient) UpdatePersonLimit(request *jdsfadmin.UpdatePersonLimitRequest) (*jdsfadmin.UpdatePersonLimitResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.UpdatePersonLimitResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取jdsf 服务所有的可用区信息 */
func (c *JdsfadminClient) DescribeRegions(request *jdsfadmin.DescribeRegionsRequest) (*jdsfadmin.DescribeRegionsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeRegionsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建配置信息 */
func (c *JdsfadminClient) CreateTraceConfig(request *jdsfadmin.CreateTraceConfigRequest) (*jdsfadmin.CreateTraceConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.CreateTraceConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 分页查询定时任务日志列表(默认按执行时间倒叙) */
func (c *JdsfadminClient) GetTaskLogList(request *jdsfadmin.GetTaskLogListRequest) (*jdsfadmin.GetTaskLogListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.GetTaskLogListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 开启定时任务 */
func (c *JdsfadminClient) StartTask(request *jdsfadmin.StartTaskRequest) (*jdsfadmin.StartTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.StartTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取产品线默认创建限额列表 */
func (c *JdsfadminClient) DescribeLimits(request *jdsfadmin.DescribeLimitsRequest) (*jdsfadmin.DescribeLimitsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeLimitsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取所有的链路跟踪配置信息 */
func (c *JdsfadminClient) DescribeTraceConfigs(request *jdsfadmin.DescribeTraceConfigsRequest) (*jdsfadmin.DescribeTraceConfigsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeTraceConfigsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据regionId 更新region 详情 */
func (c *JdsfadminClient) UpdateRegion(request *jdsfadmin.UpdateRegionRequest) (*jdsfadmin.UpdateRegionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.UpdateRegionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取定时任务作业路径列表 */
func (c *JdsfadminClient) DescribeTasksJobs(request *jdsfadmin.DescribeTasksJobsRequest) (*jdsfadmin.DescribeTasksJobsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeTasksJobsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取jdsf定义的产品线区域信息 */
func (c *JdsfadminClient) DescribeProductRegions(request *jdsfadmin.DescribeProductRegionsRequest) (*jdsfadmin.DescribeProductRegionsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeProductRegionsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建产品线区域对应信息 */
func (c *JdsfadminClient) CreateProductRegions(request *jdsfadmin.CreateProductRegionsRequest) (*jdsfadmin.CreateProductRegionsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.CreateProductRegionsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取注册中心实例详细信息 */
func (c *JdsfadminClient) DescribeRegistryDetail(request *jdsfadmin.DescribeRegistryDetailRequest) (*jdsfadmin.DescribeRegistryDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeRegistryDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取调用链集群信息列表 */
func (c *JdsfadminClient) DescribeTraceClusters(request *jdsfadmin.DescribeTraceClustersRequest) (*jdsfadmin.DescribeTraceClustersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeTraceClustersResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 标记删除产品线 region 对应信息 */
func (c *JdsfadminClient) DeleteProductRegion(request *jdsfadmin.DeleteProductRegionRequest) (*jdsfadmin.DeleteProductRegionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DeleteProductRegionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 分页查询定时任务列表 */
func (c *JdsfadminClient) DescribeTasks(request *jdsfadmin.DescribeTasksRequest) (*jdsfadmin.DescribeTasksResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeTasksResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建实例规格配置 */
func (c *JdsfadminClient) CreateRegistrySpec(request *jdsfadmin.CreateRegistrySpecRequest) (*jdsfadmin.CreateRegistrySpecResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.CreateRegistrySpecResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取注册中心配置列表 */
func (c *JdsfadminClient) DescribeRegistrySpecs(request *jdsfadmin.DescribeRegistrySpecsRequest) (*jdsfadmin.DescribeRegistrySpecsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeRegistrySpecsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取用户资源限制白名单 */
func (c *JdsfadminClient) GetWhiteList(request *jdsfadmin.GetWhiteListRequest) (*jdsfadmin.GetWhiteListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.GetWhiteListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除实例规格配置信息 */
func (c *JdsfadminClient) DeleteRegistrySpec(request *jdsfadmin.DeleteRegistrySpecRequest) (*jdsfadmin.DeleteRegistrySpecResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DeleteRegistrySpecResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取集群信息列表 */
func (c *JdsfadminClient) DescriptionRegistries(request *jdsfadmin.DescriptionRegistriesRequest) (*jdsfadmin.DescriptionRegistriesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescriptionRegistriesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据settingkey 获取设置的详细信息 */
func (c *JdsfadminClient) DescribeSetting(request *jdsfadmin.DescribeSettingRequest) (*jdsfadmin.DescribeSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取RegionStatusType 详情 */
func (c *JdsfadminClient) DescribeRegionStatus(request *jdsfadmin.DescribeRegionStatusRequest) (*jdsfadmin.DescribeRegionStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeRegionStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新设置信息 */
func (c *JdsfadminClient) UpdateSettings(request *jdsfadmin.UpdateSettingsRequest) (*jdsfadmin.UpdateSettingsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.UpdateSettingsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取jdsf定义的产品线信息 */
func (c *JdsfadminClient) DescribeProductLines(request *jdsfadmin.DescribeProductLinesRequest) (*jdsfadmin.DescribeProductLinesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeProductLinesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 增加个人资源限制白名单用户 */
func (c *JdsfadminClient) AddPerson(request *jdsfadmin.AddPersonRequest) (*jdsfadmin.AddPersonResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.AddPersonResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取所有节点规格 */
func (c *JdsfadminClient) GetNodeSpecList(request *jdsfadmin.GetNodeSpecListRequest) (*jdsfadmin.GetNodeSpecListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.GetNodeSpecListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新定时任务 */
func (c *JdsfadminClient) UpdateTask(request *jdsfadmin.UpdateTaskRequest) (*jdsfadmin.UpdateTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.UpdateTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取定时任务类型 */
func (c *JdsfadminClient) DescribeTasksTypes(request *jdsfadmin.DescribeTasksTypesRequest) (*jdsfadmin.DescribeTasksTypesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeTasksTypesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新实例规格配置 */
func (c *JdsfadminClient) UpdateRegistrySpec(request *jdsfadmin.UpdateRegistrySpecRequest) (*jdsfadmin.UpdateRegistrySpecResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.UpdateRegistrySpecResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新配置信息 */
func (c *JdsfadminClient) UpdateTraceConfig(request *jdsfadmin.UpdateTraceConfigRequest) (*jdsfadmin.UpdateTraceConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.UpdateTraceConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取全部实例规格列表 */
func (c *JdsfadminClient) DescribeInstanceSpecs(request *jdsfadmin.DescribeInstanceSpecsRequest) (*jdsfadmin.DescribeInstanceSpecsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeInstanceSpecsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取注册中心实例详细信息 */
func (c *JdsfadminClient) DescribeTraceCluster(request *jdsfadmin.DescribeTraceClusterRequest) (*jdsfadmin.DescribeTraceClusterResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeTraceClusterResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取实例规格配置信息 */
func (c *JdsfadminClient) DescribeRegistrySpec(request *jdsfadmin.DescribeRegistrySpecRequest) (*jdsfadmin.DescribeRegistrySpecResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeRegistrySpecResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 增加定时任务 */
func (c *JdsfadminClient) CreateTask(request *jdsfadmin.CreateTaskRequest) (*jdsfadmin.CreateTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.CreateTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除调用链配置信息（标记删除） */
func (c *JdsfadminClient) DeleteTraceConfig(request *jdsfadmin.DeleteTraceConfigRequest) (*jdsfadmin.DeleteTraceConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DeleteTraceConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除用户注册中心集群（真的从数据库删除数据，操作前需要进行确认，后续增加判断逻辑）正在运行的集群和正在扩容的集群无法删除 */
func (c *JdsfadminClient) DeleteRegistry(request *jdsfadmin.DeleteRegistryRequest) (*jdsfadmin.DeleteRegistryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DeleteRegistryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建可用区 */
func (c *JdsfadminClient) CreateRegion(request *jdsfadmin.CreateRegionRequest) (*jdsfadmin.CreateRegionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.CreateRegionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取所有节点规格 */
func (c *JdsfadminClient) DescribeESNodeSpecs(request *jdsfadmin.DescribeESNodeSpecsRequest) (*jdsfadmin.DescribeESNodeSpecsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeESNodeSpecsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 关闭定时任务 */
func (c *JdsfadminClient) StopTask(request *jdsfadmin.StopTaskRequest) (*jdsfadmin.StopTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.StopTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取jdsf定义的产品线区域信息 */
func (c *JdsfadminClient) DescribeProductRegion(request *jdsfadmin.DescribeProductRegionRequest) (*jdsfadmin.DescribeProductRegionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeProductRegionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新生产线默认资源数限制 */
func (c *JdsfadminClient) UpdateProductLimit(request *jdsfadmin.UpdateProductLimitRequest) (*jdsfadmin.UpdateProductLimitResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.UpdateProductLimitResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除白名单用户 */
func (c *JdsfadminClient) DeletePerson(request *jdsfadmin.DeletePersonRequest) (*jdsfadmin.DeletePersonResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DeletePersonResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据主键删除 region */
func (c *JdsfadminClient) DeleteRegion(request *jdsfadmin.DeleteRegionRequest) (*jdsfadmin.DeleteRegionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DeleteRegionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 分页查询用户操作日志列表(默认按执行时间倒叙) */
func (c *JdsfadminClient) GetOperationLogList(request *jdsfadmin.GetOperationLogListRequest) (*jdsfadmin.GetOperationLogListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.GetOperationLogListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除用户注册中心集群（真的从数据库删除数据，操作前需要进行确认，后续增加判断逻辑）正在运行的集群和正在扩容的集群无法删除 */
func (c *JdsfadminClient) DeleteTraceCluster(request *jdsfadmin.DeleteTraceClusterRequest) (*jdsfadmin.DeleteTraceClusterResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DeleteTraceClusterResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取所有的settings 详细信息 */
func (c *JdsfadminClient) DescribeSettings(request *jdsfadmin.DescribeSettingsRequest) (*jdsfadmin.DescribeSettingsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeSettingsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取jdsf 服务所有的可用区信息 */
func (c *JdsfadminClient) GetAvailabilityZones(request *jdsfadmin.GetAvailabilityZonesRequest) (*jdsfadmin.GetAvailabilityZonesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.GetAvailabilityZonesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据链路跟踪配置 id 获取配置信息 */
func (c *JdsfadminClient) DescribeTraceConfig(request *jdsfadmin.DescribeTraceConfigRequest) (*jdsfadmin.DescribeTraceConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeTraceConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据主键获取可用区详情 */
func (c *JdsfadminClient) DescribeRegion(request *jdsfadmin.DescribeRegionRequest) (*jdsfadmin.DescribeRegionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeRegionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询定时任务详情 */
func (c *JdsfadminClient) DescribeTask(request *jdsfadmin.DescribeTaskRequest) (*jdsfadmin.DescribeTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdsfadmin.DescribeTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

