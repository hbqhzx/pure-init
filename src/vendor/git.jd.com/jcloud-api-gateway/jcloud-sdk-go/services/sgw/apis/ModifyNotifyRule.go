// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    sgw "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/sgw/models"
)

type ModifyNotifyRuleRequest struct {

    core.JDCloudRequest

    /* 规则 Id  */
    RuleId string `json:"ruleId"`

    /* 告警方式、联系人、是否禁用。  */
    NotifyRule *sgw.NotifyRule `json:"notifyRule"`
}

/*
 * param ruleId: 规则 Id (Required)
 * param notifyRule: 告警方式、联系人、是否禁用。 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewModifyNotifyRuleRequest(
    ruleId string,
    notifyRule *sgw.NotifyRule,
) *ModifyNotifyRuleRequest {

	return &ModifyNotifyRuleRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/alarmNotifyRules/{ruleId}",
			Method:  "PATCH",
			Header:  nil,
			Version: "v1",
		},
        RuleId: ruleId,
        NotifyRule: notifyRule,
	}
}

/*
 * param ruleId: 规则 Id (Required)
 * param notifyRule: 告警方式、联系人、是否禁用。 (Required)
 */
func NewModifyNotifyRuleRequestWithAllParams(
    ruleId string,
    notifyRule *sgw.NotifyRule,
) *ModifyNotifyRuleRequest {

    return &ModifyNotifyRuleRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/alarmNotifyRules/{ruleId}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
        RuleId: ruleId,
        NotifyRule: notifyRule,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewModifyNotifyRuleRequestWithoutParam() *ModifyNotifyRuleRequest {

    return &ModifyNotifyRuleRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/alarmNotifyRules/{ruleId}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param ruleId: 规则 Id(Required) */
func (r *ModifyNotifyRuleRequest) SetRuleId(ruleId string) {
    r.RuleId = ruleId
}

/* param notifyRule: 告警方式、联系人、是否禁用。(Required) */
func (r *ModifyNotifyRuleRequest) SetNotifyRule(notifyRule *sgw.NotifyRule) {
    r.NotifyRule = notifyRule
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ModifyNotifyRuleRequest) GetRegionId() string {
    return ""
}

type ModifyNotifyRuleResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ModifyNotifyRuleResult `json:"result"`
}

type ModifyNotifyRuleResult struct {
}