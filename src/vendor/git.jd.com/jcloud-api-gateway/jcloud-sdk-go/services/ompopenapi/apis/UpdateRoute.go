// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type UpdateRouteRequest struct {

    core.JDCloudRequest

    /* 转发规则ID  */
    Id int `json:"id"`

    /* 转发规则名称  */
    Name string `json:"name"`

    /* 网关域名或地址 (Optional) */
    Host *string `json:"host"`

    /* 业务线名称  */
    ServiceName string `json:"serviceName"`

    /* 请求路径  */
    Uris string `json:"uris"`

    /* 后端地址  */
    UpstreamUrl string `json:"upstreamUrl"`

    /* 是否开启后端签名  */
    BackendSign bool `json:"backendSign"`

    /* 区域ID  */
    RegionId string `json:"regionId"`
}

/*
 * param id: 转发规则ID (Required)
 * param name: 转发规则名称 (Required)
 * param serviceName: 业务线名称 (Required)
 * param uris: 请求路径 (Required)
 * param upstreamUrl: 后端地址 (Required)
 * param backendSign: 是否开启后端签名 (Required)
 * param regionId: 区域ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateRouteRequest(
    id int,
    name string,
    serviceName string,
    uris string,
    upstreamUrl string,
    backendSign bool,
    regionId string,
) *UpdateRouteRequest {

	return &UpdateRouteRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/routes",
			Method:  "PATCH",
			Header:  nil,
			Version: "v1",
		},
        Id: id,
        Name: name,
        ServiceName: serviceName,
        Uris: uris,
        UpstreamUrl: upstreamUrl,
        BackendSign: backendSign,
        RegionId: regionId,
	}
}

/*
 * param id: 转发规则ID (Required)
 * param name: 转发规则名称 (Required)
 * param host: 网关域名或地址 (Optional)
 * param serviceName: 业务线名称 (Required)
 * param uris: 请求路径 (Required)
 * param upstreamUrl: 后端地址 (Required)
 * param backendSign: 是否开启后端签名 (Required)
 * param regionId: 区域ID (Required)
 */
func NewUpdateRouteRequestWithAllParams(
    id int,
    name string,
    host *string,
    serviceName string,
    uris string,
    upstreamUrl string,
    backendSign bool,
    regionId string,
) *UpdateRouteRequest {

    return &UpdateRouteRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/routes",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
        Id: id,
        Name: name,
        Host: host,
        ServiceName: serviceName,
        Uris: uris,
        UpstreamUrl: upstreamUrl,
        BackendSign: backendSign,
        RegionId: regionId,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateRouteRequestWithoutParam() *UpdateRouteRequest {

    return &UpdateRouteRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/routes",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param id: 转发规则ID(Required) */
func (r *UpdateRouteRequest) SetId(id int) {
    r.Id = id
}

/* param name: 转发规则名称(Required) */
func (r *UpdateRouteRequest) SetName(name string) {
    r.Name = name
}

/* param host: 网关域名或地址(Optional) */
func (r *UpdateRouteRequest) SetHost(host string) {
    r.Host = &host
}

/* param serviceName: 业务线名称(Required) */
func (r *UpdateRouteRequest) SetServiceName(serviceName string) {
    r.ServiceName = serviceName
}

/* param uris: 请求路径(Required) */
func (r *UpdateRouteRequest) SetUris(uris string) {
    r.Uris = uris
}

/* param upstreamUrl: 后端地址(Required) */
func (r *UpdateRouteRequest) SetUpstreamUrl(upstreamUrl string) {
    r.UpstreamUrl = upstreamUrl
}

/* param backendSign: 是否开启后端签名(Required) */
func (r *UpdateRouteRequest) SetBackendSign(backendSign bool) {
    r.BackendSign = backendSign
}

/* param regionId: 区域ID(Required) */
func (r *UpdateRouteRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateRouteRequest) GetRegionId() string {
    return ""
}

type UpdateRouteResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateRouteResult `json:"result"`
}

type UpdateRouteResult struct {
    Name string `json:"name"`
}