// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type UpdateDashboardRequest struct {

    core.JDCloudRequest

    /*  (Optional) */
    DashboardId *string `json:"dashboardId"`

    /*  (Optional) */
    Focused *string `json:"focused"`

    /*  (Optional) */
    Name *string `json:"name"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateDashboardRequest(
) *UpdateDashboardRequest {

	return &UpdateDashboardRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/dashboard",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param dashboardId:  (Optional)
 * param focused:  (Optional)
 * param name:  (Optional)
 */
func NewUpdateDashboardRequestWithAllParams(
    dashboardId *string,
    focused *string,
    name *string,
) *UpdateDashboardRequest {

    return &UpdateDashboardRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/dashboard",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        DashboardId: dashboardId,
        Focused: focused,
        Name: name,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateDashboardRequestWithoutParam() *UpdateDashboardRequest {

    return &UpdateDashboardRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/dashboard",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param dashboardId: (Optional) */
func (r *UpdateDashboardRequest) SetDashboardId(dashboardId string) {
    r.DashboardId = &dashboardId
}

/* param focused: (Optional) */
func (r *UpdateDashboardRequest) SetFocused(focused string) {
    r.Focused = &focused
}

/* param name: (Optional) */
func (r *UpdateDashboardRequest) SetName(name string) {
    r.Name = &name
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateDashboardRequest) GetRegionId() string {
    return ""
}

type UpdateDashboardResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateDashboardResult `json:"result"`
}

type UpdateDashboardResult struct {
    Suc bool `json:"suc"`
}