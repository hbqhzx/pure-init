// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    monitor "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/monitor/models"
)

type GetWidgetDataPointsRequest struct {

    core.JDCloudRequest

    /*  (Optional) */
    Aggregated *string `json:"aggregated"`

    /*  (Optional) */
    CreatedTime *int64 `json:"createdTime"`

    /*  (Optional) */
    DashboardId *string `json:"dashboardId"`

    /*  (Optional) */
    EndTime *string `json:"endTime"`

    /* name为widgetId - 多个图表的id (Optional) */
    Filters []monitor.Filter `json:"filters"`

    /*  (Optional) */
    Metrics []monitor.WidgetMetric `json:"metrics"`

    /*  (Optional) */
    Name *string `json:"name"`

    /*  (Optional) */
    Position *monitor.WidgetPosition `json:"position"`

    /*  (Optional) */
    Resources *monitor.WidgetResources `json:"resources"`

    /*  (Optional) */
    ServiceCode *string `json:"serviceCode"`

    /*  (Optional) */
    StartTime *string `json:"startTime"`

    /*  (Optional) */
    TopN *int `json:"topN"`

    /*  (Optional) */
    Type *string `json:"type"`

    /*  (Optional) */
    UpdatedTime *int64 `json:"updatedTime"`

    /*  (Optional) */
    WidgetId []string `json:"widgetId"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewGetWidgetDataPointsRequest(
) *GetWidgetDataPointsRequest {

	return &GetWidgetDataPointsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/widgetDataPoints",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param aggregated:  (Optional)
 * param createdTime:  (Optional)
 * param dashboardId:  (Optional)
 * param endTime:  (Optional)
 * param filters: name为widgetId - 多个图表的id (Optional)
 * param metrics:  (Optional)
 * param name:  (Optional)
 * param position:  (Optional)
 * param resources:  (Optional)
 * param serviceCode:  (Optional)
 * param startTime:  (Optional)
 * param topN:  (Optional)
 * param type_:  (Optional)
 * param updatedTime:  (Optional)
 * param widgetId:  (Optional)
 */
func NewGetWidgetDataPointsRequestWithAllParams(
    aggregated *string,
    createdTime *int64,
    dashboardId *string,
    endTime *string,
    filters []monitor.Filter,
    metrics []monitor.WidgetMetric,
    name *string,
    position *monitor.WidgetPosition,
    resources *monitor.WidgetResources,
    serviceCode *string,
    startTime *string,
    topN *int,
    type_ *string,
    updatedTime *int64,
    widgetId []string,
) *GetWidgetDataPointsRequest {

    return &GetWidgetDataPointsRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/widgetDataPoints",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Aggregated: aggregated,
        CreatedTime: createdTime,
        DashboardId: dashboardId,
        EndTime: endTime,
        Filters: filters,
        Metrics: metrics,
        Name: name,
        Position: position,
        Resources: resources,
        ServiceCode: serviceCode,
        StartTime: startTime,
        TopN: topN,
        Type: type_,
        UpdatedTime: updatedTime,
        WidgetId: widgetId,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewGetWidgetDataPointsRequestWithoutParam() *GetWidgetDataPointsRequest {

    return &GetWidgetDataPointsRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/widgetDataPoints",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param aggregated: (Optional) */
func (r *GetWidgetDataPointsRequest) SetAggregated(aggregated string) {
    r.Aggregated = &aggregated
}

/* param createdTime: (Optional) */
func (r *GetWidgetDataPointsRequest) SetCreatedTime(createdTime int64) {
    r.CreatedTime = &createdTime
}

/* param dashboardId: (Optional) */
func (r *GetWidgetDataPointsRequest) SetDashboardId(dashboardId string) {
    r.DashboardId = &dashboardId
}

/* param endTime: (Optional) */
func (r *GetWidgetDataPointsRequest) SetEndTime(endTime string) {
    r.EndTime = &endTime
}

/* param filters: name为widgetId - 多个图表的id(Optional) */
func (r *GetWidgetDataPointsRequest) SetFilters(filters []monitor.Filter) {
    r.Filters = filters
}

/* param metrics: (Optional) */
func (r *GetWidgetDataPointsRequest) SetMetrics(metrics []monitor.WidgetMetric) {
    r.Metrics = metrics
}

/* param name: (Optional) */
func (r *GetWidgetDataPointsRequest) SetName(name string) {
    r.Name = &name
}

/* param position: (Optional) */
func (r *GetWidgetDataPointsRequest) SetPosition(position *monitor.WidgetPosition) {
    r.Position = position
}

/* param resources: (Optional) */
func (r *GetWidgetDataPointsRequest) SetResources(resources *monitor.WidgetResources) {
    r.Resources = resources
}

/* param serviceCode: (Optional) */
func (r *GetWidgetDataPointsRequest) SetServiceCode(serviceCode string) {
    r.ServiceCode = &serviceCode
}

/* param startTime: (Optional) */
func (r *GetWidgetDataPointsRequest) SetStartTime(startTime string) {
    r.StartTime = &startTime
}

/* param topN: (Optional) */
func (r *GetWidgetDataPointsRequest) SetTopN(topN int) {
    r.TopN = &topN
}

/* param type_: (Optional) */
func (r *GetWidgetDataPointsRequest) SetType(type_ string) {
    r.Type = &type_
}

/* param updatedTime: (Optional) */
func (r *GetWidgetDataPointsRequest) SetUpdatedTime(updatedTime int64) {
    r.UpdatedTime = &updatedTime
}

/* param widgetId: (Optional) */
func (r *GetWidgetDataPointsRequest) SetWidgetId(widgetId []string) {
    r.WidgetId = widgetId
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r GetWidgetDataPointsRequest) GetRegionId() string {
    return ""
}

type GetWidgetDataPointsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result GetWidgetDataPointsResult `json:"result"`
}

type GetWidgetDataPointsResult struct {
    List []monitor.WidgetDataPointItem `json:"list"`
}