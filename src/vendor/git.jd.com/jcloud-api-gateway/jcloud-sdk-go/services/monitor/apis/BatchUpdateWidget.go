// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    monitor "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/monitor/models"
)

type BatchUpdateWidgetRequest struct {

    core.JDCloudRequest

    /*  (Optional) */
    List []monitor.Widget `json:"list"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewBatchUpdateWidgetRequest(
) *BatchUpdateWidgetRequest {

	return &BatchUpdateWidgetRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/widget:batchUpdate",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param list:  (Optional)
 */
func NewBatchUpdateWidgetRequestWithAllParams(
    list []monitor.Widget,
) *BatchUpdateWidgetRequest {

    return &BatchUpdateWidgetRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/widget:batchUpdate",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        List: list,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewBatchUpdateWidgetRequestWithoutParam() *BatchUpdateWidgetRequest {

    return &BatchUpdateWidgetRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/widget:batchUpdate",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param list: (Optional) */
func (r *BatchUpdateWidgetRequest) SetList(list []monitor.Widget) {
    r.List = list
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r BatchUpdateWidgetRequest) GetRegionId() string {
    return ""
}

type BatchUpdateWidgetResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result BatchUpdateWidgetResult `json:"result"`
}

type BatchUpdateWidgetResult struct {
    Errors []monitor.BatchUpdateWidgetError `json:"errors"`
    Suc int64 `json:"suc"`
}