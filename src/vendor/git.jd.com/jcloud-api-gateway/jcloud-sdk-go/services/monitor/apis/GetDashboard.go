// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    monitor "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/monitor/models"
)

type GetDashboardRequest struct {

    core.JDCloudRequest

    /*  (Optional) */
    Name *string `json:"name"`

    /*  (Optional) */
    Focused *string `json:"focused"`

    /*  (Optional) */
    PageNo *int `json:"pageNo"`

    /*  (Optional) */
    PageSize *int `json:"pageSize"`

    /*  (Optional) */
    CreatedTimeOrder *string `json:"createdTimeOrder"`

    /*  (Optional) */
    UpdatedTimeOrder *string `json:"updatedTimeOrder"`

    /*  (Optional) */
    FocusedOrder *string `json:"focusedOrder"`

    /* name为dashboardId - 多个dashboard的id (Optional) */
    Filters []monitor.Filter `json:"filters"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewGetDashboardRequest(
) *GetDashboardRequest {

	return &GetDashboardRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/dashboard",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param name:  (Optional)
 * param focused:  (Optional)
 * param pageNo:  (Optional)
 * param pageSize:  (Optional)
 * param createdTimeOrder:  (Optional)
 * param updatedTimeOrder:  (Optional)
 * param focusedOrder:  (Optional)
 * param filters: name为dashboardId - 多个dashboard的id (Optional)
 */
func NewGetDashboardRequestWithAllParams(
    name *string,
    focused *string,
    pageNo *int,
    pageSize *int,
    createdTimeOrder *string,
    updatedTimeOrder *string,
    focusedOrder *string,
    filters []monitor.Filter,
) *GetDashboardRequest {

    return &GetDashboardRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/dashboard",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        Name: name,
        Focused: focused,
        PageNo: pageNo,
        PageSize: pageSize,
        CreatedTimeOrder: createdTimeOrder,
        UpdatedTimeOrder: updatedTimeOrder,
        FocusedOrder: focusedOrder,
        Filters: filters,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewGetDashboardRequestWithoutParam() *GetDashboardRequest {

    return &GetDashboardRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/dashboard",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param name: (Optional) */
func (r *GetDashboardRequest) SetName(name string) {
    r.Name = &name
}

/* param focused: (Optional) */
func (r *GetDashboardRequest) SetFocused(focused string) {
    r.Focused = &focused
}

/* param pageNo: (Optional) */
func (r *GetDashboardRequest) SetPageNo(pageNo int) {
    r.PageNo = &pageNo
}

/* param pageSize: (Optional) */
func (r *GetDashboardRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

/* param createdTimeOrder: (Optional) */
func (r *GetDashboardRequest) SetCreatedTimeOrder(createdTimeOrder string) {
    r.CreatedTimeOrder = &createdTimeOrder
}

/* param updatedTimeOrder: (Optional) */
func (r *GetDashboardRequest) SetUpdatedTimeOrder(updatedTimeOrder string) {
    r.UpdatedTimeOrder = &updatedTimeOrder
}

/* param focusedOrder: (Optional) */
func (r *GetDashboardRequest) SetFocusedOrder(focusedOrder string) {
    r.FocusedOrder = &focusedOrder
}

/* param filters: name为dashboardId - 多个dashboard的id(Optional) */
func (r *GetDashboardRequest) SetFilters(filters []monitor.Filter) {
    r.Filters = filters
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r GetDashboardRequest) GetRegionId() string {
    return ""
}

type GetDashboardResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result GetDashboardResult `json:"result"`
}

type GetDashboardResult struct {
    Dashboards []monitor.Dashboard `json:"dashboards"`
    TotalCount int64 `json:"totalCount"`
}