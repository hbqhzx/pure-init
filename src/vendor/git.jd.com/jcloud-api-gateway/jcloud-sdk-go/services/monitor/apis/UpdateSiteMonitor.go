// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    monitor "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/monitor/models"
)

type UpdateSiteMonitorRequest struct {

    core.JDCloudRequest

    /*  (Optional) */
    Address *string `json:"address"`

    /*  (Optional) */
    AdvanceChecked *string `json:"advanceChecked"`

    /*  (Optional) */
    CreatedTime *int64 `json:"createdTime"`

    /*  (Optional) */
    Cycle *int64 `json:"cycle"`

    /*  (Optional) */
    DefaultSource *string `json:"defaultSource"`

    /*  (Optional) */
    Enabled *string `json:"enabled"`

    /*  (Optional) */
    HawkeyeId *int64 `json:"hawkeyeId"`

    /*  (Optional) */
    HttpOption *monitor.SiteMonitorHttpOption `json:"httpOption"`

    /*  (Optional) */
    Id *string `json:"id"`

    /*  (Optional) */
    IsDeleted *string `json:"isDeleted"`

    /*  (Optional) */
    Name *string `json:"name"`

    /*  (Optional) */
    Pin *string `json:"pin"`

    /*  (Optional) */
    Port *string `json:"port"`

    /*  (Optional) */
    Source []monitor.SiteMonitorSource `json:"source"`

    /*  (Optional) */
    Stats *interface{} `json:"stats"`

    /*  (Optional) */
    TcpOption *monitor.SiteMonitorTcpOption `json:"tcpOption"`

    /*  (Optional) */
    Type *string `json:"type"`

    /*  (Optional) */
    UdpOption *monitor.SiteMonitorUdpOption `json:"udpOption"`

    /*  (Optional) */
    UpdatedTime *int64 `json:"updatedTime"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateSiteMonitorRequest(
) *UpdateSiteMonitorRequest {

	return &UpdateSiteMonitorRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/siteMonitor",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param address:  (Optional)
 * param advanceChecked:  (Optional)
 * param createdTime:  (Optional)
 * param cycle:  (Optional)
 * param defaultSource:  (Optional)
 * param enabled:  (Optional)
 * param hawkeyeId:  (Optional)
 * param httpOption:  (Optional)
 * param id:  (Optional)
 * param isDeleted:  (Optional)
 * param name:  (Optional)
 * param pin:  (Optional)
 * param port:  (Optional)
 * param source:  (Optional)
 * param stats:  (Optional)
 * param tcpOption:  (Optional)
 * param type_:  (Optional)
 * param udpOption:  (Optional)
 * param updatedTime:  (Optional)
 */
func NewUpdateSiteMonitorRequestWithAllParams(
    address *string,
    advanceChecked *string,
    createdTime *int64,
    cycle *int64,
    defaultSource *string,
    enabled *string,
    hawkeyeId *int64,
    httpOption *monitor.SiteMonitorHttpOption,
    id *string,
    isDeleted *string,
    name *string,
    pin *string,
    port *string,
    source []monitor.SiteMonitorSource,
    stats *interface{},
    tcpOption *monitor.SiteMonitorTcpOption,
    type_ *string,
    udpOption *monitor.SiteMonitorUdpOption,
    updatedTime *int64,
) *UpdateSiteMonitorRequest {

    return &UpdateSiteMonitorRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/siteMonitor",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        Address: address,
        AdvanceChecked: advanceChecked,
        CreatedTime: createdTime,
        Cycle: cycle,
        DefaultSource: defaultSource,
        Enabled: enabled,
        HawkeyeId: hawkeyeId,
        HttpOption: httpOption,
        Id: id,
        IsDeleted: isDeleted,
        Name: name,
        Pin: pin,
        Port: port,
        Source: source,
        Stats: stats,
        TcpOption: tcpOption,
        Type: type_,
        UdpOption: udpOption,
        UpdatedTime: updatedTime,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateSiteMonitorRequestWithoutParam() *UpdateSiteMonitorRequest {

    return &UpdateSiteMonitorRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/siteMonitor",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param address: (Optional) */
func (r *UpdateSiteMonitorRequest) SetAddress(address string) {
    r.Address = &address
}

/* param advanceChecked: (Optional) */
func (r *UpdateSiteMonitorRequest) SetAdvanceChecked(advanceChecked string) {
    r.AdvanceChecked = &advanceChecked
}

/* param createdTime: (Optional) */
func (r *UpdateSiteMonitorRequest) SetCreatedTime(createdTime int64) {
    r.CreatedTime = &createdTime
}

/* param cycle: (Optional) */
func (r *UpdateSiteMonitorRequest) SetCycle(cycle int64) {
    r.Cycle = &cycle
}

/* param defaultSource: (Optional) */
func (r *UpdateSiteMonitorRequest) SetDefaultSource(defaultSource string) {
    r.DefaultSource = &defaultSource
}

/* param enabled: (Optional) */
func (r *UpdateSiteMonitorRequest) SetEnabled(enabled string) {
    r.Enabled = &enabled
}

/* param hawkeyeId: (Optional) */
func (r *UpdateSiteMonitorRequest) SetHawkeyeId(hawkeyeId int64) {
    r.HawkeyeId = &hawkeyeId
}

/* param httpOption: (Optional) */
func (r *UpdateSiteMonitorRequest) SetHttpOption(httpOption *monitor.SiteMonitorHttpOption) {
    r.HttpOption = httpOption
}

/* param id: (Optional) */
func (r *UpdateSiteMonitorRequest) SetId(id string) {
    r.Id = &id
}

/* param isDeleted: (Optional) */
func (r *UpdateSiteMonitorRequest) SetIsDeleted(isDeleted string) {
    r.IsDeleted = &isDeleted
}

/* param name: (Optional) */
func (r *UpdateSiteMonitorRequest) SetName(name string) {
    r.Name = &name
}

/* param pin: (Optional) */
func (r *UpdateSiteMonitorRequest) SetPin(pin string) {
    r.Pin = &pin
}

/* param port: (Optional) */
func (r *UpdateSiteMonitorRequest) SetPort(port string) {
    r.Port = &port
}

/* param source: (Optional) */
func (r *UpdateSiteMonitorRequest) SetSource(source []monitor.SiteMonitorSource) {
    r.Source = source
}

/* param stats: (Optional) */
func (r *UpdateSiteMonitorRequest) SetStats(stats interface{}) {
    r.Stats = &stats
}

/* param tcpOption: (Optional) */
func (r *UpdateSiteMonitorRequest) SetTcpOption(tcpOption *monitor.SiteMonitorTcpOption) {
    r.TcpOption = tcpOption
}

/* param type_: (Optional) */
func (r *UpdateSiteMonitorRequest) SetType(type_ string) {
    r.Type = &type_
}

/* param udpOption: (Optional) */
func (r *UpdateSiteMonitorRequest) SetUdpOption(udpOption *monitor.SiteMonitorUdpOption) {
    r.UdpOption = udpOption
}

/* param updatedTime: (Optional) */
func (r *UpdateSiteMonitorRequest) SetUpdatedTime(updatedTime int64) {
    r.UpdatedTime = &updatedTime
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateSiteMonitorRequest) GetRegionId() string {
    return ""
}

type UpdateSiteMonitorResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateSiteMonitorResult `json:"result"`
}

type UpdateSiteMonitorResult struct {
    Suc bool `json:"suc"`
}