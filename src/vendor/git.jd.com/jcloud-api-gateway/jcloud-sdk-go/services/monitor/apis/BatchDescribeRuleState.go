// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    monitor "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/monitor/models"
)

type BatchDescribeRuleStateRequest struct {

    core.JDCloudRequest

    /* serviceCode  */
    ServiceCode string `json:"serviceCode"`

    /* resourceId,支持批量查询，不同resourceId用竖线分隔, 如：id1|id2|id3|id4  */
    ResourceId string `json:"resourceId"`

    /* datacenter  */
    Datacenter string `json:"datacenter"`

    /*  (Optional) */
    RuleType *int `json:"ruleType"`
}

/*
 * param serviceCode: serviceCode (Required)
 * param resourceId: resourceId,支持批量查询，不同resourceId用竖线分隔, 如：id1|id2|id3|id4 (Required)
 * param datacenter: datacenter (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewBatchDescribeRuleStateRequest(
    serviceCode string,
    resourceId string,
    datacenter string,
) *BatchDescribeRuleStateRequest {

	return &BatchDescribeRuleStateRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/alarmState:batch",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        ServiceCode: serviceCode,
        ResourceId: resourceId,
        Datacenter: datacenter,
	}
}

/*
 * param serviceCode: serviceCode (Required)
 * param resourceId: resourceId,支持批量查询，不同resourceId用竖线分隔, 如：id1|id2|id3|id4 (Required)
 * param datacenter: datacenter (Required)
 * param ruleType:  (Optional)
 */
func NewBatchDescribeRuleStateRequestWithAllParams(
    serviceCode string,
    resourceId string,
    datacenter string,
    ruleType *int,
) *BatchDescribeRuleStateRequest {

    return &BatchDescribeRuleStateRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/alarmState:batch",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        ServiceCode: serviceCode,
        ResourceId: resourceId,
        Datacenter: datacenter,
        RuleType: ruleType,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewBatchDescribeRuleStateRequestWithoutParam() *BatchDescribeRuleStateRequest {

    return &BatchDescribeRuleStateRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/alarmState:batch",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param serviceCode: serviceCode(Required) */
func (r *BatchDescribeRuleStateRequest) SetServiceCode(serviceCode string) {
    r.ServiceCode = serviceCode
}

/* param resourceId: resourceId,支持批量查询，不同resourceId用竖线分隔, 如：id1|id2|id3|id4(Required) */
func (r *BatchDescribeRuleStateRequest) SetResourceId(resourceId string) {
    r.ResourceId = resourceId
}

/* param datacenter: datacenter(Required) */
func (r *BatchDescribeRuleStateRequest) SetDatacenter(datacenter string) {
    r.Datacenter = datacenter
}

/* param ruleType: (Optional) */
func (r *BatchDescribeRuleStateRequest) SetRuleType(ruleType int) {
    r.RuleType = &ruleType
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r BatchDescribeRuleStateRequest) GetRegionId() string {
    return ""
}

type BatchDescribeRuleStateResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result BatchDescribeRuleStateResult `json:"result"`
}

type BatchDescribeRuleStateResult struct {
    RuleState []monitor.RuleState `json:"ruleState"`
}