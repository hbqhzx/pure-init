// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type SetForbiddenStreamRequest struct {

    core.JDCloudRequest

    /* 用户域名  */
    Domain string `json:"domain"`

    /* 禁播流名 (Optional) */
    Streams []string `json:"streams"`

    /* 封禁推流的app (Optional) */
    App *string `json:"app"`

    /* 禁播类型:forever永久，limit限时封禁 (Optional) */
    Type *string `json:"type"`

    /* 禁播时长单位s,当限时封禁时,必传 (Optional) */
    Ttl *int64 `json:"ttl"`
}

/*
 * param domain: 用户域名 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewSetForbiddenStreamRequest(
    domain string,
) *SetForbiddenStreamRequest {

	return &SetForbiddenStreamRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/liveDomain/{domain}/stream:forbidden",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Domain: domain,
	}
}

/*
 * param domain: 用户域名 (Required)
 * param streams: 禁播流名 (Optional)
 * param app: 封禁推流的app (Optional)
 * param type: 禁播类型:forever永久，limit限时封禁 (Optional)
 * param ttl: 禁播时长单位s,当限时封禁时,必传 (Optional)
 */
func NewSetForbiddenStreamRequestWithAllParams(
    domain string,
    streams []string,
    app *string,
    type *string,
    ttl *int64,
) *SetForbiddenStreamRequest {

    return &SetForbiddenStreamRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/liveDomain/{domain}/stream:forbidden",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Domain: domain,
        Streams: streams,
        App: app,
        Type: type,
        Ttl: ttl,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewSetForbiddenStreamRequestWithoutParam() *SetForbiddenStreamRequest {

    return &SetForbiddenStreamRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/liveDomain/{domain}/stream:forbidden",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param domain: 用户域名(Required) */
func (r *SetForbiddenStreamRequest) SetDomain(domain string) {
    r.Domain = domain
}

/* param streams: 禁播流名(Optional) */
func (r *SetForbiddenStreamRequest) SetStreams(streams []string) {
    r.Streams = streams
}

/* param app: 封禁推流的app(Optional) */
func (r *SetForbiddenStreamRequest) SetApp(app string) {
    r.App = &app
}

/* param type: 禁播类型:forever永久，limit限时封禁(Optional) */
func (r *SetForbiddenStreamRequest) SetType(type string) {
    r.Type = &type
}

/* param ttl: 禁播时长单位s,当限时封禁时,必传(Optional) */
func (r *SetForbiddenStreamRequest) SetTtl(ttl int64) {
    r.Ttl = &ttl
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r SetForbiddenStreamRequest) GetRegionId() string {
    return ""
}

type SetForbiddenStreamResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result SetForbiddenStreamResult `json:"result"`
}

type SetForbiddenStreamResult struct {
}