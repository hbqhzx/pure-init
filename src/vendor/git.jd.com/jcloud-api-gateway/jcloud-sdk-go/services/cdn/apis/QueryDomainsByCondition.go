// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type QueryDomainsByConditionRequest struct {

    core.JDCloudRequest

    /* 域名组id (Optional) */
    Ids []string `json:"ids"`

    /* 业务类型 (Optional) */
    DomainType *string `json:"domainType"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewQueryDomainsByConditionRequest(
) *QueryDomainsByConditionRequest {

	return &QueryDomainsByConditionRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/domainGroup:domains",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param ids: 域名组id (Optional)
 * param domainType: 业务类型 (Optional)
 */
func NewQueryDomainsByConditionRequestWithAllParams(
    ids []string,
    domainType *string,
) *QueryDomainsByConditionRequest {

    return &QueryDomainsByConditionRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/domainGroup:domains",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Ids: ids,
        DomainType: domainType,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewQueryDomainsByConditionRequestWithoutParam() *QueryDomainsByConditionRequest {

    return &QueryDomainsByConditionRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/domainGroup:domains",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param ids: 域名组id(Optional) */
func (r *QueryDomainsByConditionRequest) SetIds(ids []string) {
    r.Ids = ids
}

/* param domainType: 业务类型(Optional) */
func (r *QueryDomainsByConditionRequest) SetDomainType(domainType string) {
    r.DomainType = &domainType
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r QueryDomainsByConditionRequest) GetRegionId() string {
    return ""
}

type QueryDomainsByConditionResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result QueryDomainsByConditionResult `json:"result"`
}

type QueryDomainsByConditionResult struct {
    Data []string `json:"data"`
}