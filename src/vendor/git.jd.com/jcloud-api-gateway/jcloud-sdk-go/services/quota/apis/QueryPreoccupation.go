// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    quota "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/quota/models"
)

type QueryPreoccupationRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* 用户pin (Optional) */
    Pin *string `json:"pin"`

    /* 地域code (Optional) */
    Region *string `json:"region"`

    /* 资源类型 (Optional) */
    ServiceCode *string `json:"serviceCode"`

    /* 父层资源id（针对有两层结构的服务，如私有网络） (Optional) */
    ParentResourceId *string `json:"parentResourceId"`

    /* 资源id(事务id),业务方传，（不传，配额系统返回） (Optional) */
    ResourceId *string `json:"resourceId"`
}

/*
 * param regionId: Region ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewQueryPreoccupationRequest(
    regionId string,
) *QueryPreoccupationRequest {

	return &QueryPreoccupationRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/quota:queryPreoccupation",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: Region ID (Required)
 * param pin: 用户pin (Optional)
 * param region: 地域code (Optional)
 * param serviceCode: 资源类型 (Optional)
 * param parentResourceId: 父层资源id（针对有两层结构的服务，如私有网络） (Optional)
 * param resourceId: 资源id(事务id),业务方传，（不传，配额系统返回） (Optional)
 */
func NewQueryPreoccupationRequestWithAllParams(
    regionId string,
    pin *string,
    region *string,
    serviceCode *string,
    parentResourceId *string,
    resourceId *string,
) *QueryPreoccupationRequest {

    return &QueryPreoccupationRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/quota:queryPreoccupation",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Pin: pin,
        Region: region,
        ServiceCode: serviceCode,
        ParentResourceId: parentResourceId,
        ResourceId: resourceId,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewQueryPreoccupationRequestWithoutParam() *QueryPreoccupationRequest {

    return &QueryPreoccupationRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/quota:queryPreoccupation",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *QueryPreoccupationRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param pin: 用户pin(Optional) */
func (r *QueryPreoccupationRequest) SetPin(pin string) {
    r.Pin = &pin
}

/* param region: 地域code(Optional) */
func (r *QueryPreoccupationRequest) SetRegion(region string) {
    r.Region = &region
}

/* param serviceCode: 资源类型(Optional) */
func (r *QueryPreoccupationRequest) SetServiceCode(serviceCode string) {
    r.ServiceCode = &serviceCode
}

/* param parentResourceId: 父层资源id（针对有两层结构的服务，如私有网络）(Optional) */
func (r *QueryPreoccupationRequest) SetParentResourceId(parentResourceId string) {
    r.ParentResourceId = &parentResourceId
}

/* param resourceId: 资源id(事务id),业务方传，（不传，配额系统返回）(Optional) */
func (r *QueryPreoccupationRequest) SetResourceId(resourceId string) {
    r.ResourceId = &resourceId
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r QueryPreoccupationRequest) GetRegionId() string {
    return r.RegionId
}

type QueryPreoccupationResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result QueryPreoccupationResult `json:"result"`
}

type QueryPreoccupationResult struct {
    Data quota.PreoccupationQuotaReqVo `json:"data"`
}