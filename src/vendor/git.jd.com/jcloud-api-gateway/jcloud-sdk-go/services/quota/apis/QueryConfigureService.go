// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    quota "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/quota/models"
)

type QueryConfigureServiceRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* type值 不传默认0 all(0),service(1),vpc(2),region(3) (Optional) */
    Type *int `json:"type"`
}

/*
 * param regionId: Region ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewQueryConfigureServiceRequest(
    regionId string,
) *QueryConfigureServiceRequest {

	return &QueryConfigureServiceRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/configure/service",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: Region ID (Required)
 * param type_: type值 不传默认0 all(0),service(1),vpc(2),region(3) (Optional)
 */
func NewQueryConfigureServiceRequestWithAllParams(
    regionId string,
    type_ *int,
) *QueryConfigureServiceRequest {

    return &QueryConfigureServiceRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/configure/service",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Type: type_,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewQueryConfigureServiceRequestWithoutParam() *QueryConfigureServiceRequest {

    return &QueryConfigureServiceRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/configure/service",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *QueryConfigureServiceRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param type_: type值 不传默认0 all(0),service(1),vpc(2),region(3)(Optional) */
func (r *QueryConfigureServiceRequest) SetType(type_ int) {
    r.Type = &type_
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r QueryConfigureServiceRequest) GetRegionId() string {
    return r.RegionId
}

type QueryConfigureServiceResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result QueryConfigureServiceResult `json:"result"`
}

type QueryConfigureServiceResult struct {
    AllResource []quota.ServiceResVo `json:"allResource"`
    VpcResources []quota.ServiceResVo `json:"vpcResources"`
    RegionResources []quota.ServiceResVo `json:"regionResources"`
}