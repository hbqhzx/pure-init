// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    httpdns "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/httpdns/models"
)

type QueryTotalCountRequest struct {

    core.JDCloudRequest

    /* 实例所属的地域ID  */
    RegionId string `json:"regionId"`

    /* 分页查询时设置的每页行数  */
    PageSize int `json:"pageSize"`

    /* 当前页数，起始值为1  */
    PageIndex int `json:"pageIndex"`

    /* 起始时间, UTC时间例如2017-11-10T23:00:00Z  */
    Start string `json:"start"`

    /* 终止时间, UTC时间例如2017-11-10T23:00:00Z  */
    End string `json:"end"`
}

/*
 * param regionId: 实例所属的地域ID (Required)
 * param pageSize: 分页查询时设置的每页行数 (Required)
 * param pageIndex: 当前页数，起始值为1 (Required)
 * param start: 起始时间, UTC时间例如2017-11-10T23:00:00Z (Required)
 * param end: 终止时间, UTC时间例如2017-11-10T23:00:00Z (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewQueryTotalCountRequest(
    regionId string,
    pageSize int,
    pageIndex int,
    start string,
    end string,
) *QueryTotalCountRequest {

	return &QueryTotalCountRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/domain/queryTotalCount",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        PageSize: pageSize,
        PageIndex: pageIndex,
        Start: start,
        End: end,
	}
}

/*
 * param regionId: 实例所属的地域ID (Required)
 * param pageSize: 分页查询时设置的每页行数 (Required)
 * param pageIndex: 当前页数，起始值为1 (Required)
 * param start: 起始时间, UTC时间例如2017-11-10T23:00:00Z (Required)
 * param end: 终止时间, UTC时间例如2017-11-10T23:00:00Z (Required)
 */
func NewQueryTotalCountRequestWithAllParams(
    regionId string,
    pageSize int,
    pageIndex int,
    start string,
    end string,
) *QueryTotalCountRequest {

    return &QueryTotalCountRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/domain/queryTotalCount",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        PageSize: pageSize,
        PageIndex: pageIndex,
        Start: start,
        End: end,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewQueryTotalCountRequestWithoutParam() *QueryTotalCountRequest {

    return &QueryTotalCountRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/domain/queryTotalCount",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 实例所属的地域ID(Required) */
func (r *QueryTotalCountRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param pageSize: 分页查询时设置的每页行数(Required) */
func (r *QueryTotalCountRequest) SetPageSize(pageSize int) {
    r.PageSize = pageSize
}

/* param pageIndex: 当前页数，起始值为1(Required) */
func (r *QueryTotalCountRequest) SetPageIndex(pageIndex int) {
    r.PageIndex = pageIndex
}

/* param start: 起始时间, UTC时间例如2017-11-10T23:00:00Z(Required) */
func (r *QueryTotalCountRequest) SetStart(start string) {
    r.Start = start
}

/* param end: 终止时间, UTC时间例如2017-11-10T23:00:00Z(Required) */
func (r *QueryTotalCountRequest) SetEnd(end string) {
    r.End = end
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r QueryTotalCountRequest) GetRegionId() string {
    return r.RegionId
}

type QueryTotalCountResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result QueryTotalCountResult `json:"result"`
}

type QueryTotalCountResult struct {
    Data httpdns.TotalcountData `json:"data"`
}