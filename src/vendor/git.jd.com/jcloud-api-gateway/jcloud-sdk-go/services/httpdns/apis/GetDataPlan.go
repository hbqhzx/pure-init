// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    httpdns "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/httpdns/models"
)

type GetDataPlanRequest struct {

    core.JDCloudRequest

    /* 实例所属的地域ID  */
    RegionId string `json:"regionId"`

    /* 流量包类型，0：所有的流量包， 1：免费的流量包，2：收费的流量包  */
    Type int `json:"type"`
}

/*
 * param regionId: 实例所属的地域ID (Required)
 * param type_: 流量包类型，0：所有的流量包， 1：免费的流量包，2：收费的流量包 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewGetDataPlanRequest(
    regionId string,
    type_ int,
) *GetDataPlanRequest {

	return &GetDataPlanRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/dataplan",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        Type: type_,
	}
}

/*
 * param regionId: 实例所属的地域ID (Required)
 * param type_: 流量包类型，0：所有的流量包， 1：免费的流量包，2：收费的流量包 (Required)
 */
func NewGetDataPlanRequestWithAllParams(
    regionId string,
    type_ int,
) *GetDataPlanRequest {

    return &GetDataPlanRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/dataplan",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Type: type_,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewGetDataPlanRequestWithoutParam() *GetDataPlanRequest {

    return &GetDataPlanRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/dataplan",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 实例所属的地域ID(Required) */
func (r *GetDataPlanRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param type_: 流量包类型，0：所有的流量包， 1：免费的流量包，2：收费的流量包(Required) */
func (r *GetDataPlanRequest) SetType(type_ int) {
    r.Type = type_
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r GetDataPlanRequest) GetRegionId() string {
    return r.RegionId
}

type GetDataPlanResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result GetDataPlanResult `json:"result"`
}

type GetDataPlanResult struct {
    Data []httpdns.Dataplan `json:"data"`
}