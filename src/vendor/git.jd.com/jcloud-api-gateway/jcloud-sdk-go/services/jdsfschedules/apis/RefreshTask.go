// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type RefreshTaskRequest struct {

    core.JDCloudRequest

    /* 可用区id  */
    RegionId string `json:"regionId"`

    /* 触发器组名  */
    Group string `json:"group"`

    /* 触发器名称  */
    Name string `json:"name"`

    /* cron表达式  */
    CronExpression string `json:"cronExpression"`

    /* 任务描述  */
    Description string `json:"description"`
}

/*
 * param regionId: 可用区id (Required)
 * param group: 触发器组名 (Required)
 * param name: 触发器名称 (Required)
 * param cronExpression: cron表达式 (Required)
 * param description: 任务描述 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewRefreshTaskRequest(
    regionId string,
    group string,
    name string,
    cronExpression string,
    description string,
) *RefreshTaskRequest {

	return &RefreshTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/triggerGroup/{group}/triggerName/{name}",
			Method:  "PATCH",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        Group: group,
        Name: name,
        CronExpression: cronExpression,
        Description: description,
	}
}

/*
 * param regionId: 可用区id (Required)
 * param group: 触发器组名 (Required)
 * param name: 触发器名称 (Required)
 * param cronExpression: cron表达式 (Required)
 * param description: 任务描述 (Required)
 */
func NewRefreshTaskRequestWithAllParams(
    regionId string,
    group string,
    name string,
    cronExpression string,
    description string,
) *RefreshTaskRequest {

    return &RefreshTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/triggerGroup/{group}/triggerName/{name}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Group: group,
        Name: name,
        CronExpression: cronExpression,
        Description: description,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewRefreshTaskRequestWithoutParam() *RefreshTaskRequest {

    return &RefreshTaskRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/triggerGroup/{group}/triggerName/{name}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 可用区id(Required) */
func (r *RefreshTaskRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param group: 触发器组名(Required) */
func (r *RefreshTaskRequest) SetGroup(group string) {
    r.Group = group
}

/* param name: 触发器名称(Required) */
func (r *RefreshTaskRequest) SetName(name string) {
    r.Name = name
}

/* param cronExpression: cron表达式(Required) */
func (r *RefreshTaskRequest) SetCronExpression(cronExpression string) {
    r.CronExpression = cronExpression
}

/* param description: 任务描述(Required) */
func (r *RefreshTaskRequest) SetDescription(description string) {
    r.Description = description
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r RefreshTaskRequest) GetRegionId() string {
    return r.RegionId
}

type RefreshTaskResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result RefreshTaskResult `json:"result"`
}

type RefreshTaskResult struct {
    RefreshStatus string `json:"refreshStatus"`
    FirstTime string `json:"firstTime"`
}