// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    baseanti "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/baseanti/apis"
    "encoding/json"
    "errors"
)

type BaseantiClient struct {
    core.JDCloudClient
}

func NewBaseantiClient(credential *core.Credential) *BaseantiClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("baseanti.jdcloud-api.com")

    return &BaseantiClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "baseanti",
            Revision:    "1.1.0",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *BaseantiClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *BaseantiClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 查询公网 IP 安全信息, 支持 ipv4 和 ipv6 */
func (c *BaseantiClient) DescribeIpSafetyInfo(request *baseanti.DescribeIpSafetyInfoRequest) (*baseanti.DescribeIpSafetyInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.DescribeIpSafetyInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 设置公网 IP 的清洗阈值, 支持 ipv4 和 ipv6 */
func (c *BaseantiClient) SetIpCleanThreshold(request *baseanti.SetIpCleanThresholdRequest) (*baseanti.SetIpCleanThresholdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.SetIpCleanThresholdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询多个公网 IP 的监控流量, 支持 ipv4 和 ipv6 */
func (c *BaseantiClient) DescribeIpMonitorFlow(request *baseanti.DescribeIpMonitorFlowRequest) (*baseanti.DescribeIpMonitorFlowResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.DescribeIpMonitorFlowResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询 IPv6 资源的安全信息, 建议使用 describeElasticIpResources 接口已包含 ipv6 资源 */
func (c *BaseantiClient) DescribeIpv6Resources(request *baseanti.DescribeIpv6ResourcesRequest) (*baseanti.DescribeIpv6ResourcesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.DescribeIpv6ResourcesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询公网 IP 的安全信息列表(已废弃, 建议使用 describeElasticIpResources, describeCpsIpResources 接口) */
func (c *BaseantiClient) DescribeIpResources(request *baseanti.DescribeIpResourcesRequest) (*baseanti.DescribeIpResourcesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.DescribeIpResourcesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 检测是否为托管区用户 */
func (c *BaseantiClient) CheckTrusteeshipUser(request *baseanti.CheckTrusteeshipUserRequest) (*baseanti.CheckTrusteeshipUserResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.CheckTrusteeshipUserResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 攻击情况统计 */
func (c *BaseantiClient) DescribeAttackStatistics(request *baseanti.DescribeAttackStatisticsRequest) (*baseanti.DescribeAttackStatisticsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.DescribeAttackStatisticsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询弹性公网 IP 资源的安全信息 */
func (c *BaseantiClient) DescribeElasticIpResources(request *baseanti.DescribeElasticIpResourcesRequest) (*baseanti.DescribeElasticIpResourcesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.DescribeElasticIpResourcesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询公网 IP 可设置清洗阈值范围, 支持 ipv4 和 ipv6 */
func (c *BaseantiClient) DescribeIpCleanThresholdRange(request *baseanti.DescribeIpCleanThresholdRangeRequest) (*baseanti.DescribeIpCleanThresholdRangeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.DescribeIpCleanThresholdRangeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询各类型攻击次数 */
func (c *BaseantiClient) DescribeAttackTypeCount(request *baseanti.DescribeAttackTypeCountRequest) (*baseanti.DescribeAttackTypeCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.DescribeAttackTypeCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询托管区 IP 资源的安全信息 */
func (c *BaseantiClient) DescribeTrusteeshipIpResources(request *baseanti.DescribeTrusteeshipIpResourcesRequest) (*baseanti.DescribeTrusteeshipIpResourcesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.DescribeTrusteeshipIpResourcesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询公网 IP 的攻击记录, 仅支持 ipv4(已废弃, 建议使用 describeAttackLogs 接口) */
func (c *BaseantiClient) DescribeIpResourceProtectInfo(request *baseanti.DescribeIpResourceProtectInfoRequest) (*baseanti.DescribeIpResourceProtectInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.DescribeIpResourceProtectInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询云物理服务器公网 IP 资源的安全信息 */
func (c *BaseantiClient) DescribeCpsIpResources(request *baseanti.DescribeCpsIpResourcesRequest) (*baseanti.DescribeCpsIpResourcesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.DescribeCpsIpResourcesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 检测是否为 ipv6 用户 */
func (c *BaseantiClient) CheckIpv6User(request *baseanti.CheckIpv6UserRequest) (*baseanti.CheckIpv6UserResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.CheckIpv6UserResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 设置公网 IP 的清洗阈值, 仅支持 ipv4(已废弃, 建议使用 setIpCleanThreshold 接口) */
func (c *BaseantiClient) SetCleanThreshold(request *baseanti.SetCleanThresholdRequest) (*baseanti.SetCleanThresholdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.SetCleanThresholdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询公网 IP 的 endTime 之前 15 分钟内监控流量, 仅支持 ipv4(已废弃, 建议使用 describeIpMonitorFlow 接口) */
func (c *BaseantiClient) DescribeIpResourceFlow(request *baseanti.DescribeIpResourceFlowRequest) (*baseanti.DescribeIpResourceFlowResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.DescribeIpResourceFlowResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询公网 IP 安全信息, 仅支持 ipv4(已废弃, 建议使用 describeIpSafetyInfo 接口) */
func (c *BaseantiClient) DescribeIpResourceInfo(request *baseanti.DescribeIpResourceInfoRequest) (*baseanti.DescribeIpResourceInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.DescribeIpResourceInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询攻击记录 */
func (c *BaseantiClient) DescribeAttackLogs(request *baseanti.DescribeAttackLogsRequest) (*baseanti.DescribeAttackLogsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &baseanti.DescribeAttackLogsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

