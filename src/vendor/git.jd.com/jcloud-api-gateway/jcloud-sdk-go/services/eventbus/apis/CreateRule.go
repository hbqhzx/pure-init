// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    eventbus "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/eventbus/models"
)

type CreateRuleRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* 订阅事件uuid  */
    BucketUuid string `json:"bucketUuid"`

    /* 幂等性校验参数,最长36位  */
    ClientToken string `json:"clientToken"`

    /* 规则的名称 (Optional) */
    Name *string `json:"name"`

    /* 规则的 Pattern 要符合规则语法  */
    Pattern string `json:"pattern"`

    /* 规则的版本 (Optional) */
    PatternVersion *string `json:"patternVersion"`

    /* 事件的路由的目的地  */
    Targets []eventbus.TargetParam `json:"targets"`
}

/*
 * param regionId: 地域 Id (Required)
 * param bucketUuid: 订阅事件uuid (Required)
 * param clientToken: 幂等性校验参数,最长36位 (Required)
 * param pattern: 规则的 Pattern 要符合规则语法 (Required)
 * param targets: 事件的路由的目的地 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateRuleRequest(
    regionId string,
    bucketUuid string,
    clientToken string,
    pattern string,
    targets []eventbus.TargetParam,
) *CreateRuleRequest {

	return &CreateRuleRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/rule",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        BucketUuid: bucketUuid,
        ClientToken: clientToken,
        Pattern: pattern,
        Targets: targets,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param bucketUuid: 订阅事件uuid (Required)
 * param clientToken: 幂等性校验参数,最长36位 (Required)
 * param name: 规则的名称 (Optional)
 * param pattern: 规则的 Pattern 要符合规则语法 (Required)
 * param patternVersion: 规则的版本 (Optional)
 * param targets: 事件的路由的目的地 (Required)
 */
func NewCreateRuleRequestWithAllParams(
    regionId string,
    bucketUuid string,
    clientToken string,
    name *string,
    pattern string,
    patternVersion *string,
    targets []eventbus.TargetParam,
) *CreateRuleRequest {

    return &CreateRuleRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/rule",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        BucketUuid: bucketUuid,
        ClientToken: clientToken,
        Name: name,
        Pattern: pattern,
        PatternVersion: patternVersion,
        Targets: targets,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateRuleRequestWithoutParam() *CreateRuleRequest {

    return &CreateRuleRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/rule",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *CreateRuleRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param bucketUuid: 订阅事件uuid(Required) */
func (r *CreateRuleRequest) SetBucketUuid(bucketUuid string) {
    r.BucketUuid = bucketUuid
}

/* param clientToken: 幂等性校验参数,最长36位(Required) */
func (r *CreateRuleRequest) SetClientToken(clientToken string) {
    r.ClientToken = clientToken
}

/* param name: 规则的名称(Optional) */
func (r *CreateRuleRequest) SetName(name string) {
    r.Name = &name
}

/* param pattern: 规则的 Pattern 要符合规则语法(Required) */
func (r *CreateRuleRequest) SetPattern(pattern string) {
    r.Pattern = pattern
}

/* param patternVersion: 规则的版本(Optional) */
func (r *CreateRuleRequest) SetPatternVersion(patternVersion string) {
    r.PatternVersion = &patternVersion
}

/* param targets: 事件的路由的目的地(Required) */
func (r *CreateRuleRequest) SetTargets(targets []eventbus.TargetParam) {
    r.Targets = targets
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateRuleRequest) GetRegionId() string {
    return r.RegionId
}

type CreateRuleResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateRuleResult `json:"result"`
}

type CreateRuleResult struct {
    RuleUuid string `json:"ruleUuid"`
    Success bool `json:"success"`
    TargetUuids []string `json:"targetUuids"`
}