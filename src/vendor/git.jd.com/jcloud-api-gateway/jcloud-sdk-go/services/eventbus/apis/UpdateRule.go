// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type UpdateRuleRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* 规则的Pattern  */
    Pattern string `json:"pattern"`

    /* 规则的UUID  */
    RuleId string `json:"ruleId"`
}

/*
 * param regionId: 地域 Id (Required)
 * param pattern: 规则的Pattern (Required)
 * param ruleId: 规则的UUID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateRuleRequest(
    regionId string,
    pattern string,
    ruleId string,
) *UpdateRuleRequest {

	return &UpdateRuleRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/updateRule",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        Pattern: pattern,
        RuleId: ruleId,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param pattern: 规则的Pattern (Required)
 * param ruleId: 规则的UUID (Required)
 */
func NewUpdateRuleRequestWithAllParams(
    regionId string,
    pattern string,
    ruleId string,
) *UpdateRuleRequest {

    return &UpdateRuleRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/updateRule",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Pattern: pattern,
        RuleId: ruleId,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateRuleRequestWithoutParam() *UpdateRuleRequest {

    return &UpdateRuleRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/updateRule",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *UpdateRuleRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param pattern: 规则的Pattern(Required) */
func (r *UpdateRuleRequest) SetPattern(pattern string) {
    r.Pattern = pattern
}

/* param ruleId: 规则的UUID(Required) */
func (r *UpdateRuleRequest) SetRuleId(ruleId string) {
    r.RuleId = ruleId
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateRuleRequest) GetRegionId() string {
    return r.RegionId
}

type UpdateRuleResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateRuleResult `json:"result"`
}

type UpdateRuleResult struct {
    Success bool `json:"success"`
    Uuids string `json:"uuids"`
}