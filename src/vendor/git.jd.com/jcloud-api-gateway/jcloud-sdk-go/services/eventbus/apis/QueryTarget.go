// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    eventbus "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/eventbus/models"
)

type QueryTargetRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* 当前所在页，默认为1 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 页面大小，默认为20；取值范围[1, 100] (Optional) */
    PageSize *int `json:"pageSize"`

    /* 规则的名称 (Optional) */
    RuleName *string `json:"ruleName"`

    /* bucket的UUID (Optional) */
    RuleUuid *string `json:"ruleUuid"`

    /* 开始时间 (Optional) */
    StartTime *string `json:"startTime"`

    /* 结束时间 (Optional) */
    EndTime *string `json:"endTime"`
}

/*
 * param regionId: 地域 Id (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewQueryTargetRequest(
    regionId string,
) *QueryTargetRequest {

	return &QueryTargetRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/target",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param pageNumber: 当前所在页，默认为1 (Optional)
 * param pageSize: 页面大小，默认为20；取值范围[1, 100] (Optional)
 * param ruleName: 规则的名称 (Optional)
 * param ruleUuid: bucket的UUID (Optional)
 * param startTime: 开始时间 (Optional)
 * param endTime: 结束时间 (Optional)
 */
func NewQueryTargetRequestWithAllParams(
    regionId string,
    pageNumber *int,
    pageSize *int,
    ruleName *string,
    ruleUuid *string,
    startTime *string,
    endTime *string,
) *QueryTargetRequest {

    return &QueryTargetRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/target",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        PageNumber: pageNumber,
        PageSize: pageSize,
        RuleName: ruleName,
        RuleUuid: ruleUuid,
        StartTime: startTime,
        EndTime: endTime,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewQueryTargetRequestWithoutParam() *QueryTargetRequest {

    return &QueryTargetRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/target",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *QueryTargetRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param pageNumber: 当前所在页，默认为1(Optional) */
func (r *QueryTargetRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}

/* param pageSize: 页面大小，默认为20；取值范围[1, 100](Optional) */
func (r *QueryTargetRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

/* param ruleName: 规则的名称(Optional) */
func (r *QueryTargetRequest) SetRuleName(ruleName string) {
    r.RuleName = &ruleName
}

/* param ruleUuid: bucket的UUID(Optional) */
func (r *QueryTargetRequest) SetRuleUuid(ruleUuid string) {
    r.RuleUuid = &ruleUuid
}

/* param startTime: 开始时间(Optional) */
func (r *QueryTargetRequest) SetStartTime(startTime string) {
    r.StartTime = &startTime
}

/* param endTime: 结束时间(Optional) */
func (r *QueryTargetRequest) SetEndTime(endTime string) {
    r.EndTime = &endTime
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r QueryTargetRequest) GetRegionId() string {
    return r.RegionId
}

type QueryTargetResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result QueryTargetResult `json:"result"`
}

type QueryTargetResult struct {
    NumberPages int64 `json:"numberPages"`
    NumberRecords int64 `json:"numberRecords"`
    PageNumber int64 `json:"pageNumber"`
    PageSize int64 `json:"pageSize"`
    TargetList []eventbus.TargetQueryEnd `json:"targetList"`
}