// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type BuildLogRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* 构建任务uuid  */
    Id string `json:"id"`

    /* 查询日志的偏移量, 默认为0 (Optional) */
    OffsetNumber *int `json:"offsetNumber"`
}

/*
 * param regionId: Region ID (Required)
 * param id: 构建任务uuid (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewBuildLogRequest(
    regionId string,
    id string,
) *BuildLogRequest {

	return &BuildLogRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/builds/{id}/log",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        Id: id,
	}
}

/*
 * param regionId: Region ID (Required)
 * param id: 构建任务uuid (Required)
 * param offsetNumber: 查询日志的偏移量, 默认为0 (Optional)
 */
func NewBuildLogRequestWithAllParams(
    regionId string,
    id string,
    offsetNumber *int,
) *BuildLogRequest {

    return &BuildLogRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/builds/{id}/log",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Id: id,
        OffsetNumber: offsetNumber,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewBuildLogRequestWithoutParam() *BuildLogRequest {

    return &BuildLogRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/builds/{id}/log",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *BuildLogRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param id: 构建任务uuid(Required) */
func (r *BuildLogRequest) SetId(id string) {
    r.Id = id
}

/* param offsetNumber: 查询日志的偏移量, 默认为0(Optional) */
func (r *BuildLogRequest) SetOffsetNumber(offsetNumber int) {
    r.OffsetNumber = &offsetNumber
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r BuildLogRequest) GetRegionId() string {
    return r.RegionId
}

type BuildLogResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result BuildLogResult `json:"result"`
}

type BuildLogResult struct {
    Log string `json:"log"`
    OffsetNumber int `json:"offsetNumber"`
}