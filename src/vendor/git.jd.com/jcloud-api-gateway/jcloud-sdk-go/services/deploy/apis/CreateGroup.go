// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type CreateGroupRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 部署组名称  */
    GroupName string `json:"groupName"`

    /* 应用ID  */
    AppId string `json:"appId"`

    /* 描述 (Optional) */
    Desc *string `json:"desc"`

    /* 部署方式：1滚动部署，2蓝绿部署  */
    DeployMethod int `json:"deployMethod"`

    /* 部署实例（滚动 (Optional) */
    Instances []string `json:"instances"`

    /* 部署实例（蓝） (Optional) */
    BlueInstances []string `json:"blueInstances"`

    /* 部署实例（绿） (Optional) */
    GreenInstances []string `json:"greenInstances"`

    /* 并发单位 (Optional) */
    ConcurrencyUnit *int `json:"concurrencyUnit"`

    /* 并发机器数 (Optional) */
    ConcurrencyNum *int `json:"concurrencyNum"`

    /* 并发度 (Optional) */
    ConcurrencyPct *int `json:"concurrencyPct"`

    /* 负载均衡：1启动，2禁用  */
    LbStatus int `json:"lbStatus"`

    /* lb实例 (Optional) */
    LbInstance *string `json:"lbInstance"`

    /* lb lb_backend (Optional) */
    LbBackend *string `json:"lbBackend"`

    /* 同名文件处理方式：1部署失败，2覆盖，3保留  */
    RepeatPolicy int `json:"repeatPolicy"`

    /* 通知频率：0不发送，1消息，2邮件，3短信 (Optional) */
    NoticeTrigger *int `json:"noticeTrigger"`

    /* 通知方式：1消息，2邮件，3短信 (Optional) */
    NoticeMethod []string `json:"noticeMethod"`

    /* 自动回滚：1开启，2禁用  */
    Rollback int `json:"rollback"`

    /* 分布式服务框架ID (Optional) */
    JdsfRegisterId *string `json:"jdsfRegisterId"`
}

/*
 * param regionId: 地域ID (Required)
 * param groupName: 部署组名称 (Required)
 * param appId: 应用ID (Required)
 * param deployMethod: 部署方式：1滚动部署，2蓝绿部署 (Required)
 * param lbStatus: 负载均衡：1启动，2禁用 (Required)
 * param repeatPolicy: 同名文件处理方式：1部署失败，2覆盖，3保留 (Required)
 * param rollback: 自动回滚：1开启，2禁用 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateGroupRequest(
    regionId string,
    groupName string,
    appId string,
    deployMethod int,
    lbStatus int,
    repeatPolicy int,
    rollback int,
) *CreateGroupRequest {

	return &CreateGroupRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/group",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        GroupName: groupName,
        AppId: appId,
        DeployMethod: deployMethod,
        LbStatus: lbStatus,
        RepeatPolicy: repeatPolicy,
        Rollback: rollback,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param groupName: 部署组名称 (Required)
 * param appId: 应用ID (Required)
 * param desc: 描述 (Optional)
 * param deployMethod: 部署方式：1滚动部署，2蓝绿部署 (Required)
 * param instances: 部署实例（滚动 (Optional)
 * param blueInstances: 部署实例（蓝） (Optional)
 * param greenInstances: 部署实例（绿） (Optional)
 * param concurrencyUnit: 并发单位 (Optional)
 * param concurrencyNum: 并发机器数 (Optional)
 * param concurrencyPct: 并发度 (Optional)
 * param lbStatus: 负载均衡：1启动，2禁用 (Required)
 * param lbInstance: lb实例 (Optional)
 * param lbBackend: lb lb_backend (Optional)
 * param repeatPolicy: 同名文件处理方式：1部署失败，2覆盖，3保留 (Required)
 * param noticeTrigger: 通知频率：0不发送，1消息，2邮件，3短信 (Optional)
 * param noticeMethod: 通知方式：1消息，2邮件，3短信 (Optional)
 * param rollback: 自动回滚：1开启，2禁用 (Required)
 * param jdsfRegisterId: 分布式服务框架ID (Optional)
 */
func NewCreateGroupRequestWithAllParams(
    regionId string,
    groupName string,
    appId string,
    desc *string,
    deployMethod int,
    instances []string,
    blueInstances []string,
    greenInstances []string,
    concurrencyUnit *int,
    concurrencyNum *int,
    concurrencyPct *int,
    lbStatus int,
    lbInstance *string,
    lbBackend *string,
    repeatPolicy int,
    noticeTrigger *int,
    noticeMethod []string,
    rollback int,
    jdsfRegisterId *string,
) *CreateGroupRequest {

    return &CreateGroupRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/group",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        GroupName: groupName,
        AppId: appId,
        Desc: desc,
        DeployMethod: deployMethod,
        Instances: instances,
        BlueInstances: blueInstances,
        GreenInstances: greenInstances,
        ConcurrencyUnit: concurrencyUnit,
        ConcurrencyNum: concurrencyNum,
        ConcurrencyPct: concurrencyPct,
        LbStatus: lbStatus,
        LbInstance: lbInstance,
        LbBackend: lbBackend,
        RepeatPolicy: repeatPolicy,
        NoticeTrigger: noticeTrigger,
        NoticeMethod: noticeMethod,
        Rollback: rollback,
        JdsfRegisterId: jdsfRegisterId,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateGroupRequestWithoutParam() *CreateGroupRequest {

    return &CreateGroupRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/group",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *CreateGroupRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param groupName: 部署组名称(Required) */
func (r *CreateGroupRequest) SetGroupName(groupName string) {
    r.GroupName = groupName
}

/* param appId: 应用ID(Required) */
func (r *CreateGroupRequest) SetAppId(appId string) {
    r.AppId = appId
}

/* param desc: 描述(Optional) */
func (r *CreateGroupRequest) SetDesc(desc string) {
    r.Desc = &desc
}

/* param deployMethod: 部署方式：1滚动部署，2蓝绿部署(Required) */
func (r *CreateGroupRequest) SetDeployMethod(deployMethod int) {
    r.DeployMethod = deployMethod
}

/* param instances: 部署实例（滚动(Optional) */
func (r *CreateGroupRequest) SetInstances(instances []string) {
    r.Instances = instances
}

/* param blueInstances: 部署实例（蓝）(Optional) */
func (r *CreateGroupRequest) SetBlueInstances(blueInstances []string) {
    r.BlueInstances = blueInstances
}

/* param greenInstances: 部署实例（绿）(Optional) */
func (r *CreateGroupRequest) SetGreenInstances(greenInstances []string) {
    r.GreenInstances = greenInstances
}

/* param concurrencyUnit: 并发单位(Optional) */
func (r *CreateGroupRequest) SetConcurrencyUnit(concurrencyUnit int) {
    r.ConcurrencyUnit = &concurrencyUnit
}

/* param concurrencyNum: 并发机器数(Optional) */
func (r *CreateGroupRequest) SetConcurrencyNum(concurrencyNum int) {
    r.ConcurrencyNum = &concurrencyNum
}

/* param concurrencyPct: 并发度(Optional) */
func (r *CreateGroupRequest) SetConcurrencyPct(concurrencyPct int) {
    r.ConcurrencyPct = &concurrencyPct
}

/* param lbStatus: 负载均衡：1启动，2禁用(Required) */
func (r *CreateGroupRequest) SetLbStatus(lbStatus int) {
    r.LbStatus = lbStatus
}

/* param lbInstance: lb实例(Optional) */
func (r *CreateGroupRequest) SetLbInstance(lbInstance string) {
    r.LbInstance = &lbInstance
}

/* param lbBackend: lb lb_backend(Optional) */
func (r *CreateGroupRequest) SetLbBackend(lbBackend string) {
    r.LbBackend = &lbBackend
}

/* param repeatPolicy: 同名文件处理方式：1部署失败，2覆盖，3保留(Required) */
func (r *CreateGroupRequest) SetRepeatPolicy(repeatPolicy int) {
    r.RepeatPolicy = repeatPolicy
}

/* param noticeTrigger: 通知频率：0不发送，1消息，2邮件，3短信(Optional) */
func (r *CreateGroupRequest) SetNoticeTrigger(noticeTrigger int) {
    r.NoticeTrigger = &noticeTrigger
}

/* param noticeMethod: 通知方式：1消息，2邮件，3短信(Optional) */
func (r *CreateGroupRequest) SetNoticeMethod(noticeMethod []string) {
    r.NoticeMethod = noticeMethod
}

/* param rollback: 自动回滚：1开启，2禁用(Required) */
func (r *CreateGroupRequest) SetRollback(rollback int) {
    r.Rollback = rollback
}

/* param jdsfRegisterId: 分布式服务框架ID(Optional) */
func (r *CreateGroupRequest) SetJdsfRegisterId(jdsfRegisterId string) {
    r.JdsfRegisterId = &jdsfRegisterId
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateGroupRequest) GetRegionId() string {
    return r.RegionId
}

type CreateGroupResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateGroupResult `json:"result"`
}

type CreateGroupResult struct {
    GroupId string `json:"groupId"`
}