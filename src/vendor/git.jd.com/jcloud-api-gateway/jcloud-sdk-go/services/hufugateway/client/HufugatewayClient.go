// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    hufugateway "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/hufugateway/apis"
    "encoding/json"
    "errors"
)

type HufugatewayClient struct {
    core.JDCloudClient
}

func NewHufugatewayClient(credential *core.Credential) *HufugatewayClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("hufugateway.jdcloud-api.com")

    return &HufugatewayClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "hufugateway",
            Revision:    "0.0.1",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *HufugatewayClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *HufugatewayClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 查询Upstream列表 */
func (c *HufugatewayClient) UpstreamList(request *hufugateway.UpstreamListRequest) (*hufugateway.UpstreamListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufugateway.UpstreamListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除授权接口 */
func (c *HufugatewayClient) BackendSignDelete(request *hufugateway.BackendSignDeleteRequest) (*hufugateway.BackendSignDeleteResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufugateway.BackendSignDeleteResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询api授权列表 */
func (c *HufugatewayClient) AccessAuthList(request *hufugateway.AccessAuthListRequest) (*hufugateway.AccessAuthListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufugateway.AccessAuthListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建授权 */
func (c *HufugatewayClient) AccessAuthCreate(request *hufugateway.AccessAuthCreateRequest) (*hufugateway.AccessAuthCreateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufugateway.AccessAuthCreateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建Upstream */
func (c *HufugatewayClient) UpstreamCreate(request *hufugateway.UpstreamCreateRequest) (*hufugateway.UpstreamCreateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufugateway.UpstreamCreateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建key */
func (c *HufugatewayClient) KmsCreateKey(request *hufugateway.KmsCreateKeyRequest) (*hufugateway.KmsCreateKeyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufugateway.KmsCreateKeyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改key信息 */
func (c *HufugatewayClient) KmsUpdateKey(request *hufugateway.KmsUpdateKeyRequest) (*hufugateway.KmsUpdateKeyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufugateway.KmsUpdateKeyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除授权接口 */
func (c *HufugatewayClient) AccessAuthDelete(request *hufugateway.AccessAuthDeleteRequest) (*hufugateway.AccessAuthDeleteResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufugateway.AccessAuthDeleteResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建授权 */
func (c *HufugatewayClient) BackendSignCreate(request *hufugateway.BackendSignCreateRequest) (*hufugateway.BackendSignCreateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufugateway.BackendSignCreateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除key接口 */
func (c *HufugatewayClient) KmsDeleteKeys(request *hufugateway.KmsDeleteKeysRequest) (*hufugateway.KmsDeleteKeysResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufugateway.KmsDeleteKeysResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除key接口 */
func (c *HufugatewayClient) UpstreamDelete(request *hufugateway.UpstreamDeleteRequest) (*hufugateway.UpstreamDeleteResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufugateway.UpstreamDeleteResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询api后端签名列表 */
func (c *HufugatewayClient) BackendSignList(request *hufugateway.BackendSignListRequest) (*hufugateway.BackendSignListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufugateway.BackendSignListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改upstream信息 */
func (c *HufugatewayClient) UpstreamUpdate(request *hufugateway.UpstreamUpdateRequest) (*hufugateway.UpstreamUpdateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufugateway.UpstreamUpdateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询key列表 */
func (c *HufugatewayClient) KmsKeysList(request *hufugateway.KmsKeysListRequest) (*hufugateway.KmsKeysListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufugateway.KmsKeysListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询key列表 */
func (c *HufugatewayClient) KmsQueryKeyInfo(request *hufugateway.KmsQueryKeyInfoRequest) (*hufugateway.KmsQueryKeyInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufugateway.KmsQueryKeyInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

