// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    function "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/function/models"
)

type CreateTriggerRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* 函数名称  */
    FunctionName string `json:"functionName"`

    /* 版本名称  */
    VersionName string `json:"versionName"`

    /* 事件源，目前支持apigateway和oss  */
    EventSource string `json:"eventSource"`

    /* 事件源Id，分别对应apiId和BucketId  */
    EventSourceId string `json:"eventSourceId"`

    /* configurationId，分别对应apiId和ConfigurationId  */
    ConfigurationId string `json:"configurationId"`
}

/*
 * param regionId: Region ID (Required)
 * param functionName: 函数名称 (Required)
 * param versionName: 版本名称 (Required)
 * param eventSource: 事件源，目前支持apigateway和oss (Required)
 * param eventSourceId: 事件源Id，分别对应apiId和BucketId (Required)
 * param configurationId: configurationId，分别对应apiId和ConfigurationId (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateTriggerRequest(
    regionId string,
    functionName string,
    versionName string,
    eventSource string,
    eventSourceId string,
    configurationId string,
) *CreateTriggerRequest {

	return &CreateTriggerRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/functions/{functionName}/versions/{versionName}:innercreatetrigger",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        FunctionName: functionName,
        VersionName: versionName,
        EventSource: eventSource,
        EventSourceId: eventSourceId,
        ConfigurationId: configurationId,
	}
}

/*
 * param regionId: Region ID (Required)
 * param functionName: 函数名称 (Required)
 * param versionName: 版本名称 (Required)
 * param eventSource: 事件源，目前支持apigateway和oss (Required)
 * param eventSourceId: 事件源Id，分别对应apiId和BucketId (Required)
 * param configurationId: configurationId，分别对应apiId和ConfigurationId (Required)
 */
func NewCreateTriggerRequestWithAllParams(
    regionId string,
    functionName string,
    versionName string,
    eventSource string,
    eventSourceId string,
    configurationId string,
) *CreateTriggerRequest {

    return &CreateTriggerRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/functions/{functionName}/versions/{versionName}:innercreatetrigger",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        FunctionName: functionName,
        VersionName: versionName,
        EventSource: eventSource,
        EventSourceId: eventSourceId,
        ConfigurationId: configurationId,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateTriggerRequestWithoutParam() *CreateTriggerRequest {

    return &CreateTriggerRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/functions/{functionName}/versions/{versionName}:innercreatetrigger",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *CreateTriggerRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param functionName: 函数名称(Required) */
func (r *CreateTriggerRequest) SetFunctionName(functionName string) {
    r.FunctionName = functionName
}

/* param versionName: 版本名称(Required) */
func (r *CreateTriggerRequest) SetVersionName(versionName string) {
    r.VersionName = versionName
}

/* param eventSource: 事件源，目前支持apigateway和oss(Required) */
func (r *CreateTriggerRequest) SetEventSource(eventSource string) {
    r.EventSource = eventSource
}

/* param eventSourceId: 事件源Id，分别对应apiId和BucketId(Required) */
func (r *CreateTriggerRequest) SetEventSourceId(eventSourceId string) {
    r.EventSourceId = eventSourceId
}

/* param configurationId: configurationId，分别对应apiId和ConfigurationId(Required) */
func (r *CreateTriggerRequest) SetConfigurationId(configurationId string) {
    r.ConfigurationId = configurationId
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateTriggerRequest) GetRegionId() string {
    return r.RegionId
}

type CreateTriggerResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateTriggerResult `json:"result"`
}

type CreateTriggerResult struct {
    Data function.Trigger `json:"data"`
}